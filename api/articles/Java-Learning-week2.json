{"title":"Java_Learning(Week2)","uid":"4b98df5a945ea20ec148c80f048ac74c","slug":"Java-Learning-week2","date":"2023-09-18T13:14:43.000Z","updated":"2023-09-18T14:11:48.813Z","comments":true,"path":"api/articles/Java-Learning-week2.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/GeneralK1ng/My_Blog_IMG@main/img/codeBackground.png","content":"<h1 id=\"变量是什么？\"><a href=\"#变量是什么？\" class=\"headerlink\" title=\"变量是什么？\"></a>变量是什么？</h1><p>变量是计算机编程中的一个基本概念，用于存储和表示数据。变量是程序中用来保存数据的一种标识符，它可以是数字、文本、对象或任何其他数据类型的值。通过给变量赋值，程序可以在运行过程中存储、操作和使用数据。</p>\n<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><p>在Java中，变量可以分为以下几种主要类型：</p>\n<ol>\n<li><strong>原始数据类型（Primitive Data Types）：</strong> 用于存储单一的数值，例如整数、浮点数、字符和布尔值。Java的原始数据类型包括<code>int</code>、<code>double</code>、<code>char</code>、<code>boolean</code>等。</li>\n<li><strong>引用数据类型（Reference Data Types）：</strong> 用于存储对象的引用。这些变量不直接存储对象的数据，而是存储对象在内存中的地址。Java的引用数据类型包括类（Class）、接口（Interface）、数组（Array）等。</li>\n</ol>\n<h3 id=\"原始数据类型（Primitive-Data-Types）：\"><a href=\"#原始数据类型（Primitive-Data-Types）：\" class=\"headerlink\" title=\"原始数据类型（Primitive Data Types）：\"></a>原始数据类型（Primitive Data Types）：</h3><ol>\n<li><strong>byte</strong>（字节）：<ul>\n<li>大小：8位（1字节）</li>\n<li>范围：-128 到 127</li>\n<li>用途：通常用于节省内存，存储小整数值。</li>\n</ul>\n</li>\n<li><strong>short</strong>（短整数）：<ul>\n<li>大小：16位（2字节）</li>\n<li>范围：-32,768 到 32,767</li>\n<li>用途：存储中等范围的整数。</li>\n</ul>\n</li>\n<li><strong>int</strong>（整数）：<ul>\n<li>大小：32位（4字节）</li>\n<li>范围：-2^31 到 2^31-1</li>\n<li>用途：存储整数值，是最常用的整数数据类型。</li>\n</ul>\n</li>\n<li><strong>long</strong>（长整数）：<ul>\n<li>大小：64位（8字节）</li>\n<li>范围：-2^63 到 2^63-1</li>\n<li>用途：用于存储大整数值，通常用于需要大范围整数的情况。</li>\n</ul>\n</li>\n<li><strong>float</strong>（浮点数）：<ul>\n<li>大小：32位（4字节）</li>\n<li>用途：存储小数值，具有单精度，通常用于科学计算和工程计算中。</li>\n</ul>\n</li>\n<li><strong>double</strong>（双精度浮点数）：<ul>\n<li>大小：64位（8字节）</li>\n<li>用途：存储小数值，具有双精度，通常用于大多数浮点数计算。</li>\n</ul>\n</li>\n<li><strong>char</strong>（字符）：<ul>\n<li>大小：16位（2字节）</li>\n<li>范围：0 到 65,535</li>\n<li>用途：存储单个字符，例如字母、数字或符号。</li>\n</ul>\n</li>\n<li><strong>boolean</strong>（布尔值）：<ul>\n<li>大小：取决于实现</li>\n<li>只有两个值：<code>true</code> 和 <code>false</code></li>\n<li>用途：表示真假值，通常用于条件判断。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"引用数据类型（Reference-Data-Types）：\"><a href=\"#引用数据类型（Reference-Data-Types）：\" class=\"headerlink\" title=\"引用数据类型（Reference Data Types）：\"></a>引用数据类型（Reference Data Types）：</h3><p>引用数据类型是指对象类型，它们不直接存储数据，而是存储对对象的引用。常见的引用数据类型包括类（Class）、接口（Interface）、数组（Array）等。这些类型的变量存储的是对象的引用地址，而不是对象的实际数据。</p>\n<h2 id=\"变量的声明与初始化\"><a href=\"#变量的声明与初始化\" class=\"headerlink\" title=\"变量的声明与初始化\"></a>变量的声明与初始化</h2><h3 id=\"为什么要声明变量？\"><a href=\"#为什么要声明变量？\" class=\"headerlink\" title=\"为什么要声明变量？\"></a>为什么要声明变量？</h3><p>为什么要声明变量呢？声明变量是为了告诉编译器变量的名称、类型和内存分配。在Java中，声明变量有以下重要原因：</p>\n<ol>\n<li><strong>类型检查：</strong> 声明变量可以让编译器检查代码中的类型错误。如果你尝试将不兼容的数据类型赋给一个已声明的变量，编译器会直接报错。</li>\n<li><strong>内存分配：</strong> 声明变量让编译器知道需要为该变量分配多少内存空间。这是因为不同数据类型需要不同大小的内存来存储。</li>\n<li><strong>代码可读性：</strong> 变量声明可以提高代码的可读性。通过看变量名和类型，其他开发人员可以更容易地理解代码的用途和意图。</li>\n<li><strong>作用域控制：</strong> 变量的声明还确定了变量的作用域，即在哪些部分的代码中可以访问该变量。作用域规则有助于防止变量被误用或滥用。</li>\n</ol>\n<p>在Java中，变量的声明通常包括变量名和类型，例如：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">int age; // 声明一个整数变量\ndouble salary; // 声明一个双精度浮点数变量\nString name; // 声明一个字符串变量</code></pre>\n\n<p>在声明后，可以使用赋值语句将值分配给变量，这一步称为变量的初始化，例如：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">age = 30; // 将值30赋给age变量\nsalary = 50000.0; // 将值50000.0赋给salary变量\nname = \"Jin\"; // 将字符串\"Jin\"赋给name变量</code></pre>\n\n<h3 id=\"什么是变量的初始化？\"><a href=\"#什么是变量的初始化？\" class=\"headerlink\" title=\"什么是变量的初始化？\"></a>什么是变量的初始化？</h3><p>变量的初始化是指在声明变量的同时给它一个初始值。在Java中，可以选择性地在声明时初始化变量，也可以在稍后的代码中初始化。如果不初始化变量，它们将具有默认值，这取决于变量的数据类型。例如，<code>int</code>类型的变量默认初始化为0，<code>boolean</code>类型的变量默认初始化为<code>false</code>，<code>Object</code>类型的变量默认初始化为<code>null</code>。</p>\n<h3 id=\"声明变量的要求\"><a href=\"#声明变量的要求\" class=\"headerlink\" title=\"声明变量的要求\"></a>声明变量的要求</h3><ol>\n<li><strong>变量名称规则：</strong> 变量的名称必须遵循一定的命名规则。变量名称可以包含字母、数字、下划线（_）和美元符号（$），但必须以字母、下划线或美元符号开头，不能以数字开头。变量名称区分大小写，即<code>myVariable</code>和<code>myvariable</code>是不同的变量名。</li>\n<li><strong>关键字冲突：</strong> 变量名称不能与Java的关键字（保留字）相同。例如，不能使用关键字<code>int</code>作为变量名。</li>\n<li><strong>合法标识符：</strong> 变量名称必须是合法的标识符。这意味着变量名称不能包含空格、特殊字符（如@、#、%等），也不能是Java中已经定义的类名、方法名等标识符。</li>\n<li><strong>类型声明：</strong> 变量的声明必须包括其数据类型。数据类型确定了变量可以存储的数据种类和范围。例如，<code>int</code>、<code>double</code>、<code>String</code>等都是合法的数据类型。</li>\n<li><strong>唯一性：</strong> 在同一个作用域内，变量名必须是唯一的。不能在同一作用域内声明两个同名的变量。</li>\n<li><strong>声明语法：</strong> 变量的声明语法为：<code>数据类型 变量名;</code>。例如，<code>int age;</code>声明了一个整数类型的变量名为<code>age</code>。</li>\n</ol>\n<h2 id=\"什么是包装类？\"><a href=\"#什么是包装类？\" class=\"headerlink\" title=\"什么是包装类？\"></a>什么是包装类？</h2><p>课件当中还提到了一个难以理解的概念，就是<strong>包装类（Wrapper Class）</strong>，如果目前无法理解其实无所谓，在后续的泛型部分应该会详细讲，这里我就提一下。</p>\n<p>在Java中，每种原始数据类型都有对应的<strong>包装类（Wrapper Class）</strong>，用于将原始数据类型封装成<strong>对象</strong>。这些包装类提供了一些额外的功能，例如在集合类中存储原始数据类型的值，以及执行一些与对象相关的操作。以下是原始数据类型和其对应的包装类：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>对象的概念很重要，但是要理解也非常的抽象，需要长时间的感觉，所以我会在后面的笔记中渗透一些面向对象的内容，理解什么是对象，什么是面向对象。</p></blockquote>\n<table>\n<thead>\n<tr>\n<th align=\"center\">原始数据类型</th>\n<th align=\"center\">对应的包装类</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">byte</td>\n<td align=\"center\">Byte</td>\n</tr>\n<tr>\n<td align=\"center\">short</td>\n<td align=\"center\">Short</td>\n</tr>\n<tr>\n<td align=\"center\">int</td>\n<td align=\"center\">Integer</td>\n</tr>\n<tr>\n<td align=\"center\">long</td>\n<td align=\"center\">Long</td>\n</tr>\n<tr>\n<td align=\"center\">float</td>\n<td align=\"center\">Float</td>\n</tr>\n<tr>\n<td align=\"center\">double</td>\n<td align=\"center\">Double</td>\n</tr>\n<tr>\n<td align=\"center\">char</td>\n<td align=\"center\">Character</td>\n</tr>\n<tr>\n<td align=\"center\">boolean</td>\n<td align=\"center\">Boolean</td>\n</tr>\n</tbody></table>\n<h3 id=\"包装类的用处\"><a href=\"#包装类的用处\" class=\"headerlink\" title=\"包装类的用处\"></a>包装类的用处</h3><p>这一段我去找的资料，看个乐就行，反正现在看不懂非常正常。</p>\n<ol>\n<li><strong>将原始数据类型转换为对象：</strong> 原始数据类型是基本的数据类型，不能直接用于面向对象编程（OOP）。包装类允许将原始数据类型封装成对象，从而可以在对象上执行各种操作。</li>\n<li><strong>在集合中存储原始数据类型：</strong> Java集合（如<code>ArrayList</code>、<code>HashMap</code>等）只能存储对象，而不能存储原始数据类型。包装类使得可以将原始数据类型的值存储在集合中，因为它们都是对象。</li>\n<li><strong>提供额外的功能和方法：</strong> 包装类提供了许多有用的方法，这些方法可以用于执行各种操作，如转换为字符串、比较、数学运算等。这些方法使得在处理数据时更加灵活和方便。</li>\n<li><strong>处理空值（null）：</strong> 包装类可以存储<code>null</code>值，这在某些情况下非常有用，例如表示缺失数据或处理可能为null的情况。</li>\n<li><strong>支持泛型（Generics）：</strong> 在泛型代码中，只能使用对象类型，而不是原始数据类型。包装类允许您在泛型类中使用原始数据类型的值。</li>\n<li><strong>与其他API的兼容性：</strong> 某些Java API和库只接受对象作为参数，这时您需要使用包装类将原始数据类型封装成对象以便与这些API进行交互。</li>\n<li><strong>Java反射：</strong> 反射是一种机制，可以在运行时检查和操作类的属性和方法。包装类使得可以通过反射机制来访问原始数据类型的信息和值。</li>\n</ol>\n<p>再强调一遍，看不懂无所谓的！</p>\n<p>如果让我用大白话来说，包装类无非是为了让Java当中的一些操作更加灵活和方便。</p>\n<h2 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h2><p>在Java中，数据类型转换是将一个数据类型的值转换为另一个数据类型的过程。数据类型转换通常涉及到原始数据类型之间的转换以及对象之间的转换。Java中的数据类型转换可以分为两种类型：<strong>隐式转换（Implicit Conversion）</strong>和<strong>显式转换（Explicit Conversion）</strong>。</p>\n<h3 id=\"隐式转换（Implicit-Conversion）：\"><a href=\"#隐式转换（Implicit-Conversion）：\" class=\"headerlink\" title=\"隐式转换（Implicit Conversion）：\"></a>隐式转换（Implicit Conversion）：</h3><p>隐式转换是自动进行的类型转换，不需要显式指定，通常发生在以下情况：</p>\n<ol>\n<li><strong>小类型到大类型：</strong> 当将一个小范围的数据类型转换为一个大范围的数据类型时，会发生隐式转换。例如，将一个<code>int</code>赋值给<code>long</code>，或将一个<code>float</code>赋值给<code>double</code>。</li>\n<li><strong>整数到浮点数：</strong> 当将整数类型转换为浮点数类型时，会发生隐式转换。例如，将<code>int</code>赋值给<code>float</code>。</li>\n<li><strong>字面量常量转换：</strong> 在赋值常量字面量时，会进行隐式转换。例如，将整数字面量<code>42</code>赋值给<code>long</code>类型的变量。</li>\n<li><strong>表达式中的类型提升：</strong> 在表达式中，如果包含多个操作数，它们的数据类型会自动提升到更大的数据类型，以便执行操作。这种提升也是隐式转换的一部分。</li>\n</ol>\n<p>隐式转换是安全的，因为它不会导致数据丢失。例如，将<code>int</code>转换为<code>long</code>不会导致数据精度损失。</p>\n<h3 id=\"显式转换（Explicit-Conversion）：\"><a href=\"#显式转换（Explicit-Conversion）：\" class=\"headerlink\" title=\"显式转换（Explicit Conversion）：\"></a>显式转换（Explicit Conversion）：</h3><p>显式转换需要通过强制类型转换操作符（cast）来明确指定。它通常用于以下情况：</p>\n<p><strong>大类型到小类型：</strong> 当将一个大范围的数据类型转换为一个小范围的数据类型时，需要进行显式转换。这可能导致数据精度损失，因此需要程序员明确表示他们知道潜在的风险。例如，将<code>double</code>强制转换为<code>int</code>。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">double d = 3.14;\nint i = (int) d; // 显式转换，将double转换为int，会损失小数部分</code></pre>\n\n<p><strong>对象之间的转换：</strong> 当需要将一个对象从一种类转换为另一种类时，需要进行显式转换。这需要使用强制类型转换操作符，并确保类型之间存在继承关系或实现关系。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">// 显式将父类引用转换为子类引用\nParentClass parent = new ChildClass();\nChildClass child = (ChildClass) parent; // 显式转换</code></pre>\n\n<p><strong>字符到整数的转换：</strong> 当需要将字符类型（<code>char</code>）的字符表示为其对应的Unicode码点时，需要进行显式转换。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">char c = 'A';\nint unicode = (int) c; // 显式转换，将字符'A'转换为Unicode码点65</code></pre>\n\n<p>总结一下就是，显式转换别乱用，比较容易出错的，隐式转换JVM都帮你完成了，你只需要操点心就行。</p>\n<h2 id=\"什么是转义符？\"><a href=\"#什么是转义符？\" class=\"headerlink\" title=\"什么是转义符？\"></a>什么是转义符？</h2><p>看了看我们的课件，第一周的Lab和后面的一些练习当中就出现了转义符的相关知识，那就来了解一下好了。</p>\n<p>在计算机编程中，转义符是一种特殊字符，通常用来表示一些特殊的字符或控制字符序列。转义符以反斜杠符号（<code>\\</code>）开头，后跟一个或多个字符，用于表示不容易直接输入或显示的字符。转义符的主要目的是允许你在字符串或字符常量中插入特殊字符，或者执行某些控制操作。</p>\n<p>以下是一些常见的转义符及其用途：</p>\n<ol>\n<li><strong>\\n：</strong> 表示<strong>换行符</strong>，用于在文本中创建新的一行。</li>\n<li><strong>\\t：</strong> 表示<strong>制表符</strong>，用于在文本中创建水平制表符（通常用于缩进文本）。</li>\n<li><strong>\\r：</strong> 表示<strong>回车符</strong>，用于将光标移到行的开头。</li>\n<li><strong>\\b：</strong> 表示<strong>退格符</strong>，用于删除光标前的字符。</li>\n<li><strong>\\f：</strong> 表示<strong>换页符</strong>，通常在控制打印机输出时使用。</li>\n<li><strong>\\：</strong> 表示<strong>反斜杠自身</strong>，用于在字符串中插入反斜杠字符。</li>\n<li><strong>‘：</strong> 表示<strong>单引号字符</strong>，用于在字符常量中插入单引号。</li>\n<li><strong>“：</strong> 表示<strong>双引号字符</strong>，用于在字符串中插入双引号。</li>\n<li><strong>\\uXXXX：</strong> 表示Unicode转义序列，其中XXXX是一个四位十六进制数，用于表示特定的Unicode字符。例如，<code>\\u0041</code>表示字符’A’。</li>\n</ol>\n<p>使用转义符可以在字符串中插入特殊字符，从而实现格式化文本、创建多行文本、处理特殊字符等目的。例如，要创建一个包含换行的多行字符串，可以使用<code>\\n</code>转义符，如下所示：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">String multiLineString = \"This is the first line.\\nThis is the second line.\";\nSystem.out.println(multiLineString);</code></pre>\n\n<p>或者你要是想要在打印输出的时候输出双引号本身，你就可以在<strong>需要输出的双引号</strong>前加上<code>\\</code>。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public static void main(String[] args) {\n\t\tSystem.out.println(\"Hello world!\");\n        System.out.println(\"\\\"Hello world!\\\"\");\n    }</code></pre>\n\n<p>最后就会输出</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">Hello world!\n\"Hello world!\"</code></pre>\n\n<p>所以其实没啥重要的知识，忘了自己上网查就好。</p>\n<h1 id=\"良好的编程习惯！\"><a href=\"#良好的编程习惯！\" class=\"headerlink\" title=\"良好的编程习惯！\"></a>良好的编程习惯！</h1><p>这一部分非常的重要，好的习惯养成就是在最开始学习编程的时候养成的，不然后续很多的坏习惯可能会导致团队协作，项目开发，版本维护等等等问题，所以这一部分还是挺重要的。</p>\n<p>我们的最终的目的是可以编写<strong>优雅的代码</strong>，什么样子的代码可以称得上优雅？</p>\n<ol>\n<li><strong>有意义的变量名：</strong> 变量名应该能清晰地表达变量的用途和含义。避免使用单个字母或无意义的缩写。例如，使用<code>totalAmount</code>而不是<code>amt</code>，使用<code>customerName</code>而不是<code>cn</code>。尤其是很多国人，千万不要用拼音来，其实拼音还好，最怕的是用拼音缩写，真的逆天，记住一定要让别人和你自己都能看懂，为什么说你自己呢？因为在编程当中有一句话：“刚写完的代码只有我和上帝看得懂，一周后，只有上帝看得懂。。。”如果养成了良好习惯，就能极大程度的避免这一点，并且后期工作一般是很多人来维护同一个项目，如果你的变量名很抽象，很容易导致团队合作的脱节。</li>\n<li><strong>注释：</strong> 使用注释来解释代码的意图和关键部分，但不要过度注释。注释应该是清晰、简洁、易于理解的。及时更新注释以反映代码的变化。我平时最讨厌两种人，一种是让我加注释的，另一种是不让我加注释的XD。</li>\n<li><strong>缩进和格式化：</strong> 使用一致的缩进和代码格式化规范，以增加代码的可读性。使用空格或制表符进行缩进，选择一种风格并保持一致。一定要缩进，一定要换行！不然问别人问题别人都不想给你看。</li>\n<li><strong>函数和方法：</strong> 函数和方法应该短小而专注于单一任务。遵循单一职责原则（SRP）。使用有意义的函数名，并确保函数的命名与其功能一致。记住，一个函数或者方法只干一件事，实现功能的时候一定是越细化越好，现在可能看不出来，但是一旦到了大型项目，这样的好处就体现出来了，可以快速定位bug，快速针对功能进行更新，修改，删除。</li>\n<li><strong>避免魔法数值：</strong> 避免在代码中直接使用未经解释的魔法数值。使用常量或枚举类型来表示这些数值，并为其命名以提高代码的可维护性。魔法数值就是直接把一个数字写到代码里面，这会非常的致命。</li>\n<li><strong>异常处理：</strong> 始终处理可能引发异常的情况。不要忽略异常或简单地将其抛出。使用try-catch块或throws声明来处理异常。等我们学到异常之后就能理解了，现在可以先不用管。</li>\n<li><strong>代码复用：</strong> 遵循”不要重复自己”（DRY）原则，将常用的代码块提取到函数、方法或类中以便复用。</li>\n<li><strong>代码测试：</strong> 编写单元测试来验证代码的正确性。自动化测试可以帮助及早发现和修复问题。每次写完一个部分，或者一个小功能时候养成一个习惯针对这一部分写几个测试用例来验证一下，可以有效降低bug率。</li>\n<li><strong>版本控制：</strong> 使用版本控制系统（如Git）来跟踪代码的历史记录和更改。提交代码前进行代码审查。</li>\n<li><strong>命名约定：</strong> 遵循命名约定，例如Java中的驼峰命名法（camelCase），以及类名以大写字母开头等。</li>\n<li><strong>文档化：</strong> 编写文档来描述项目、模块、函数和方法的用法和API。这有助于其他开发人员理解和使用你的代码。</li>\n<li><strong>性能考虑：</strong> 在编写代码时考虑性能问题，但不要过度优化。只有在有明确性能问题时才进行优化。采访过一位大佬，代码的易读性&gt;代码的性能。</li>\n<li><strong>安全性：</strong> 注意代码的安全性，避免常见的安全漏洞，如SQL注入、跨站脚本（XSS）等。</li>\n<li><strong>错误处理：</strong> 考虑错误处理策略，包括日志记录和向用户提供有用的错误信息。</li>\n<li><strong>持续学习：</strong> 不断学习新的编程技术和最佳实践，保持对编程世界的好奇心和进取心。</li>\n</ol>\n","text":"变量是什么？变量是计算机编程中的一个基本概念，用于存储和表示数据。变量是程序中用来保存数据的一种标识符，它可以是数字、文本、对象或任何其他数据类型的值。通过给变量赋值，程序可以在运行过程中存储、操作和使用数据。 数据类型在Java中，变量可以分为以下几种主要类型： 原始数据类型（...","link":"","photos":[],"count_time":{"symbolsCount":"6.6k","symbolsTime":"6 mins."},"categories":[],"tags":[{"name":"笔记","slug":"笔记","count":37,"path":"api/tags/笔记.json"},{"name":"Java初学","slug":"Java初学","count":10,"path":"api/tags/Java初学.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%8F%98%E9%87%8F%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\"><span class=\"toc-text\">变量是什么？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">数据类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E5%A7%8B%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%EF%BC%88Primitive-Data-Types%EF%BC%89%EF%BC%9A\"><span class=\"toc-text\">原始数据类型（Primitive Data Types）：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BC%95%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%EF%BC%88Reference-Data-Types%EF%BC%89%EF%BC%9A\"><span class=\"toc-text\">引用数据类型（Reference Data Types）：</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%98%E9%87%8F%E7%9A%84%E5%A3%B0%E6%98%8E%E4%B8%8E%E5%88%9D%E5%A7%8B%E5%8C%96\"><span class=\"toc-text\">变量的声明与初始化</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%A3%B0%E6%98%8E%E5%8F%98%E9%87%8F%EF%BC%9F\"><span class=\"toc-text\">为什么要声明变量？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AF%E5%8F%98%E9%87%8F%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96%EF%BC%9F\"><span class=\"toc-text\">什么是变量的初始化？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A3%B0%E6%98%8E%E5%8F%98%E9%87%8F%E7%9A%84%E8%A6%81%E6%B1%82\"><span class=\"toc-text\">声明变量的要求</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AF%E5%8C%85%E8%A3%85%E7%B1%BB%EF%BC%9F\"><span class=\"toc-text\">什么是包装类？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8C%85%E8%A3%85%E7%B1%BB%E7%9A%84%E7%94%A8%E5%A4%84\"><span class=\"toc-text\">包装类的用处</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2\"><span class=\"toc-text\">类型转换</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%9A%90%E5%BC%8F%E8%BD%AC%E6%8D%A2%EF%BC%88Implicit-Conversion%EF%BC%89%EF%BC%9A\"><span class=\"toc-text\">隐式转换（Implicit Conversion）：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%98%BE%E5%BC%8F%E8%BD%AC%E6%8D%A2%EF%BC%88Explicit-Conversion%EF%BC%89%EF%BC%9A\"><span class=\"toc-text\">显式转换（Explicit Conversion）：</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AF%E8%BD%AC%E4%B9%89%E7%AC%A6%EF%BC%9F\"><span class=\"toc-text\">什么是转义符？</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%89%AF%E5%A5%BD%E7%9A%84%E7%BC%96%E7%A8%8B%E4%B9%A0%E6%83%AF%EF%BC%81\"><span class=\"toc-text\">良好的编程习惯！</span></a></li></ol>","author":{"name":"General_K1ng","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/GeneralK1ng/My_Blog_IMG@main/img/avatar.png","link":"/","description":"一名正在努力学习计算机的菜鸟","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/BILIBILI.svg","link":"https://space.bilibili.com/32927332"},"csdn":{"icon":"/svg/csdn.svg","link":"https://blog.csdn.net/qq_34849354"},"github":{"icon":"/svg/GitHub.svg","link":"https://github.com/GeneralK1ng"},"QQ":{"icon":"/svg/QQ.svg","link":"tencent://AddContact/?fromId=45&fromSubId=1&subcmd=all&uin=2822688858"}}}},"mapped":true,"prev_post":{"title":"Java_Exercise(Week 2)","uid":"359c9a1a9e0f8b70b5c766d3c5f40981","slug":"Java-Exercise-Week2","date":"2023-09-22T08:43:31.000Z","updated":"2023-09-22T11:51:55.389Z","comments":true,"path":"api/articles/Java-Exercise-Week2.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/GeneralK1ng/My_Blog_IMG@main/img/codeBackground.png","text":"Exercise #2.1 What day is it?编写一个 Java 程序，将日期作为输入，并打印出该日期所在星期的哪一天。 程序应使用三个整数：y（年）、m（月）和 d（日）。对于 m，1 月用 1，2 月用 2，以此类推。对于输出，周日打印 0，周一打印 1，周二打印...","link":"","photos":[],"count_time":{"symbolsCount":"6.2k","symbolsTime":"6 mins."},"categories":[],"tags":[{"name":"笔记","slug":"笔记","count":37,"path":"api/tags/笔记.json"},{"name":"Java初学","slug":"Java初学","count":10,"path":"api/tags/Java初学.json"}],"author":{"name":"General_K1ng","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/GeneralK1ng/My_Blog_IMG@main/img/avatar.png","link":"/","description":"一名正在努力学习计算机的菜鸟","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/BILIBILI.svg","link":"https://space.bilibili.com/32927332"},"csdn":{"icon":"/svg/csdn.svg","link":"https://blog.csdn.net/qq_34849354"},"github":{"icon":"/svg/GitHub.svg","link":"https://github.com/GeneralK1ng"},"QQ":{"icon":"/svg/QQ.svg","link":"tencent://AddContact/?fromId=45&fromSubId=1&subcmd=all&uin=2822688858"}}}}},"next_post":{"title":"Java_Learning(Week 1)","uid":"b6ddc4ee88d4afe7e2e1051d594b4d83","slug":"Java-Learning","date":"2023-09-18T08:56:41.000Z","updated":"2023-09-18T14:11:52.332Z","comments":true,"path":"api/articles/Java-Learning.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/GeneralK1ng/My_Blog_IMG@main/img/codeBackground.png","text":"整理CPT111这门课程（Java Programming）的一些笔记，从最简单的开始，不是简单的翻译，但是还是会以学校进程和教材为主。 选择一个趁手的IDE在我们选择IDE前，容我先简单介绍一下什么是IDE，为什么我们需要IDE。 什么是IDE？IDE是集成开发环境（Integ...","link":"","photos":[],"count_time":{"symbolsCount":"3.2k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"笔记","slug":"笔记","count":37,"path":"api/tags/笔记.json"},{"name":"Java初学","slug":"Java初学","count":10,"path":"api/tags/Java初学.json"}],"author":{"name":"General_K1ng","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/GeneralK1ng/My_Blog_IMG@main/img/avatar.png","link":"/","description":"一名正在努力学习计算机的菜鸟","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/BILIBILI.svg","link":"https://space.bilibili.com/32927332"},"csdn":{"icon":"/svg/csdn.svg","link":"https://blog.csdn.net/qq_34849354"},"github":{"icon":"/svg/GitHub.svg","link":"https://github.com/GeneralK1ng"},"QQ":{"icon":"/svg/QQ.svg","link":"tencent://AddContact/?fromId=45&fromSubId=1&subcmd=all&uin=2822688858"}}}}}}