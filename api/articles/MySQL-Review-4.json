{"title":"MySQL Review-4","uid":"3cf8efd46ba4d0ca921476f1afc68b5c","slug":"MySQL-Review-4","date":"2023-12-06T05:45:33.000Z","updated":"2023-12-06T09:49:39.696Z","comments":true,"path":"api/articles/MySQL-Review-4.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/GeneralK1ng/My_Blog_IMG@main/img/MySQL-image.png","content":"<p>今天来继续复习<code>MySQL</code>中的<code>SELECT</code>语句，也是以后基本上用的最多的查询操作。</p>\n<h1 id=\"SELECT\"><a href=\"#SELECT\" class=\"headerlink\" title=\"SELECT\"></a><code>SELECT</code></h1><h2 id=\"一般形式\"><a href=\"#一般形式\" class=\"headerlink\" title=\"一般形式\"></a>一般形式</h2><p><code>SELECT</code>主要用于从数据库当中检索数据，这是它的一般形式。</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">SELECT column1, column2, ...\nFROM table_name\nWHERE condition;</code></pre>\n\n<ul>\n<li><code>column1, column2, ...</code>: 要检索的列的名称，可以是一个或多个列，也可以使用通配符<code>*</code>表示选择所有列。</li>\n<li><code>table_name</code>: 要检索数据的表的名称。</li>\n<li><code>WHERE condition</code>: 可选的条件，用于过滤检索的数据。如果省略此部分，将检索表中的所有行。</li>\n</ul>\n<p>后面我们会讲到<code>WHERE</code>关键字，现在只需要知道后面跟的是需要查询的条件。</p>\n<p>以下是一个简单的SELECT语句的例子：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">SELECT first_name, last_name\nFROM employees\nWHERE department = 'IT';</code></pre>\n\n<p>这个例子从名为”employees”的表中选择了”first_name”和”last_name”列，其中部门是”IT”的所有员工。</p>\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><ol>\n<li><strong>语法规范：</strong> 确保SELECT语句的语法正确。检查列名、表名和条件是否正确拼写，并使用正确的SQL语法。</li>\n<li><strong>数据类型匹配：</strong> 确保条件中使用的数据类型与数据库表中的数据类型匹配。例如，如果某列是字符串类型，条件中的值应该用单引号括起来。</li>\n<li><strong>通配符的使用：</strong> 谨慎使用通配符<code>*</code>，因为它选择表中的所有列。这可能导致不必要的数据传输和性能问题。最好只选择需要的列。</li>\n<li><strong>索引的使用：</strong> 使用索引可以加速SELECT语句的执行。确保表中经常用于检索的列上创建了适当的索引。</li>\n<li><strong>避免使用SELECT *：</strong> 尽量避免使用<code>SELECT *</code>，而是明确列出需要检索的列。这有助于减少数据传输和提高查询性能。</li>\n<li><strong>条件优化：</strong> 使用有效的条件来过滤结果集，以减少返回的数据量。这有助于提高查询性能。</li>\n<li><strong>数据安全：</strong> 对于用户提供的数据，使用参数化查询或预处理语句，以防止SQL注入攻击。</li>\n<li><strong>使用LIMIT：</strong> 当你只需要获取前几行结果时，使用<code>LIMIT</code>子句来限制结果集的大小，从而提高性能。</li>\n</ol>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">SELECT column1, column2\nFROM table_name\nWHERE condition\nLIMIT 10;</code></pre>\n\n<p>这样会通过<code>LIMIT</code>来限制查询出来的结果只为10条。</p>\n<h1 id=\"DISTINCT-和-ALL\"><a href=\"#DISTINCT-和-ALL\" class=\"headerlink\" title=\"DISTINCT 和 ALL\"></a><code>DISTINCT</code> 和 <code>ALL</code></h1><p><code>DISTINCT</code> 和 <code>ALL</code> 是 MySQL 中用于处理重复数据的关键字，它们通常用于配合 <code>SELECT</code> 语句，影响查询结果中的重复行。</p>\n<h2 id=\"DISTINCT\"><a href=\"#DISTINCT\" class=\"headerlink\" title=\"DISTINCT\"></a><code>DISTINCT</code></h2><p><code>DISTINCT</code> 关键字用于从结果集中去除重复的行，只返回唯一的行。以下是一些基本用法：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">SELECT DISTINCT column1, column2, ...\nFROM table_name\nWHERE condition;</code></pre>\n\n<ul>\n<li><code>column1, column2, ...</code>: 要检索的列的名称，可以是一个或多个列，也可以使用通配符 <code>*</code> 表示选择所有列。</li>\n<li><code>table_name</code>: 要检索数据的表的名称。</li>\n<li><code>WHERE condition</code>: 可选的条件，用于过滤检索的数据。</li>\n</ul>\n<p>例如：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">SELECT DISTINCT department\nFROM employees;</code></pre>\n\n<p>上述查询将返回唯一的部门列表，去除了重复的部门名。</p>\n<h2 id=\"ALL\"><a href=\"#ALL\" class=\"headerlink\" title=\"ALL\"></a><code>ALL</code></h2><p><code>ALL</code> 关键字用于保留所有的行，包括重复的行。它通常用于与聚合函数（如 <code>COUNT()</code>、<code>SUM()</code> 等）一起使用，以便在整个结果集上执行聚合操作。以下是一些基本用法：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">SELECT ALL column1, column2, ...\nFROM table_name\nWHERE condition;</code></pre>\n\n<p>例如：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">SELECT ALL salary\nFROM employees\nWHERE department = 'IT';</code></pre>\n\n<p>这个查询将返回部门为 ‘IT’ 的所有员工的薪水，包括重复的薪水值。</p>\n<p>需要注意的是，默认情况下，<code>ALL</code> 是隐式的，也就是说，当没有指定 <code>DISTINCT</code> 时，<code>ALL</code> 是默认的行为。因此，通常在不需要去除重复行的情况下，你可以省略 <code>ALL</code>。</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">-- 下面两个查询等效\nSELECT column1, column2, ...\nFROM table_name\nWHERE condition;\n\nSELECT ALL column1, column2, ...\nFROM table_name\nWHERE condition;</code></pre>\n\n<h1 id=\"AS\"><a href=\"#AS\" class=\"headerlink\" title=\"AS\"></a><code>AS</code></h1><p>在MySQL中，<code>AS</code> 关键字用于给列或表达式指定别名（alias）。别名是一个临时的名称，使得查询结果更易读或用于标识计算列的结果。</p>\n<p><strong><code>AS</code> 可以省略</strong>，直接使用空格或不使用别名，但添加别名通常能够提高查询结果的可读性。</p>\n<p>以下是 <code>AS</code> 关键字的基本用法：</p>\n<h2 id=\"1-列别名：\"><a href=\"#1-列别名：\" class=\"headerlink\" title=\"1. 列别名：\"></a>1. 列别名：</h2><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">SELECT column_name AS alias_name\nFROM table_name;</code></pre>\n\n<p>例子：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">SELECT first_name AS \"First Name\", last_name AS \"Last Name\"\nFROM employees;</code></pre>\n\n<p>在上述例子中，查询结果中的 <code>first_name</code> 和 <code>last_name</code> 列被分别命名为 “First Name” 和 “Last Name”。</p>\n<h2 id=\"2-表别名：\"><a href=\"#2-表别名：\" class=\"headerlink\" title=\"2. 表别名：\"></a>2. 表别名：</h2><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">SELECT column1, column2, ...\nFROM table_name AS alias_name;</code></pre>\n\n<p>例子：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">SELECT e.first_name, e.last_name, d.department_name\nFROM employees AS e\nJOIN departments AS d ON e.department_id = d.department_id;</code></pre>\n\n<p>在上述例子中，<code>employees</code> 表和 <code>departments</code> 表被分别用 <code>e</code> 和 <code>d</code> 作为别名，以简化查询语句。</p>\n<h2 id=\"3-列表达式别名：\"><a href=\"#3-列表达式别名：\" class=\"headerlink\" title=\"3. 列表达式别名：\"></a>3. 列表达式别名：</h2><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">SELECT column_name + 10 AS alias_name\nFROM table_name;</code></pre>\n\n<p>例子：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">SELECT salary * 0.1 AS bonus\nFROM employees;</code></pre>\n\n<p>在上述例子中，<code>salary * 0.1</code> 被命名为 <code>bonus</code>。</p>\n<p><code>AS</code> 关键字在这些情境中是可选的，你可以直接使用空格：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">SELECT column_name alias_name\nFROM table_name;</code></pre>\n\n<p>或者干脆省略：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">SELECT column_name\nFROM table_name;</code></pre>\n\n<p>但是我的习惯一般是要把<code>AS</code>加上，一种代码的规范。</p>\n<h1 id=\"WHERE\"><a href=\"#WHERE\" class=\"headerlink\" title=\"WHERE\"></a><code>WHERE</code></h1><p><code>WHERE</code> 关键字在 MySQL 中用于过滤从表中检索的数据，它允许你指定一个条件，只有符合条件的行才会包含在查询的结果集中。以下是 <code>WHERE</code> 关键字的基本用法：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">SELECT column1, column2, ...\nFROM table_name\nWHERE condition;</code></pre>\n\n<ul>\n<li><code>column1, column2, ...</code>: 要检索的列的名称，可以是一个或多个列，也可以使用通配符 <code>*</code> 表示选择所有列。</li>\n<li><code>table_name</code>: 要检索数据的表的名称。</li>\n<li><code>condition</code>: 过滤条件，用于确定哪些行应该包含在结果集中。</li>\n</ul>\n<p>以下是一些 <code>WHERE</code> 关键字的用法和示例：</p>\n<h2 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h2><h3 id=\"1-简单条件：\"><a href=\"#1-简单条件：\" class=\"headerlink\" title=\"1. 简单条件：\"></a>1. 简单条件：</h3><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">SELECT *\nFROM employees\nWHERE department_id = 1;</code></pre>\n\n<p>上述查询将返回 <code>department_id</code> 等于 1 的所有员工的信息。</p>\n<h3 id=\"2-多个条件：\"><a href=\"#2-多个条件：\" class=\"headerlink\" title=\"2. 多个条件：\"></a>2. 多个条件：</h3><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">SELECT *\nFROM orders\nWHERE customer_id = 1 AND order_status = 'Shipped';</code></pre>\n\n<p>上述查询使用 <code>AND</code> 运算符结合两个条件，只返回 <code>customer_id</code> 为 1 且 <code>order_status</code> 为 ‘Shipped’ 的订单。</p>\n<p>这里的<code>AND</code>不用说也知道表示“且”，后面会单独讲，这里只作为例子。</p>\n<h3 id=\"3-范围条件：\"><a href=\"#3-范围条件：\" class=\"headerlink\" title=\"3. 范围条件：\"></a>3. 范围条件：</h3><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">SELECT *\nFROM products\nWHERE price BETWEEN 50 AND 100;</code></pre>\n\n<p>上述查询使用 <code>BETWEEN</code> 关键字，返回价格在 50 到 100 之间的产品。</p>\n<p>其实这里也能看出来，写SQL就跟写英语一样。。</p>\n<h3 id=\"4-字符串匹配：\"><a href=\"#4-字符串匹配：\" class=\"headerlink\" title=\"4. 字符串匹配：\"></a>4. 字符串匹配：</h3><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">SELECT *\nFROM customers\nWHERE last_name LIKE 'S%';</code></pre>\n\n<p>上述查询使用 <code>LIKE</code> 关键字，返回姓氏以 ‘S’ 开头的客户。</p>\n<h3 id=\"5-空值检查：\"><a href=\"#5-空值检查：\" class=\"headerlink\" title=\"5. 空值检查：\"></a>5. 空值检查：</h3><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">SELECT *\nFROM employees\nWHERE manager_id IS NULL;</code></pre>\n\n<p>上述查询使用 <code>IS NULL</code>，返回 <code>manager_id</code> 列为空的员工。</p>\n<h3 id=\"6-IN-子句：\"><a href=\"#6-IN-子句：\" class=\"headerlink\" title=\"6. IN 子句：\"></a>6. IN 子句：</h3><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">SELECT *\nFROM products\nWHERE category_id IN (1, 2, 3);</code></pre>\n\n<p>上述查询使用 <code>IN</code> 关键字，返回属于指定类别的产品。</p>\n<h3 id=\"7-复杂条件：\"><a href=\"#7-复杂条件：\" class=\"headerlink\" title=\"7. 复杂条件：\"></a>7. 复杂条件：</h3><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">SELECT *\nFROM orders\nWHERE (customer_id = 1 AND order_status = 'Shipped') OR (customer_id = 2 AND order_status = 'Processing');</code></pre>\n\n<p>就。。复杂条件，只要有小学英文水平和逻辑能力，基本上都能看懂。</p>\n<h2 id=\"注意事项-1\"><a href=\"#注意事项-1\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><p>这一部分对于开发来说是非常重要的，不然会出大问题。</p>\n<p><strong>注意条件的顺序：</strong> <code>WHERE</code>中的条件顺序可能会影响查询的性能。一般来说，更有选择性的条件应该放在前面，以便尽早排除不符合条件的行。</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">-- 不推荐\nSELECT *\nFROM employees\nWHERE department_id = 1 AND last_name LIKE 'S%';\n\n-- 推荐\nSELECT *\nFROM employees\nWHERE last_name LIKE 'S%' AND department_id = 1;</code></pre>\n\n<p><strong>避免在列上使用函数：</strong> 在<code>WHERE</code>条件中，避免在列上使用函数，因为这可能导致索引失效，从而降低查询性能。</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">-- 不推荐\nSELECT *\nFROM products\nWHERE YEAR(sale_date) = 2023;\n\n-- 推荐\nSELECT *\nFROM products\nWHERE sale_date &gt;= '2023-01-01' AND sale_date &lt; '2024-01-01';</code></pre>\n\n<p><strong>使用索引：</strong> 确保涉及到<code>WHERE</code>条件的列上有适当的索引。索引可以加速数据检索，提高查询性能。</p>\n<p><strong>谨慎使用<code>NULL</code>：</strong> 当使用<code>NULL</code>作为条件时，要小心，因为在SQL中，与<code>NULL</code>的比较不同于与其他值的比较。使用<code>IS NULL</code>或<code>IS NOT NULL</code>来检查<code>NULL</code>值。</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">-- 不推荐\nSELECT *\nFROM employees\nWHERE manager_id = NULL;\n\n-- 推荐\nSELECT *\nFROM employees\nWHERE manager_id IS NULL;</code></pre>\n\n<p><strong>避免在索引列上使用函数：</strong> 如果在索引列上使用了函数，索引可能无法被有效利用，从而导致查询性能下降。</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">-- 不推荐\nSELECT *\nFROM products\nWHERE YEAR(sale_date) = 2023;\n\n-- 推荐\nSELECT *\nFROM products\nWHERE sale_date &gt;= '2023-01-01' AND sale_date &lt; '2024-01-01';</code></pre>\n\n<p><strong>使用合适的比较运算符：</strong> 根据具体情况选择合适的比较运算符，如<code>=</code>、<code>&lt;</code>、<code>&gt;</code>、<code>&lt;=</code>、<code>&gt;=</code>等。</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">SELECT *\nFROM products\nWHERE price &gt; 100;</code></pre>\n\n<p><strong>防止SQL注入：</strong> 使用参数化查询或预处理语句，以避免SQL注入攻击。不要直接将用户输入的值嵌入到SQL查询中。</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">-- 避免\n$user_input = \"Robert'; DROP TABLE employees;\";\n$sql = \"SELECT * FROM users WHERE username = '$user_input'\";\n\n-- 推荐\n$user_input = \"Robert'; DROP TABLE employees;\";\n$stmt = $pdo-&gt;prepare(\"SELECT * FROM users WHERE username = ?\");\n$stmt-&gt;execute([$user_input]);</code></pre>\n\n<p>这些是开发层面的注意事项，对于考试应该帮助不大。</p>\n<h1 id=\"LIKE\"><a href=\"#LIKE\" class=\"headerlink\" title=\"LIKE\"></a><code>LIKE</code></h1><p><code>LIKE</code> 关键字在 MySQL 中用于模糊匹配，通常与通配符一起使用，以便在搜索中匹配模式而不是确切的值。</p>\n<p>这是它的一般语法</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">SELECT column1, column2, ...\nFROM table_name\nWHERE column_name LIKE pattern;</code></pre>\n\n<ul>\n<li><code>column1, column2, ...</code>: 要检索的列的名称，可以是一个或多个列，也可以使用通配符 <code>*</code> 表示选择所有列。</li>\n<li><code>table_name</code>: 要检索数据的表的名称。</li>\n<li><code>column_name</code>: 要进行模糊匹配的列的名称。</li>\n<li><code>pattern</code>: 匹配模式，可以包含通配符。</li>\n</ul>\n<p>以下是一些 <code>LIKE</code> 关键字的使用示例：</p>\n<h2 id=\"用法-1\"><a href=\"#用法-1\" class=\"headerlink\" title=\"用法\"></a>用法</h2><h3 id=\"1-百分号-通配符：\"><a href=\"#1-百分号-通配符：\" class=\"headerlink\" title=\"1. 百分号 % 通配符：\"></a>1. 百分号 <code>%</code> 通配符：</h3><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">-- 以 'S' 开头的所有数据\nSELECT *\nFROM employees\nWHERE last_name LIKE 'S%';</code></pre>\n\n<p>上述查询将返回姓氏以 ‘S’ 开头的所有员工的信息。</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">-- 包含 'son' 的任何位置的数据\nSELECT *\nFROM products\nWHERE product_name LIKE '%son%';</code></pre>\n\n<p>上述查询将返回产品名称中包含 ‘son’ 的所有产品。</p>\n<p>而且结合之前讲的字符串比较，可以想想这里的匹配是否区分大小写？</p>\n<h3 id=\"2-下划线-通配符：\"><a href=\"#2-下划线-通配符：\" class=\"headerlink\" title=\"2. 下划线 _ 通配符：\"></a>2. 下划线 <code>_</code> 通配符：</h3><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">-- 第三个字母为 'i' 的所有数据\nSELECT *\nFROM customers\nWHERE last_name LIKE '__i%';</code></pre>\n\n<p>上述查询将返回姓氏中第三个字母为 ‘i’ 的所有客户的信息。</p>\n<h3 id=\"3-NOT-LIKE：\"><a href=\"#3-NOT-LIKE：\" class=\"headerlink\" title=\"3. NOT LIKE：\"></a>3. NOT LIKE：</h3><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">-- 不以 'A' 开头的所有数据\nSELECT *\nFROM employees\nWHERE last_name NOT LIKE 'A%';</code></pre>\n\n<p>上述查询将返回姓氏不以 ‘A’ 开头的所有员工的信息。</p>\n<h3 id=\"4-使用-ESCAPE：\"><a href=\"#4-使用-ESCAPE：\" class=\"headerlink\" title=\"4. 使用 ESCAPE：\"></a>4. 使用 ESCAPE：</h3><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">-- 查找包含 '%' 的数据\nSELECT *\nFROM products\nWHERE product_name LIKE '%\\%%' ESCAPE '\\';</code></pre>\n\n<p>在某些情况下，如果你需要搜索包含 <code>%</code> 字符的实际数据，你可以使用 <code>ESCAPE</code> 子句来指定一个转义字符。</p>\n<h3 id=\"5-指定多个匹配条件：\"><a href=\"#5-指定多个匹配条件：\" class=\"headerlink\" title=\"5. 指定多个匹配条件：\"></a>5. 指定多个匹配条件：</h3><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">-- 以 'S' 或 'M' 开头的数据\nSELECT *\nFROM employees\nWHERE last_name LIKE 'S%' OR last_name LIKE 'M%';</code></pre>\n\n<p>在某些情况下，你可能需要指定多个匹配条件。</p>\n<h2 id=\"注意事项-2\"><a href=\"#注意事项-2\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><p>这些也是开发层面需要注意的事情。</p>\n<p><strong>性能问题：</strong> <code>LIKE</code>语句可能会导致性能问题，尤其是在大型表上，因为它可能无法使用索引。当<code>LIKE</code>模式以通配符开头（例如，<code>%something</code>）时，索引无法有效使用。在这种情况下，可以考虑其他优化方法，例如全文搜索。</p>\n<p><strong>通配符的位置：</strong> 通配符的位置影响查询的性能。使用通配符 <code>%</code> 在模式的开头（例如，<code>%something</code>）可能导致全表扫描，而使用通配符在模式的结尾（例如，<code>something%</code>）可能能够利用索引。</p>\n<p><strong>大小写敏感性：</strong> 默认情况下，<code>LIKE</code>是大小写敏感的。如果你希望进行大小写不敏感的匹配，可以使用<code>LOWER</code>或<code>UPPER</code>函数：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">SELECT *\nFROM employees\nWHERE LOWER(last_name) LIKE 's%';</code></pre>\n\n<ol>\n<li><strong>字符集和排序规则：</strong> MySQL的<code>LIKE</code>操作是基于字符集和排序规则的。确保你了解你的数据表和数据库使用的字符集及排序规则，以免导致意外的匹配或不匹配。</li>\n<li><strong>避免在长文本上使用：</strong><code>%</code>在长文本字段上可能导致性能问题。如果只是需要检查是否包含某个子字符串，考虑使用<code>LOCATE</code>或<code>INSTR</code>等函数。</li>\n</ol>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">SELECT *\nFROM products\nWHERE LOCATE('son', product_name) &gt; 0;</code></pre>\n\n<p><strong>注意转义字符：</strong> 如果你的模式中包含通配符字符 <code>%</code> 或 <code>_</code>，并且你确实想要匹配这些字符本身，而不是它们的通配符含义，你需要使用转义字符。在MySQL中，默认的转义字符是<code>\\</code>。例如，如果要匹配包含 <code>%</code> 字符的数据，你可以使用：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">SELECT *\nFROM products\nWHERE product_name LIKE '%\\%%' ESCAPE '\\';</code></pre>\n\n<p><strong>使用全文搜索：</strong> 对于大型文本数据，全文搜索可能是更有效的选择。MySQL提供了全文搜索的功能，例如<code>MATCH ... AGAINST</code>语法。</p>\n<p><strong>避免在计算列上使用：</strong><code>%</code>在计算列上使用可能导致索引失效。如果可能，尽量在原始列上使用<code>LIKE</code>。</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">-- 不推荐\nSELECT *\nFROM employees\nWHERE CONCAT(first_name, last_name) LIKE 'John%';\n\n-- 推荐\nSELECT *\nFROM employees\nWHERE first_name LIKE 'John%';</code></pre>\n\n\n\n\n\n","text":"今天来继续复习MySQL中的SELECT语句，也是以后基本上用的最多的查询操作。 SELECT一般形式SELECT主要用于从数据库当中检索数据，这是它的一般形式。 SELECT column1, column2, ... FROM table_name WHERE conditi...","link":"","photos":[],"count_time":{"symbolsCount":"7.4k","symbolsTime":"7 mins."},"categories":[],"tags":[{"name":"笔记","slug":"笔记","count":44,"path":"api/tags/笔记.json"},{"name":"MySQL复习","slug":"MySQL复习","count":10,"path":"api/tags/MySQL复习.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#SELECT\"><span class=\"toc-text\">SELECT</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%E8%88%AC%E5%BD%A2%E5%BC%8F\"><span class=\"toc-text\">一般形式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9\"><span class=\"toc-text\">注意事项</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#DISTINCT-%E5%92%8C-ALL\"><span class=\"toc-text\">DISTINCT 和 ALL</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#DISTINCT\"><span class=\"toc-text\">DISTINCT</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#ALL\"><span class=\"toc-text\">ALL</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#AS\"><span class=\"toc-text\">AS</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E5%88%97%E5%88%AB%E5%90%8D%EF%BC%9A\"><span class=\"toc-text\">1. 列别名：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E8%A1%A8%E5%88%AB%E5%90%8D%EF%BC%9A\"><span class=\"toc-text\">2. 表别名：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-%E5%88%97%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%88%AB%E5%90%8D%EF%BC%9A\"><span class=\"toc-text\">3. 列表达式别名：</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#WHERE\"><span class=\"toc-text\">WHERE</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%94%A8%E6%B3%95\"><span class=\"toc-text\">用法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E7%AE%80%E5%8D%95%E6%9D%A1%E4%BB%B6%EF%BC%9A\"><span class=\"toc-text\">1. 简单条件：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E5%A4%9A%E4%B8%AA%E6%9D%A1%E4%BB%B6%EF%BC%9A\"><span class=\"toc-text\">2. 多个条件：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E8%8C%83%E5%9B%B4%E6%9D%A1%E4%BB%B6%EF%BC%9A\"><span class=\"toc-text\">3. 范围条件：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D%EF%BC%9A\"><span class=\"toc-text\">4. 字符串匹配：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E7%A9%BA%E5%80%BC%E6%A3%80%E6%9F%A5%EF%BC%9A\"><span class=\"toc-text\">5. 空值检查：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-IN-%E5%AD%90%E5%8F%A5%EF%BC%9A\"><span class=\"toc-text\">6. IN 子句：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-%E5%A4%8D%E6%9D%82%E6%9D%A1%E4%BB%B6%EF%BC%9A\"><span class=\"toc-text\">7. 复杂条件：</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9-1\"><span class=\"toc-text\">注意事项</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#LIKE\"><span class=\"toc-text\">LIKE</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%94%A8%E6%B3%95-1\"><span class=\"toc-text\">用法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E7%99%BE%E5%88%86%E5%8F%B7-%E9%80%9A%E9%85%8D%E7%AC%A6%EF%BC%9A\"><span class=\"toc-text\">1. 百分号 % 通配符：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E4%B8%8B%E5%88%92%E7%BA%BF-%E9%80%9A%E9%85%8D%E7%AC%A6%EF%BC%9A\"><span class=\"toc-text\">2. 下划线 _ 通配符：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-NOT-LIKE%EF%BC%9A\"><span class=\"toc-text\">3. NOT LIKE：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E4%BD%BF%E7%94%A8-ESCAPE%EF%BC%9A\"><span class=\"toc-text\">4. 使用 ESCAPE：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E6%8C%87%E5%AE%9A%E5%A4%9A%E4%B8%AA%E5%8C%B9%E9%85%8D%E6%9D%A1%E4%BB%B6%EF%BC%9A\"><span class=\"toc-text\">5. 指定多个匹配条件：</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9-2\"><span class=\"toc-text\">注意事项</span></a></li></ol></li></ol>","author":{"name":"General_K1ng","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/GeneralK1ng/My_Blog_IMG@main/img/avatar.png","link":"/","description":"一名正在努力学习计算机的菜鸟","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/BILIBILI.svg","link":"https://space.bilibili.com/32927332"},"csdn":{"icon":"/svg/csdn.svg","link":"https://blog.csdn.net/qq_34849354"},"github":{"icon":"/svg/GitHub.svg","link":"https://github.com/GeneralK1ng"},"QQ":{"icon":"/svg/QQ.svg","link":"tencent://AddContact/?fromId=45&fromSubId=1&subcmd=all&uin=2822688858"}}}},"mapped":true,"prev_post":{"title":"MySQL Review-5","uid":"383417e51810f2ed41db351deff5d8e2","slug":"MySQL-Review-5","date":"2023-12-06T06:26:47.000Z","updated":"2023-12-06T09:50:39.289Z","comments":true,"path":"api/articles/MySQL-Review-5.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/GeneralK1ng/My_Blog_IMG@main/img/MySQL-image.png","text":"继续继续，接着上一篇继续讲这个逻辑运算符。 逻辑运算符学过编程的应该都能看懂，与或非嘛。 AND（&amp;&amp;）： 逻辑与运算符，用于结合两个条件，只有当两个条件都为真时，整个条件才为真。 SELECT * FROM employees WHERE department ...","link":"","photos":[],"count_time":{"symbolsCount":"7.1k","symbolsTime":"6 mins."},"categories":[],"tags":[{"name":"笔记","slug":"笔记","count":44,"path":"api/tags/笔记.json"},{"name":"MySQL复习","slug":"MySQL复习","count":10,"path":"api/tags/MySQL复习.json"}],"author":{"name":"General_K1ng","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/GeneralK1ng/My_Blog_IMG@main/img/avatar.png","link":"/","description":"一名正在努力学习计算机的菜鸟","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/BILIBILI.svg","link":"https://space.bilibili.com/32927332"},"csdn":{"icon":"/svg/csdn.svg","link":"https://blog.csdn.net/qq_34849354"},"github":{"icon":"/svg/GitHub.svg","link":"https://github.com/GeneralK1ng"},"QQ":{"icon":"/svg/QQ.svg","link":"tencent://AddContact/?fromId=45&fromSubId=1&subcmd=all&uin=2822688858"}}}}},"next_post":{"title":"MySQL Review-3","uid":"6381f3e54a84ac6dc19cc4600b2aeb52","slug":"MySQL-Review-3","date":"2023-12-05T09:19:22.000Z","updated":"2023-12-06T09:48:20.466Z","comments":true,"path":"api/articles/MySQL-Review-3.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/GeneralK1ng/My_Blog_IMG@main/img/MySQL-image.png","text":"今天继续复习MySQL当中比较重要的一点，但是前面也已经涉及到了，就是MySQL中的约束。 但是其实前面的UNIQUE，PRIMARY之类的也算约束。 约束在关系数据库中，约束是一种用于定义和强制表中数据规则的机制。约束确保了数据的完整性、一致性和可靠性。通过使用约束，数据库管理...","link":"","photos":[],"count_time":{"symbolsCount":"8.9k","symbolsTime":"8 mins."},"categories":[],"tags":[{"name":"笔记","slug":"笔记","count":44,"path":"api/tags/笔记.json"},{"name":"MySQL复习","slug":"MySQL复习","count":10,"path":"api/tags/MySQL复习.json"}],"author":{"name":"General_K1ng","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/GeneralK1ng/My_Blog_IMG@main/img/avatar.png","link":"/","description":"一名正在努力学习计算机的菜鸟","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/BILIBILI.svg","link":"https://space.bilibili.com/32927332"},"csdn":{"icon":"/svg/csdn.svg","link":"https://blog.csdn.net/qq_34849354"},"github":{"icon":"/svg/GitHub.svg","link":"https://github.com/GeneralK1ng"},"QQ":{"icon":"/svg/QQ.svg","link":"tencent://AddContact/?fromId=45&fromSubId=1&subcmd=all&uin=2822688858"}}}}}}