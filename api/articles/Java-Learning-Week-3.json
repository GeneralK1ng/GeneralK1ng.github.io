{"title":"Java_Learning(Week 3)","uid":"40a5a3eda9f47ccd7f66db869eb2a067","slug":"Java-Learning-Week-3","date":"2023-09-25T08:09:43.000Z","updated":"2023-10-09T10:39:58.626Z","comments":true,"path":"api/articles/Java-Learning-Week-3.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/GeneralK1ng/My_Blog_IMG@main/img/codeBackground.png","content":"<h2 id=\"什么是布尔类型？\"><a href=\"#什么是布尔类型？\" class=\"headerlink\" title=\"什么是布尔类型？\"></a>什么是布尔类型？</h2><p>呃其实上周笔记应该都讲了，这周不知道为什么又提到了，那就再稍微过一下，什么是布尔类型呢？</p>\n<p><strong>boolean：</strong></p>\n<ul>\n<li><code>boolean</code>数据类型表示一位的信息；</li>\n<li>只有两个取值：<code>true</code> 和 <code>false</code>；</li>\n<li>这种类型只作为一种标志来记录 <code>true/false</code> 情况；</li>\n<li>默认值是 <strong>false</strong>；</li>\n<li>例子：boolean a = true。</li>\n</ul>\n<p>就这么些，就是一个可以记录是和否的数据类型，只需要记住默认值是<strong>false</strong>就行，这个还慢重要的。</p>\n<h2 id=\"Java当中的运算符\"><a href=\"#Java当中的运算符\" class=\"headerlink\" title=\"Java当中的运算符\"></a>Java当中的运算符</h2><h3 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h3><p>所以说讲布尔其实是为了引出几个逻辑运算符号，那方便复习和讲一些东西，我就把Java当中所有的运算符都放到这里一讲就好，刚好上面是布尔，那就先从逻辑运算开始，在此之前我们先想清楚几个逻辑运算的本质。</p>\n<p>分别是<code>与</code>，<code>或</code>，<code>非</code>，其实很简单，高中应该都学过基本的逻辑</p>\n<ul>\n<li>与就是两个都真，条件才真；</li>\n<li>或就是两个其中一个为真，条件就真；</li>\n<li>非就是将得到的真和假反转</li>\n</ul>\n<p>操作符也很简单，假如例子是A = true, B = false</p>\n<table>\n<thead>\n<tr>\n<th>操作符</th>\n<th>描述</th>\n<th>例子</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&amp;&amp;</td>\n<td>两个都真，条件才真</td>\n<td>(A &amp;&amp; B) = false</td>\n</tr>\n<tr>\n<td>||</td>\n<td>两个其中一个为真，条件就真</td>\n<td>(A || B) = true</td>\n</tr>\n<tr>\n<td>!</td>\n<td>将得到的真和假反转</td>\n<td>!A = false</td>\n</tr>\n</tbody></table>\n<p>然后就是课上提到了一个<strong>“XOR”</strong>操作，其实就是我们常说的<strong>逻辑异或</strong>，其实意思就是如果两个值不同，那么异或结果就是1（真），如果两个值相同，异或结果就是0（假）。</p>\n<p>那么我们如何只用与或非来进行异或的操作呢？</p>\n<p>这个其实不太好想，所以我们一步一步来，跟上我的思路。</p>\n<ol>\n<li><p><strong>思考定义：</strong> 逻辑异或操作返回的结果是当两个输入值不相同时为真，相同时为假，对吧？也就是说，只有一个输入为真时，结果为真。反过来说，只有一个输入为假时，结果为真。</p>\n</li>\n<li><p><strong>分析真值表：</strong> 我们把逻辑异或的真值表列出来，这有一些小麻烦，但是很值得这么干</p>\n<table>\n<thead>\n<tr>\n<th>A</th>\n<th>B</th>\n<th>A XOR B</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>0</td>\n<td>1</td>\n<td>1</td>\n</tr>\n<tr>\n<td>1</td>\n<td>0</td>\n<td>1</td>\n</tr>\n<tr>\n<td>1</td>\n<td>1</td>\n<td>0</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>这里其实就比较直观了，我们已经知道了返回条件是只有一个为真的时候结果真，所以我们可以使用逻辑与运算符 <code>&amp;&amp;</code> 来检查两个输入是否不同时为真。例如， <code>(A &amp;&amp; !B)</code> 表示 A 为真且 B 不为真。</p>\n</li>\n<li><p>然后，我们再考虑另一个条件： <code>(B &amp;&amp; !A)</code> 表示 B 为真且 A 不为真，这也符合逻辑异或的条件之一。</p>\n</li>\n<li><p>最后，我们可以使用逻辑或运算符 <code>||</code> 来将这两个条件组合起来：<code>(A &amp;&amp; !B) || (B &amp;&amp; !A)</code>。</p>\n</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class xor {\n    public static void main(String[] args) {\n        boolean a = false;\n        boolean b = true;\n\n        System.out.println((!a &amp;&amp; b) || ( a &amp;&amp; !b));\n    }\n}</code></pre>\n\n<p>其实我们也可以按照检查只有一个输入为假时，结果为真来实现，本质上是一样的。</p>\n<h3 id=\"关系运算符\"><a href=\"#关系运算符\" class=\"headerlink\" title=\"关系运算符\"></a>关系运算符</h3><p>Java当中的关系运算符，这个更简单，说白了就是小学学的大于小于号，这些来实现一些条件判断，直接把表格列在这里，自己看看：</p>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>描述</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>==</td>\n<td>等于（相等）</td>\n<td>5 == 5 结果为 true</td>\n</tr>\n<tr>\n<td>!=</td>\n<td>不等于</td>\n<td>5 != 3 结果为 true</td>\n</tr>\n<tr>\n<td>&gt;</td>\n<td>大于</td>\n<td>7 &gt; 4 结果为 true</td>\n</tr>\n<tr>\n<td>&lt;</td>\n<td>小于</td>\n<td>3 &lt; 6 结果为 true</td>\n</tr>\n<tr>\n<td>&gt;=</td>\n<td>大于等于</td>\n<td>4 &gt;= 4 结果为 true</td>\n</tr>\n<tr>\n<td>&lt;=</td>\n<td>小于等于</td>\n<td>2 &lt;= 5 结果为 true</td>\n</tr>\n</tbody></table>\n<p>对吧，自己打开IDE自己输着玩，玩着玩着就知道这些是什么了。</p>\n<h3 id=\"算术运算符\"><a href=\"#算术运算符\" class=\"headerlink\" title=\"算术运算符\"></a>算术运算符</h3><p>这个过于简单，但是为了笔记完整性，我也只是列出表格</p>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>描述</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>+</td>\n<td>加法</td>\n<td>5 + 3 结果为 8</td>\n</tr>\n<tr>\n<td>-</td>\n<td>减法</td>\n<td>7 - 4 结果为 3</td>\n</tr>\n<tr>\n<td>*</td>\n<td>乘法</td>\n<td>2 * 6 结果为 12</td>\n</tr>\n<tr>\n<td>/</td>\n<td>除法</td>\n<td>10 / 2 结果为 5</td>\n</tr>\n<tr>\n<td>%</td>\n<td>取模（取余数）</td>\n<td>10 % 3 结果为 1</td>\n</tr>\n</tbody></table>\n<p>提一嘴，整型的除法和浮点数的除法还是有细微区别的，注意一下。</p>\n<p>然后就是还有自增和自减的操作，这里也列出来</p>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>描述</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>++</td>\n<td>自增，相当于a = a + 1</td>\n<td>见下文</td>\n</tr>\n<tr>\n<td>–</td>\n<td>自减，相当于a = a - 1</td>\n<td>见下文</td>\n</tr>\n</tbody></table>\n<p>这里牵扯到了一个<strong>前缀自增自减</strong>和<strong>后缀自增自减</strong>的区别，那么有什么区别呢？</p>\n<ul>\n<li><p><strong>前缀自增和前缀自减</strong>：前缀自增和前缀自减在变量之前执行增加或减少操作，然后返回变量的新值。在前缀运算中，<strong>操作先执行，然后返回值</strong>。</p>\n</li>\n<li><p><strong>后缀自增和后缀自减</strong>：后缀自增和后缀自减在变量之后执行增加或减少操作，然后返回变量的旧值。在后缀运算中，<strong>先返回值，然后再执行操作</strong>。</p>\n</li>\n</ul>\n<p>说实话大部分情况下两者好像没什么区别，但是其实还是有一些细微的区别的，那就是谁先赋值，谁先自增自减，我写一个例子代码：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class PrefixPostfixExample {\n    public static void main(String[] args) {\n        int x = 5;\n        int y = 5; //定义变量\n\n        // 前缀自增示例\n        System.out.println(\"前缀自增示例:\");\n        System.out.println(\"x 的初始值：\" + x); // 输出 5\n        int prefixIncrementResultX = ++x; // 前缀自增\n        System.out.println(\"前缀自增后 x 的值：\" + x); // 输出 6\n        System.out.println(\"前缀自增的结果：\" + prefixIncrementResultX); // 输出 6\n\n        // 后缀自增示例\n        System.out.println(\"\\n后缀自增示例:\");\n        System.out.println(\"y 的初始值：\" + y); // 输出 5\n        int postfixIncrementResultY = y++; // 后缀自增\n        System.out.println(\"后缀自增后 y 的值：\" + y); // 输出 6\n        System.out.println(\"后缀自增的结果：\" + postfixIncrementResultY); // 输出 5\n    }\n}</code></pre>\n\n<p>最后输出如下：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">前缀自增示例:\nx 的初始值：5\n前缀自增后 x 的值：6\n前缀自增的结果：6\n\n后缀自增示例:\ny 的初始值：5\n后缀自增后 y 的值：6\n后缀自增的结果：5</code></pre>\n\n<p>发现区别了吗，前缀自增返回的结果是<code>6</code>，而后缀自增的结果返回的却是<code>5</code>。</p>\n<ul>\n<li>原因就是前缀自增是先进行自增操作，然后再返回值给<code>prefixIncrementResultX</code>这个变量，最后输出就是已经自增过的值。</li>\n<li>然而后缀自增是先进行赋值，也就是先把<code>y = 5</code>这个值赋值给了<code>prefixIncrementResultY</code>，也就是说此时这个变量记录的是<code>5</code>，然后<code>y</code>在此时才进行了自增操作，所以输出结果<code>y = 6</code>但是<code>prefixIncrementResultY</code>还等于<code>5</code>，因为实际上<code>y</code>在自增后还没有赋值。</li>\n</ul>\n<p>有点绕，但是建议仔细思考，因为我已经用的是最简单的话把这个点讲清楚辣。</p>\n<h3 id=\"位运算符\"><a href=\"#位运算符\" class=\"headerlink\" title=\"位运算符\"></a>位运算符</h3><p>这个就更抽象了，但是其实就是二进制层面的一些运算操作，后面除非是考试或者一些比较特殊的算法题目和性能优化问题，不然其实一般很少会涉及到这里，我就列出来：</p>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>描述</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&amp;</td>\n<td>按位与（AND）</td>\n<td>5 &amp; 3 结果为 1</td>\n</tr>\n<tr>\n<td>|</td>\n<td>按位或（OR）</td>\n<td>5 | 3 结果为 7</td>\n</tr>\n<tr>\n<td>^</td>\n<td>按位异或（XOR）</td>\n<td>5 ^ 3 结果为 6</td>\n</tr>\n<tr>\n<td>~</td>\n<td>按位取反（NOT）</td>\n<td>~5 结果为 -6</td>\n</tr>\n<tr>\n<td>&lt;&lt;</td>\n<td>左移位</td>\n<td>5 &lt;&lt; 2 结果为 20</td>\n</tr>\n<tr>\n<td>&gt;&gt;</td>\n<td>右移位（带符号）</td>\n<td>10 &gt;&gt; 1 结果为 5</td>\n</tr>\n<tr>\n<td>&gt;&gt;&gt;</td>\n<td>无符号右移位</td>\n<td>-10 &gt;&gt;&gt; 1 结果为 2147483643</td>\n</tr>\n</tbody></table>\n<p>为了方便说明，我还是写个代码来举例子</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class bitwiseOperator {\n    public static void main(String[] args) {\n        int a = 5;   // 二进制表示为 0101\n        int b = 3;   // 二进制表示为 0011\n\n        int bitwiseAnd = a &amp; b;      // 按位与，结果为 1 (0001)\n        int bitwiseOr = a | b;       // 按位或，结果为 7 (0111)\n        int bitwiseXor = a ^ b;      // 按位异或，结果为 6 (0110)\n        int bitwiseNot = ~a;         // 按位取反，结果为 -6 (11111111111111111111111111111010)\n        int leftShift = a &lt;&lt; 2;      // 左移位，结果为 20 (10100)\n        int rightShift = 10 &gt;&gt; 1;    // 右移位，结果为 5 (0000 0101)\n        int unsignedRightShift = -10 &gt;&gt;&gt; 1; // 无符号右移位，结果为 2147483643 (0111 1111 1111 1111 1111 1111 1111 1011)\n\n\n        System.out.println(bitwiseAnd);\n        System.out.println(bitwiseOr);\n        System.out.println(bitwiseXor);\n        System.out.println(bitwiseNot);\n        System.out.println(leftShift);\n        System.out.println(rightShift);\n        System.out.println(unsignedRightShift);\n    }\n}</code></pre>\n\n<p>怎么说呢，你看第一个位与运算<code>a &amp; b</code>，就是在二进制层面对<code>5</code>和<code>3</code>每一位进行与运算，只有都是<code>1</code>才能返回<code>1</code>，反之返回的都是<code>0</code>，所以运算后得到的结果是<code>0001</code>也就是十进制的<code>1</code>，懂了吧，下面的位或啊，位异或啊都是这个道理。</p>\n<p>然后就是取反(<code>~</code>)，”取反” 是一种位运算操作，也称为按位取反或位取反。它用于翻转二进制数的每个位，将<code>0</code>变为<code>1</code>，将<code>1</code>变为<code>0</code>。具体来说，如果一个二进制位的值为<code>0</code>，那么在取反操作后，它的值将变为<code>1</code>；如果一个二进制位的值为<code>1</code>，那么在取反操作后，它的值将变为<code>0</code>。所以说你就可以看见<code>5</code>取反后得到了<code>-6</code>，那么为什么是<code>-6</code>捏，其实因为二进制表达数字最外面的一个<code>0</code>和<code>1</code>是表达正负号的，hh，底层的一些知识其实不用知道也行。</p>\n<p>移位顾名思义就是二进制数向左/右移动指定数量的位，同时在低位补零。<strong>左移n位相当于将原始数乘以2的n次方</strong>。例如，将整数<code>5</code>左移<code>2</code>位就得到了<code>20</code>。</p>\n<p>然后无符号右移位就是无符号右移不保留符号位，总是在高位补零。没有无符号左移位，但是可以通过一些方式达到类似的效果，但是没必要知道，起码现在没必要。</p>\n<p>这一块没搞懂无所谓，感觉考试也应该不会闲着没事考这里。。。</p>\n<h3 id=\"赋值运算符\"><a href=\"#赋值运算符\" class=\"headerlink\" title=\"赋值运算符\"></a>赋值运算符</h3><p>写到这里我快累死了，赋值运算符，就是先运算，然后再赋值，先列表我再看看有没有什么需要强调的：</p>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>描述</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>=</td>\n<td>赋值</td>\n<td>int x = 5;</td>\n</tr>\n<tr>\n<td>+=</td>\n<td>加后赋值（加法赋值）</td>\n<td>x += 3; // 相当于 x = x + 3;</td>\n</tr>\n<tr>\n<td>-=</td>\n<td>减后赋值（减法赋值）</td>\n<td>x -= 2; // 相当于 x = x - 2;</td>\n</tr>\n<tr>\n<td>*=</td>\n<td>乘后赋值（乘法赋值）</td>\n<td>x *= 4; // 相当于 x = x * 4;</td>\n</tr>\n<tr>\n<td>/=</td>\n<td>除后赋值（除法赋值）</td>\n<td>x /= 2; // 相当于 x = x / 2;</td>\n</tr>\n<tr>\n<td>%=</td>\n<td>取模后赋值（取余数赋值）</td>\n<td>x %= 3; // 相当于 x = x % 3;</td>\n</tr>\n<tr>\n<td>&lt;&lt;=</td>\n<td>左移位后赋值</td>\n<td>x &lt;&lt;= 2; // 相当于 x = x &lt;&lt; 2;</td>\n</tr>\n<tr>\n<td>&gt;&gt;=</td>\n<td>右移位后赋值（带符号）</td>\n<td>x &gt;&gt;= 1; // 相当于 x = x &gt;&gt; 1;</td>\n</tr>\n<tr>\n<td>&gt;&gt;&gt;=</td>\n<td>无符号右移位后赋值</td>\n<td>x &gt;&gt;&gt;= 1; // 相当于 x = x &gt;&gt;&gt; 1;</td>\n</tr>\n<tr>\n<td>&amp;=</td>\n<td>按位与后赋值</td>\n<td>x &amp;= 3; // 相当于 x = x &amp; 3;</td>\n</tr>\n<tr>\n<td>|=</td>\n<td>按位或后赋值</td>\n<td>x |= 6; // 相当于 x = x | 6;</td>\n</tr>\n<tr>\n<td>^=</td>\n<td>按位异或后赋值</td>\n<td>x ^= 5; // 相当于 x = x ^ 5;</td>\n</tr>\n</tbody></table>\n<p>好像真没什么说的吧，比如<code>x += 3</code>就相当于<code>x = x + 3</code>，其他的同理，自己慢慢看，实在不行最好自己打开IDE自己打一遍就回了。</p>\n<h3 id=\"条件运算符（三元运算符）\"><a href=\"#条件运算符（三元运算符）\" class=\"headerlink\" title=\"条件运算符（三元运算符）\"></a>条件运算符（三元运算符）</h3><p>这个有点意思，但是也很简单，和if-else语句有点像，我先写出来，这个表达方式如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">condition ? expression1 : expression2</code></pre>\n\n<p>其中，<code>condition</code> 是一个布尔表达式，如果为true，则表达式的值为 <code>expression1</code>，否则为 <code>expression2</code>。这种运算符允许你根据条件的真假选择不同的值。</p>\n<p>举个例子吧！</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">int age = 20;\nString status = (age &gt;= 18) ? \"成年人\" : \"未成年人\";\n\nSystem.out.println(\"年龄状态：\" + status); // 输出 \"成年人\"\n</code></pre>\n\n<p>就像代码说的，我先定义我20岁，然后三元运算符开始，判断是否大于18岁，如果大于就返回成年人，小于就返回未成年人。</p>\n<p>但是这一般只用于简单的条件判断，后面会讲它和if语句的一些区别。</p>\n<p>后面其实还有<strong>instanceof运算符</strong>，但是这里我不准备写，因为这在后面才会涉及，而且我们还没有认识什么是对象，什么是类，现在写了只会让人更晕。</p>\n<h2 id=\"条件语句\"><a href=\"#条件语句\" class=\"headerlink\" title=\"条件语句\"></a>条件语句</h2><p>这一部分很符合直观，而且很易于理解，并且课上讲的也很明白步骤很清楚。所以我就来稍微写一下。</p>\n<p>执行逻辑非常的清晰易懂，执行顺序是从上到下，一旦满足条件，就执行相应的代码块，并且在执行完一个代码块后，程序会继续执行条件语句之后的代码。在使用条件语句时，要特别注意条件的逻辑和顺序，以确保程序按照预期方式执行。</p>\n<p>然后就是条件语句是<strong>顺序结构</strong>。</p>\n<h3 id=\"if语句\"><a href=\"#if语句\" class=\"headerlink\" title=\"if语句\"></a>if语句</h3><p><code>if</code>语句用于在条件满足时执行一段代码块。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/GeneralK1ng/My_Blog_IMG@main/img/if-statement.png\"></p>\n<p><strong>语法格式：</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">if (条件表达式) {\n    // 在条件为真时执行的代码块\n}</code></pre>\n\n<p><strong>示例：</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">int x = 10;\nif (x &gt; 2) {\n    System.out.println(\"x大于5\");\n}</code></pre>\n\n<h3 id=\"else-if语句\"><a href=\"#else-if语句\" class=\"headerlink\" title=\"else-if语句\"></a>else-if语句</h3><p><code>else if</code>语句用于在多个条件之间进行选择，只有一个条件满足时会执行相应的代码块。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/GeneralK1ng/My_Blog_IMG@main/img/if-else-statement.png\"></p>\n<p><strong>语法格式：</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">if (条件表达式1) {\n    // 在条件1为真时执行的代码块\n} else if (条件表达式2) {\n    // 在条件2为真时执行的代码块\n} else {\n    // 所有条件都不满足时执行的代码块\n}</code></pre>\n\n<p><strong>示例：</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">int x = 10;\nif (x &gt; 10) {\n    System.out.println(\"x大于10\");\n} else if (x == 10) {\n    System.out.println(\"x等于10\");\n} else {\n    System.out.println(\"x小于10\");\n}</code></pre>\n\n<p>这里有几个注意的点，使用 if，else if，else 语句的时候：</p>\n<ul>\n<li><code>if</code> 最多只能有 1 个 <code>else</code> ，<code>else</code> 必须在所有的 <code>else if</code> 之后。</li>\n<li><code>if</code> 可以有很多个 <code>else if</code>，它们必须在<code> else</code> 之前。</li>\n<li>一旦其中有一个 <code>else if</code> 为 <code>true</code>，其他的 <code>else if</code> 以及 <code>else</code> 都将跳过执行。</li>\n</ul>\n<h3 id=\"else语句\"><a href=\"#else语句\" class=\"headerlink\" title=\"else语句\"></a>else语句</h3><p><code>else</code>语句用于在前面的条件都不满足时执行一段默认的代码块。</p>\n<p><strong>语法格式：</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">if (条件表达式) {\n    // 在条件为真时执行的代码块\n} else {\n    // 在条件为假时执行的代码块\n}</code></pre>\n\n<p><strong>示例：</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">int x = 5;\nif (x &gt; 10) {\n    System.out.println(\"x大于10\");\n} else {\n    System.out.println(\"x不大于10\");\n}</code></pre>\n\n<h3 id=\"嵌套\"><a href=\"#嵌套\" class=\"headerlink\" title=\"嵌套\"></a>嵌套</h3><p>然后就是注意一下条件语句的嵌套在Java当中是合法的，这意味着你可以在一个条件语句的代码块内包含另一个条件语句，以实现更复杂的条件逻辑。嵌套条件语句允许你根据多个条件的组合来进行更精细的控制程序流程。</p>\n<p>以下是一个示例，展示了如何嵌套条件语句：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">int x = 10;\nint y = 5;\n\nif (x &gt; 5) {\n    System.out.println(\"x大于5\");\n    \n    if (y &gt; 3) {\n        System.out.println(\"y大于3\");\n    } else {\n        System.out.println(\"y不大于3\");\n    }\n} else {\n    System.out.println(\"x不大于5\");\n}</code></pre>\n\n<p>可以试着画一下这个的流程图，感受一下条件语句的嵌套。</p>\n<h3 id=\"三元运算符和if-else语句的区别\"><a href=\"#三元运算符和if-else语句的区别\" class=\"headerlink\" title=\"三元运算符和if-else语句的区别\"></a>三元运算符和if-else语句的区别</h3><p>还记的三元运算符吧，不记得就往上翻，然后再下来。</p>\n<p>区别就是：</p>\n<ul>\n<li><strong>三元运算符</strong>通常用于简单的条件判断，当条件为真时返回一个值，否则返回另一个值。它适用于将条件表达式的结果分配给一个变量，或者在一个表达式中根据条件返回不同的值。</li>\n<li><strong>if-else语句</strong>用于更复杂的条件逻辑，它可以包含多个条件分支，并且可以执行多个不同的代码块，每个代码块可以包含多个语句。if-else语句通常用于根据不同的条件执行不同的操作。</li>\n</ul>\n<p>当然这么说可能不太能理解，就是三元运算符适合在简单情况下使用，处理的都是一些非常简单的判断，if可以实现更加负责的代码块，而且在实际开发中肯定是if语句用的更多，因为代码可读性更强，更容易理解，更方便维护。</p>\n<h2 id=\"循环结构\"><a href=\"#循环结构\" class=\"headerlink\" title=\"循环结构\"></a>循环结构</h2><p>写到这里我快吐了，东西真的多我去，下午才上的课，我现在正在敲笔记O(∩_∩)O呵呵~。</p>\n<p>程序语句的执行可以分为不同的结构，其中之一是<strong>顺序结构</strong>，它表示代码会按照书写的顺序一次执行一次。</p>\n<p>然而，有时候我们需要让一组操作重复执行多次，这就需要用到<strong>循环结构</strong>了。</p>\n<p>在Java中，有三种主要的循环结构可供选择，每种都在不同的情况下有其优势和用途：</p>\n<ol>\n<li><strong>while 循环</strong>：这是一种最基本的循环结构，它在开始执行之前检查一个条件，只有条件为真时才会执行循环体。这使得它非常适合处理需要反复执行，但不确定执行次数的情况。</li>\n<li><strong>do…while 循环</strong>：与while循环类似，但不同之处在于它首先执行循环体，然后再检查条件。这确保循环体至少会被执行一次，即使条件一开始就为假。</li>\n<li><strong>for 循环</strong>：这是一种更为复杂但强大的循环结构，通常用于需要在已知次数的情况下执行一组语句。它具有明确的初始化、条件和迭代部分，使得循环的控制非常精确。</li>\n</ol>\n<p>当然，在Java 5中引入了一种增强型for循环，这个目前我们还不需要了解，因为这个主要是用来遍历数组和集合元素。简化了循环过程，不再需要显式控制循环索引，而是直接迭代数组或集合的元素。</p>\n<h3 id=\"while循环\"><a href=\"#while循环\" class=\"headerlink\" title=\"while循环\"></a>while循环</h3><p><strong>while 循环</strong>是Java中最基本的循环结构之一。它允许重复执行一组语句，只要指定的条件为真（true）时，循环会一直执行。当条件不再为真时，循环停止执行，程序继续执行下一个语句。</p>\n<p><strong>语法：</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">while (条件) {\n    // 循环体\n}</code></pre>\n\n<ul>\n<li><strong>条件</strong>：这是一个布尔表达式（boolean expression），当条件为true时，循环体会被执行。如果条件一开始就为false，循环体将不会被执行，而是直接跳过循环。</li>\n<li><strong>循环体</strong>：这是需要重复执行的一组Java语句。它们位于大括号 <code>{}</code> 内，可以包含一个或多个语句。循环体中的语句会重复执行，直到条件为false。</li>\n</ul>\n<p><strong>执行流程</strong>：</p>\n<ol>\n<li>首先，计算条件的值。</li>\n<li>如果条件为真，执行循环体内的代码。</li>\n<li>执行完循环体后，再次计算条件的值。</li>\n<li>如果条件仍然为真，继续执行循环体。</li>\n<li>这个过程将一直重复，直到条件为假为止。</li>\n<li>一旦条件为假，程序将继续执行while循环后面的语句或代码块。</li>\n</ol>\n<p><strong>示例：</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">int i = 1;\nwhile (i &lt;= 5) {\n    System.out.println(\"当前数字是：\" + i);\n    i++; // 注意这里要更新条件，不然就会形成无限循环\n}</code></pre>\n\n<p>上述示例中，循环会从1一直执行到5。首先，条件 <code>i &lt;= 5</code> 被检查，因为1小于等于5，所以循环体内的代码会被执行。然后，<code>i</code> 的值递增，条件再次检查，这个过程一直重复，直到 <code>i</code> 的值变成6时，条件变为false，循环停止。</p>\n<p><strong>注意事项</strong>：</p>\n<ol>\n<li>在while循环中，一定要确保在某个点上条件会变为false，否则可能导致无限循环。</li>\n<li>为了避免无限循环，通常在循环体内需要更新循环条件，确保最终条件变为false。</li>\n<li>如果条件一开始就为false，循环体将不会被执行，这可能会导致循环完全被跳过。</li>\n</ol>\n<h3 id=\"do…while循环\"><a href=\"#do…while循环\" class=\"headerlink\" title=\"do…while循环\"></a>do…while循环</h3><p>万恶之源，我的建议是千万别碰这个玩意，我到现在都没搞清楚这个的执行逻辑，并且这玩意是真的难用，开发当中除非找事一般没人会用这个玩意，但是毕竟是学校，要考试的辣，而且谁知道会不会考一些八股文知识，所以笔记还是要有的。</p>\n<p><strong>do…while 循环</strong> 是Java中的另一种循环结构，和while循环很像，但有一个重要的区别：它首先执行循环体，然后再检查条件。这意味着无论条件是否为真，循环体至少会被执行一次。懂了吗，反正我没懂o(<em>￣︶￣</em>)o。</p>\n<p><strong>语法</strong>：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">do {\n    // 循环体\n} while (条件);</code></pre>\n\n<p><strong>执行流程</strong>：</p>\n<ol>\n<li>首先，执行循环体内的代码。</li>\n<li>执行完循环体后，计算条件的值。</li>\n<li>如果条件为真，继续执行循环体。</li>\n<li>这个过程将一直重复，直到条件为false。</li>\n<li>一旦条件为假，程序将继续执行do…while循环后面的语句或代码块。</li>\n</ol>\n<p><strong>示例</strong>：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">int i = 1;\ndo {\n    System.out.println(\"当前数字是：\" + i);\n    i++; \n} while (i &lt;= 5);\n</code></pre>\n\n<p>上述示例中，无论如何，循环体都会执行一次。然后，条件 <code>i &lt;= 5</code> 被检查，如果条件为真，循环体将再次执行，这个过程将一直重复，直到 <code>i</code> 的值变成6时，条件变为false，循环停止。</p>\n<p><strong>注意事项</strong>：</p>\n<ol>\n<li>与while循环不同，do…while循环保证循环体至少会执行一次。</li>\n<li>为了避免无限循环，通常在循环体内需要更新循环条件，确保最终条件变为false。</li>\n<li>如果条件一开始就为false，循环体将至少被执行一次，然后停止执行。</li>\n</ol>\n<p>我还是要强调，没事我的建议是<strong>别用</strong>！</p>\n<h3 id=\"for循环\"><a href=\"#for循环\" class=\"headerlink\" title=\"for循环\"></a>for循环</h3><p>基本上可以说是大伙最爱的循环结构了，后面也是大伙用得基本上最多的循环体了。</p>\n<p><strong>for 循环</strong> 是Java中一种非常强大的循环结构，通常用于需要在已知次数下执行一组语句的情况。for循环具有严格的控制结构，包括初始化、条件和迭代部分，使得它非常适合对循环进行精确控制。</p>\n<p><strong>语法</strong>：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">for (初始化; 条件; 迭代) {\n    // 循环体\n}</code></pre>\n\n<ul>\n<li><strong>初始化</strong>：这是一个在循环开始之前执行的表达式。通常用于初始化循环控制变量，它只会在循环开始时执行一次。</li>\n<li><strong>条件</strong>：这是一个布尔表达式（boolean expression），它在每次循环迭代之前都会被检查。只有在条件为true时，循环体才会被执行。如果条件一开始就为false，循循环体将不会被执行。</li>\n<li><strong>迭代</strong>：这是在每次循环迭代之后执行的表达式。通常用于更新循环控制变量的值。</li>\n<li><strong>循环体</strong>：这是需要重复执行的一组Java语句，位于花括号 <code>{}</code> 内，可以包含一个或多个语句。</li>\n</ul>\n<p><strong>执行流程</strong>：</p>\n<ol>\n<li>首先，执行初始化部分，通常用于初始化循环计数器。</li>\n<li>然后，计算条件的值。如果条件为true，继续执行循环体。</li>\n<li>执行循环体内的代码。</li>\n<li>执行完循环体后，执行迭代部分，通常用于更新循环计数器。</li>\n<li>再次计算条件的值。</li>\n<li>如果条件仍然为true，继续执行循环体，然后重复以上步骤，直到条件为false。</li>\n<li>一旦条件为假，程序将继续执行for循环后面的语句或代码块。</li>\n</ol>\n<p><strong>示例</strong>：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">for (int i = 1; i &lt;= 5; i++) {\n    System.out.println(\"当前数字是：\" + i);\n}</code></pre>\n\n<p>在上述示例中，初始化部分初始化了一个计数器变量 <code>i</code>，条件部分检查 <code>i</code> 是否小于等于5，迭代部分每次增加 <code>i</code> 的值。循环体内的代码会重复执行，直到 <code>i</code> 的值变成6，条件变为false，循环停止。</p>\n<p><strong>注意事项</strong>：</p>\n<ol>\n<li>for循环通常用于已知循环次数的情况，因为它提供了精确的控制。</li>\n<li>循环变量（例如，上述示例中的 <code>i</code>）通常在循环内部定义，这意味着它的作用范围仅限于循环体内。</li>\n<li>初始化、条件和迭代部分都可以包含多个表达式，它们以逗号分隔。</li>\n<li>for循环可以嵌套，即在一个for循环内包含另一个for循环。</li>\n</ol>\n<p>虽然说它很好用，非常的方便，条件也很严格，但是我要说的是，当年听从一位前辈说的，本质上所有的循环都是while循环，所以for循环完全可以写成while循环的格式，并且更加的简洁，方便看，他建议我养成习惯以后只写while循环，当然了，这个看个人习惯。</p>\n<h3 id=\"for循环和while循环的区别\"><a href=\"#for循环和while循环的区别\" class=\"headerlink\" title=\"for循环和while循环的区别\"></a>for循环和while循环的区别</h3><p>不得不提到一个老生常谈的话题了，for循环和while训话有什么区别，用最简单的话来说</p>\n<ul>\n<li>for循环更适合在已知循环次数的情况下使用</li>\n<li>while循环则更适合在循环次数不确定的情况下使用</li>\n</ul>\n<p>这里这例子我一时半会儿还真举不出来，但是，嘿嘿学到循环和条件了这题还会少吗？等Exercise出来的时候再讲吧。</p>\n","text":"什么是布尔类型？呃其实上周笔记应该都讲了，这周不知道为什么又提到了，那就再稍微过一下，什么是布尔类型呢？ boolean： boolean数据类型表示一位的信息； 只有两个取值：true 和 false； 这种类型只作为一种标志来记录 true/false 情况； 默认值是 fa...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[],"tags":[{"name":"笔记","slug":"笔记","count":46,"path":"api/tags/笔记.json"},{"name":"Java初学","slug":"Java初学","count":10,"path":"api/tags/Java初学.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AF%E5%B8%83%E5%B0%94%E7%B1%BB%E5%9E%8B%EF%BC%9F\"><span class=\"toc-text\">什么是布尔类型？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Java%E5%BD%93%E4%B8%AD%E7%9A%84%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">Java当中的运算符</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">逻辑运算符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%B3%E7%B3%BB%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">关系运算符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">算术运算符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">位运算符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%B5%8B%E5%80%BC%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">赋值运算符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9D%A1%E4%BB%B6%E8%BF%90%E7%AE%97%E7%AC%A6%EF%BC%88%E4%B8%89%E5%85%83%E8%BF%90%E7%AE%97%E7%AC%A6%EF%BC%89\"><span class=\"toc-text\">条件运算符（三元运算符）</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">条件语句</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#if%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">if语句</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#else-if%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">else-if语句</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#else%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">else语句</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B5%8C%E5%A5%97\"><span class=\"toc-text\">嵌套</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%89%E5%85%83%E8%BF%90%E7%AE%97%E7%AC%A6%E5%92%8Cif-else%E8%AF%AD%E5%8F%A5%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">三元运算符和if-else语句的区别</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">循环结构</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#while%E5%BE%AA%E7%8E%AF\"><span class=\"toc-text\">while循环</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#do%E2%80%A6while%E5%BE%AA%E7%8E%AF\"><span class=\"toc-text\">do…while循环</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#for%E5%BE%AA%E7%8E%AF\"><span class=\"toc-text\">for循环</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#for%E5%BE%AA%E7%8E%AF%E5%92%8Cwhile%E5%BE%AA%E7%8E%AF%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">for循环和while循环的区别</span></a></li></ol></li></ol>","author":{"name":"General_K1ng","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/GeneralK1ng/My_Blog_IMG@main/img/avatar.png","link":"/","description":"一名正在努力学习计算机的菜鸟","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/BILIBILI.svg","link":"https://space.bilibili.com/32927332"},"csdn":{"icon":"/svg/csdn.svg","link":"https://blog.csdn.net/qq_34849354"},"github":{"icon":"/svg/GitHub.svg","link":"https://github.com/GeneralK1ng"},"QQ":{"icon":"/svg/QQ.svg","link":"tencent://AddContact/?fromId=45&fromSubId=1&subcmd=all&uin=2822688858"}}}},"mapped":true,"prev_post":{"title":"Java_Exercise(Week3)","uid":"db575aff8a359d17ed235c7bc3cb6733","slug":"Java-Exercise-Week3","date":"2023-09-29T16:54:42.000Z","updated":"2023-09-30T14:31:05.983Z","comments":true,"path":"api/articles/Java-Exercise-Week3.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/GeneralK1ng/My_Blog_IMG@main/img/codeBackground.png","text":"这周开始就进入到了条件语句和循环语句了，那么随之而来的就是一些简单的算法题目了，当然对于刚开始接触的人来说还是有些困难的，但是不急，只要把每一步想明白，其实没什么难的，重点在于思路，为什么要用if，为什么要用循环，为什么这个循环是for循环，那个要用while循环，怎么说呢，一定...","link":"","photos":[],"count_time":{"symbolsCount":"16k","symbolsTime":"15 mins."},"categories":[],"tags":[{"name":"笔记","slug":"笔记","count":46,"path":"api/tags/笔记.json"},{"name":"Java初学","slug":"Java初学","count":10,"path":"api/tags/Java初学.json"}],"author":{"name":"General_K1ng","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/GeneralK1ng/My_Blog_IMG@main/img/avatar.png","link":"/","description":"一名正在努力学习计算机的菜鸟","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/BILIBILI.svg","link":"https://space.bilibili.com/32927332"},"csdn":{"icon":"/svg/csdn.svg","link":"https://blog.csdn.net/qq_34849354"},"github":{"icon":"/svg/GitHub.svg","link":"https://github.com/GeneralK1ng"},"QQ":{"icon":"/svg/QQ.svg","link":"tencent://AddContact/?fromId=45&fromSubId=1&subcmd=all&uin=2822688858"}}}}},"next_post":{"title":"Java_Exercise(Week 2)","uid":"359c9a1a9e0f8b70b5c766d3c5f40981","slug":"Java-Exercise-Week2","date":"2023-09-22T08:43:31.000Z","updated":"2023-09-22T11:51:55.389Z","comments":true,"path":"api/articles/Java-Exercise-Week2.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/GeneralK1ng/My_Blog_IMG@main/img/codeBackground.png","text":"Exercise #2.1 What day is it?编写一个 Java 程序，将日期作为输入，并打印出该日期所在星期的哪一天。 程序应使用三个整数：y（年）、m（月）和 d（日）。对于 m，1 月用 1，2 月用 2，以此类推。对于输出，周日打印 0，周一打印 1，周二打印...","link":"","photos":[],"count_time":{"symbolsCount":"6.2k","symbolsTime":"6 mins."},"categories":[],"tags":[{"name":"笔记","slug":"笔记","count":46,"path":"api/tags/笔记.json"},{"name":"Java初学","slug":"Java初学","count":10,"path":"api/tags/Java初学.json"}],"author":{"name":"General_K1ng","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/GeneralK1ng/My_Blog_IMG@main/img/avatar.png","link":"/","description":"一名正在努力学习计算机的菜鸟","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/BILIBILI.svg","link":"https://space.bilibili.com/32927332"},"csdn":{"icon":"/svg/csdn.svg","link":"https://blog.csdn.net/qq_34849354"},"github":{"icon":"/svg/GitHub.svg","link":"https://github.com/GeneralK1ng"},"QQ":{"icon":"/svg/QQ.svg","link":"tencent://AddContact/?fromId=45&fromSubId=1&subcmd=all&uin=2822688858"}}}}}}