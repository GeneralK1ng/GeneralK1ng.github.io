{"title":"CPT101 Review-2","uid":"e585c831fab448b304cde81e18fc31a2","slug":"CPT101-Review-2","date":"2023-12-08T10:02:43.000Z","updated":"2023-12-09T07:55:07.506Z","comments":true,"path":"api/articles/CPT101-Review-2.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/GeneralK1ng/My_Blog_IMG@main/img/CPT101-img.png","content":"<p>期末考试，细算留一个月用来复习好像是真的有点紧了，甚至现在都不只一个月。</p>\n<p>101就按部就班，下周需要复习107，101就跟着感觉走算了。</p>\n<h1 id=\"IPO模型\"><a href=\"#IPO模型\" class=\"headerlink\" title=\"IPO模型\"></a>IPO模型</h1><p>Input-Process-Output (IPO) 模型是描述计算机功能和工作原理的基本概念。这个模型简要地阐述了计算机是如何接收输入、经过处理后产生输出的过程。</p>\n<ol>\n<li><strong>Input（输入）</strong>：<ul>\n<li>输入是计算机系统接收的信息、数据或指令。</li>\n<li>输入可以来自各种来源，包括键盘、鼠标、触摸屏、传感器、网络等。</li>\n<li>输入可以是用户提供的命令、数据、或外部设备发送的信号。</li>\n</ul>\n</li>\n<li><strong>Process（处理）</strong>：<ul>\n<li>处理阶段是计算机对输入进行操作、运算和处理的阶段。</li>\n<li>在这个阶段，计算机执行各种算法、程序和操作，以转换输入数据为有意义的输出。</li>\n<li>处理包括运算、逻辑判断、存储、检索等操作，这些都是由计算机的中央处理单元（CPU）执行的。</li>\n</ul>\n</li>\n<li><strong>Output（输出）</strong>：<ul>\n<li>输出是计算机处理完输入后生成的结果、数据或信息。</li>\n<li>输出可以呈现在屏幕上，通过打印机输出，或者通过网络传送给其他系统。</li>\n<li>输出可以是用户期望的反馈、计算结果、图形显示等。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"组成部分\"><a href=\"#组成部分\" class=\"headerlink\" title=\"组成部分\"></a>组成部分</h2><p>施Input-Process-Output（IPO）模型和von Neumann模型需要三个主要组成部分：</p>\n<ol>\n<li><strong>硬件（Hardware）</strong>：<ul>\n<li>硬件包括计算机的物理部分，是实体的组成部分。</li>\n<li>输入设备、中央处理单元（CPU）、内存、输出设备、存储设备以及总线系统等都属于硬件。</li>\n<li>硬件提供了执行计算、存储数据和与外部环境交互的基本能力。</li>\n</ul>\n</li>\n<li><strong>软件（Software）</strong>：<ul>\n<li>软件是计算机程序和数据的集合，是一系列指令的集合，指导硬件执行各种任务。</li>\n<li>操作系统是一种关键的系统软件，管理硬件资源，提供用户与计算机的接口。</li>\n<li>应用程序是用户使用的软件，例如文字处理软件、游戏、图形设计工具等。</li>\n</ul>\n</li>\n<li><strong>被操纵的数据（Data that is being manipulated）</strong>：<ul>\n<li>数据是计算机系统的关键元素，是输入、处理和输出的基础。</li>\n<li>输入数据是通过输入设备提供给计算机的信息。</li>\n<li>处理阶段涉及对数据的运算、逻辑判断、转换等操作。</li>\n<li>输出数据是计算机处理后生成的结果，可以是文本、图形、声音等形式。</li>\n</ul>\n</li>\n</ol>\n<p>这三个组成部分共同构成了计算机系统，实现了输入、处理和输出的整个工作过程。von Neumann模型也涵盖在这个框架内，它是一种描述计算机体系结构的模型，其中指令和数据存储在同一存储器中，由中央处理单元按顺序执行。这个模型强调了程序存储器的概念，使计算机能够根据存储在内存中的指令来执行不同的任务。</p>\n<h1 id=\"硬件\"><a href=\"#硬件\" class=\"headerlink\" title=\"硬件\"></a>硬件</h1><p>硬件是计算机系统的物理组成部分，它执行计算、存储和输入输出等基本功能。以下是硬件的主要组成部分：</p>\n<ol>\n<li><p><strong>中央处理单元（Central Processing Unit，CPU）</strong>：</p>\n<ul>\n<li>CPU是计算机的核心，负责执行指令并控制其他硬件组件。</li>\n<li>它包括算术逻辑单元（ALU）执行算术和逻辑运算，控制单元执行指令的控制和协调。</li>\n</ul>\n</li>\n<li><p><strong>内存（Memory）</strong>：</p>\n<ul>\n<li>内存用于存储当前正在执行的程序和数据。</li>\n<li>随机存取存储器（RAM）提供了临时存储，以便CPU能够快速访问和修改数据。</li>\n<li>只读存储器（ROM）存储固定的程序和数据，通常用于存储系统引导程序。</li>\n</ul>\n</li>\n<li><p><strong>输入设备（Input Devices）</strong>：</p>\n<ul>\n<li>输入设备允许用户将数据或指令输入计算机系统。</li>\n<li>常见的输入设备包括键盘、鼠标、触摸屏、扫描仪、摄像头和传感器等。</li>\n</ul>\n</li>\n<li><p><strong>输出设备（Output Devices）</strong>：</p>\n<ul>\n<li>输出设备用于显示计算机处理后的结果。</li>\n<li>显示器、打印机、扬声器等都是常见的输出设备。</li>\n</ul>\n</li>\n<li><p><strong>存储设备（Storage Devices）</strong>：</p>\n<ul>\n<li><p>也叫二级存储（Secondary storage）</p>\n</li>\n<li><p>存储设备用于永久性存储数据和程序。</p>\n</li>\n<li><p>硬盘驱动器、固态硬盘、光盘驱动器等属于存储设备，提供长期的数据保存。</p>\n</li>\n</ul>\n</li>\n<li><p><strong>总线系统（Bus System）</strong>：</p>\n<ul>\n<li>总线是计算机内部各个组件之间传输数据和指令的通道。</li>\n<li>数据总线传输数据，地址总线指定数据的存储位置，控制总线传输控制信号。</li>\n</ul>\n</li>\n<li><p><strong>图形处理单元（Graphics Processing Unit，GPU）</strong>：</p>\n<ul>\n<li>GPU专门用于处理图形和图像相关的计算。</li>\n<li>在图形渲染、游戏图形处理等方面发挥着重要作用。</li>\n</ul>\n</li>\n<li><p><strong>主板（Motherboard）</strong>：</p>\n<ul>\n<li>主板是所有硬件组件的主要连接点，提供电源和数据传输的基础。</li>\n<li>它包括CPU插槽、内存插槽、扩展插槽（用于插入显卡、网卡等），以及连接各个组件的总线。</li>\n</ul>\n</li>\n<li><p><strong>电源供应（Power Supply）</strong>：</p>\n<ul>\n<li>电源供应单元为计算机提供所需的电能。</li>\n<li>它将电能转换为适用于计算机各个组件的电压和电流。</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"软件\"><a href=\"#软件\" class=\"headerlink\" title=\"软件\"></a>软件</h1><p>我怎么记得上篇讲过这些？</p>\n<p>软件是计算机系统中的非物理部分，它是一组指令和数据的集合，用于指导计算机硬件执行各种任务。软件可以分为两类：系统软件和应用软件。</p>\n<ol>\n<li><strong>系统软件（System Software）</strong>：<ul>\n<li><strong>操作系统（Operating System）</strong>：操作系统是系统软件的核心，它管理计算机的硬件和提供用户与计算机系统交互的界面。常见的操作系统包括Windows、macOS、Linux等。</li>\n<li><strong>设备驱动程序（Device Drivers）</strong>：设备驱动程序是与硬件通信的软件，它们允许操作系统与硬件设备进行交互。每个硬件组件通常都需要相应的设备驱动程序。</li>\n</ul>\n</li>\n<li><strong>应用软件（Application Software）</strong>：<ul>\n<li><strong>办公套件（Office Suites）</strong>：包括文字处理、电子表格、演示文稿等应用程序，如Microsoft Office、Google Workspace等。</li>\n<li><strong>图形设计和多媒体软件</strong>：用于图形设计、视频编辑、音频处理等，如Adobe Creative Cloud套件、Final Cut Pro等。</li>\n<li><strong>游戏软件</strong>：用于娱乐和游戏的应用程序，如电子游戏、电子竞技等。</li>\n<li><strong>开发工具（Development Tools）</strong>：用于创建和调试软件的工具，如集成开发环境（IDE）和编译器。</li>\n<li><strong>浏览器（Web Browsers）</strong>：用于访问互联网和浏览网页的应用程序，如Chrome、Firefox、Safari等。</li>\n<li><strong>数据库管理系统（Database Management Systems，DBMS）</strong>：用于管理和组织数据的软件，如MySQL、Microsoft SQL Server等。</li>\n<li><strong>安全软件</strong>：包括防病毒软件、防火墙等，用于保护计算机免受恶意软件和网络威胁。</li>\n</ul>\n</li>\n<li><strong>固件（Firmware）</strong>：<ul>\n<li>固件是嵌入在硬件设备中的特殊软件，它提供设备的基本控制和功能。</li>\n<li>例如，计算机主板上的BIOS（Basic Input/Output System）是一种固件，它在计算机启动时提供基本的硬件初始化。</li>\n</ul>\n</li>\n<li><strong>中间件（Middleware）</strong>：<ul>\n<li>中间件是连接不同软件应用程序和硬件系统的软件层，它简化了应用程序之间的通信和数据交换。</li>\n<li>例如，数据库中间件用于连接应用程序和数据库，使它们能够相互通信。</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"机器指令\"><a href=\"#机器指令\" class=\"headerlink\" title=\"机器指令\"></a>机器指令</h1><p>机器指令（Machine Instructions）是计算机体系结构中的基本操作指令，直接由中央处理单元（CPU）执行。这些指令是以二进制形式编码的，每个指令对应着一条特定的操作，例如算术运算、逻辑运算、数据传输等。机器指令是计算机程序的最底层表示，也被称为机器码。</p>\n<h2 id=\"常见机器指令\"><a href=\"#常见机器指令\" class=\"headerlink\" title=\"常见机器指令\"></a>常见机器指令</h2><ol>\n<li><strong>算术指令</strong>：<ul>\n<li><code>ADD</code>：加法</li>\n<li><code>SUB</code>：减法</li>\n<li><code>MUL</code>：乘法</li>\n<li><code>DIV</code>：除法</li>\n</ul>\n</li>\n<li><strong>逻辑指令</strong>：<ul>\n<li><code>AND</code>：逻辑与</li>\n<li><code>OR</code>：逻辑或</li>\n<li><code>XOR</code>：异或</li>\n<li><code>NOT</code>：逻辑非</li>\n</ul>\n</li>\n<li><strong>数据传输指令</strong>：<ul>\n<li><code>MOV</code>：将数据从一个位置传送到另一个位置</li>\n<li><code>LOAD</code>：从内存中加载数据到寄存器</li>\n<li><code>STORE</code>：将数据从寄存器存储到内存中</li>\n</ul>\n</li>\n<li><strong>分支和跳转指令</strong>：<ul>\n<li><code>JUMP</code>：无条件跳转</li>\n<li><code>JZ</code>：如果零跳转（通常用于条件分支）</li>\n<li><code>JE</code>：如果相等跳转</li>\n<li><code>JNE</code>：如果不相等跳转</li>\n</ul>\n</li>\n<li><strong>比较指令</strong>：<ul>\n<li><code>CMP</code>：比较两个操作数</li>\n</ul>\n</li>\n<li><strong>加载和存储指令</strong>：<ul>\n<li><code>LDR</code>：加载寄存器</li>\n<li><code>STR</code>：存储寄存器</li>\n</ul>\n</li>\n<li><strong>控制指令</strong>：<ul>\n<li><code>NOP</code>：空操作（No Operation）</li>\n<li><code>HLT</code>：停机（Halt，停止执行）</li>\n</ul>\n</li>\n</ol>\n<p>这些指令直接与计算机的硬件架构相关，不同的处理器架构可能有不同的机器指令集。例如，x86架构和ARM架构使用不同的指令集。程序员通常使用高级编程语言（如C、Java）编写程序，而编译器将高级代码翻译成相应计算机体系结构的机器指令。</p>\n<h2 id=\"重要概念\"><a href=\"#重要概念\" class=\"headerlink\" title=\"重要概念\"></a>重要概念</h2><ol>\n<li><strong>CPU执行机器指令</strong>：<ul>\n<li>CPU（Central Processing Unit，中央处理单元）是计算机的核心部件，负责执行机器指令。</li>\n<li>机器指令是二进制形式的指令码，直接由CPU执行。每个指令对应于一个特定的操作，如算术运算、逻辑运算、数据传输等。</li>\n</ul>\n</li>\n<li><strong>每个CPU有自己的指令集</strong>：<ul>\n<li>每个CPU都有自己的指令集，也称为指令架构（Instruction Set Architecture，ISA）。</li>\n<li>一个指令集通常包含100到200条指令，用于执行各种操作。</li>\n<li>每个指令集在硬件层面定义了CPU支持的操作，包括指令的格式、操作数的寻址方式等。</li>\n</ul>\n</li>\n<li><strong>指令集是固定的</strong>：<ul>\n<li>对于特定的CPU，其指令集是固定的，不能被改变。</li>\n<li>这意味着在该CPU上运行的程序必须使用该CPU支持的指令集编写。</li>\n</ul>\n</li>\n<li><strong>不同CPU的指令集相似但没有标准化</strong>：<ul>\n<li>虽然不同CPU的指令集可能有一些相似之处，但没有一个通用的、标准的指令集。</li>\n<li>常见的指令集包括x86、ARM、MIPS等，它们分别用于不同的CPU架构。</li>\n<li>这也是为什么编写能在不同架构上运行的程序需要进行适配或重新编译的原因。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"与高级语言的关系\"><a href=\"#与高级语言的关系\" class=\"headerlink\" title=\"与高级语言的关系\"></a>与高级语言的关系</h2><p>机器指令（Machine Instructions）和高级编程语言（High-Level Programming Language，HLL）之间存在密切的关系，但它们在计算机编程的不同层次上发挥着不同的作用。</p>\n<ol>\n<li><strong>机器指令</strong>：<ul>\n<li>机器指令是计算机硬件能够直接执行的二进制指令。</li>\n<li>每个机器指令对应着特定的硬件操作，例如算术运算、逻辑运算、数据传输等。</li>\n<li>机器指令是计算机体系结构的底层表示，直接由CPU执行。</li>\n</ul>\n</li>\n<li><strong>高级编程语言（HLL）</strong>：<ul>\n<li>高级编程语言是为了使程序员更容易编写和理解程序而设计的。</li>\n<li>这些语言使用类似于人类语言的语法和结构，使得程序更易读写。</li>\n<li>常见的高级编程语言包括C、C++、Java、Python等。</li>\n</ul>\n</li>\n<li><strong>编译器和解释器</strong>：<ul>\n<li>高级编程语言的代码需要被转换成机器指令，以便计算机能够执行。</li>\n<li>编译器和解释器是执行这一转换的工具。</li>\n<li>编译器将整个源代码一次性翻译成机器码，并生成可执行文件，例如Windows上的.exe文件。</li>\n<li>解释器逐行翻译和执行源代码，无需生成可执行文件。Python和JavaScript是使用解释器执行的例子。</li>\n</ul>\n</li>\n<li><strong>抽象层次</strong>：<ul>\n<li>高级编程语言提供了对计算机底层硬件的抽象，使得程序员不需要直接处理机器指令。</li>\n<li>这种抽象层次使程序更容易编写、理解和维护。</li>\n</ul>\n</li>\n<li><strong>可移植性</strong>：<ul>\n<li>高级编程语言的一个重要优势是可移植性，即相同的高级代码可以在不同的计算机架构上运行。</li>\n<li>编译器和解释器负责将高级代码转换成特定计算机架构的机器指令。</li>\n</ul>\n</li>\n</ol>\n<p>但是为什么用高级语言写的程序仍然要翻译成机器码呢？</p>\n<p>主要是因为计算机硬件只能理解和执行特定的机器指令。计算机的中央处理单元（CPU）是直接执行机器指令的，这些指令是以二进制形式编码的。</p>\n<ol>\n<li><strong>硬件执行机器指令</strong>：<ul>\n<li>计算机硬件（CPU）只能理解和执行机器指令，这是计算机体系结构的基本特性。</li>\n<li>机器指令是二进制编码的硬件级别指令，直接在硬件上执行。</li>\n</ul>\n</li>\n<li><strong>计算机体系结构差异</strong>：<ul>\n<li>不同的计算机体系结构（例如x86、ARM、MIPS等）有不同的机器指令集。</li>\n<li>高级编程语言的代码需要根据目标计算机的体系结构进行翻译，以生成相应的机器指令。</li>\n</ul>\n</li>\n<li><strong>性能优化</strong>：<ul>\n<li>通过编译器或解释器将高级代码翻译成机器代码，可以进行一些性能优化。</li>\n<li>编译器可以进行静态分析，优化代码结构以提高执行效率。</li>\n</ul>\n</li>\n<li><strong>可移植性</strong>：<ul>\n<li>将高级代码翻译成机器代码可以提高程序的可移植性，使其能够在不同的计算机体系结构上运行。</li>\n<li>只需重新编译或解释，而不需要重写整个程序。</li>\n</ul>\n</li>\n<li><strong>隐藏底层细节</strong>：<ul>\n<li>高级编程语言提供了对计算机底层硬件的抽象，使得程序员不需要直接处理底层的机器指令。</li>\n<li>这种抽象层次提高了程序的可读性和可维护性。</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"冯-诺依曼模型\"><a href=\"#冯-诺依曼模型\" class=\"headerlink\" title=\"冯-诺依曼模型\"></a>冯-诺依曼模型</h1><p>冯诺依曼，我不介绍了，自己百度。</p>\n<p>冯·诺依曼模型（von Neumann architecture）是一种计算机体系结构，它由匈牙利数学家冯·诺伊曼在20世纪中期提出。这一模型在计算机科学和计算机工程领域中起到了巨大的影响，成为现代计算机设计的基石。冯·诺依曼模型主要包括以下关键概念：</p>\n<ol>\n<li><strong>存储程序概念（Stored Program Concept）：</strong> 冯·诺依曼模型的一个关键概念是将程序存储在计算机的存储器中，使计算机能够按顺序执行存储在内存中的指令。这使得用户能够灵活地改变和存储程序，而不需要改变硬件。</li>\n<li><strong>存储器（Memory）：</strong> 程序和数据都存储在同一种类型的内存中。这意味着程序的指令和数据都以二进制形式存储在内存中，而处理器可以根据需要读取这些数据。</li>\n<li><strong>中央处理器（Central Processing Unit，CPU）：</strong> 冯·诺依曼模型包含一个中央处理器，负责执行存储在内存中的指令。CPU包括算术逻辑单元（ALU）用于执行算术和逻辑运算，以及控制单元（Control Unit）用于管理指令的执行过程。</li>\n<li><strong>指令集架构（Instruction Set Architecture，ISA）：</strong> 冯·诺依曼计算机使用指令集架构，其中包含一组可以由CPU执行的指令。ISA定义了CPU能够理解和执行的所有操作，包括算术运算、逻辑运算、数据传输等。</li>\n<li><strong>顺序执行（Sequential Execution）：</strong> 冯·诺依曼计算机以顺序的方式执行存储在内存中的指令。每个指令按照顺序从内存中取出并由CPU执行，然后执行下一条指令。这确保了程序的正确执行顺序。</li>\n<li><strong>输入/输出（I/O）：</strong> 冯·诺依曼计算机通过输入/输出设备与外部世界进行通信。输入设备（如键盘和鼠标）和输出设备（如显示器和打印机）允许计算机与用户进行交互，并进行数据的输入和输出。</li>\n</ol>\n<h2 id=\"通用性\"><a href=\"#通用性\" class=\"headerlink\" title=\"通用性\"></a>通用性</h2><ol>\n<li><strong>可执行程序控制：</strong><ul>\n<li>计算机被设计成由可执行程序控制的通用机器。这意味着计算机可以执行各种任务，这些任务由程序提供的指令来完成。</li>\n</ul>\n</li>\n<li><strong>程序作为指令列表：</strong><ul>\n<li>程序本质上是一系列指令的列表，指导计算机执行特定任务。这些指令按顺序存储在计算机的内存中。</li>\n</ul>\n</li>\n<li><strong>统一内存用于程序和数据：</strong><ul>\n<li>程序和程序使用的数据都存储在计算机的内存中。这意味着指令和数据使用二进制代码表示，并可以从相同的存储介质中访问。</li>\n</ul>\n</li>\n<li><strong>可重写内存：</strong><ul>\n<li>冯·诺依曼机器之所以强大，其中一个原因是内存可重写。这使得在执行任务的过程中能够灵活地更改和更新程序以及存储和修改数据。</li>\n</ul>\n</li>\n<li><strong>主动执行的处理器：</strong><ul>\n<li>处理器（或中央处理单元，CPU）是计算机的主动部分，负责执行程序指令。它按照程序的指导执行算术和逻辑操作，使计算机能够执行各种计算任务。</li>\n</ul>\n</li>\n<li><strong>通用性质：</strong><ul>\n<li>这些特性的结合，包括可执行程序控制、使用指令列表、程序和数据的统一存储、可重写内存以及主动执行的处理器，使得冯·诺依曼机器具有通用计算设备的性质。通过简单地更改程序中的指令，计算机能够执行各种任务，使其适应不同的计算需求。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"潜在问题\"><a href=\"#潜在问题\" class=\"headerlink\" title=\"潜在问题\"></a>潜在问题</h2><p><strong>潜在问题：</strong></p>\n<ul>\n<li><strong>如何区分数据和指令：</strong> 因为它们都由二进制代码表示，计算机如何区分数据和指令呢？</li>\n<li><strong>16位指令代码的多义性：</strong> 在不同的情况下，16位指令代码可能表示一个数字或两个字符。</li>\n</ul>\n<p><strong>解决方案：</strong></p>\n<ul>\n<li><strong>指令和数据存储在内存中：</strong> 冯·诺依曼体系结构通过将指令和数据存储在同一内存中，使它们成为了计算机中的同一类信息。这使得在程序执行时，计算机能够灵活地读取和处理指令和数据。</li>\n<li><strong>CPU知道从哪里获取程序指令：</strong> 中央处理单元（CPU）有能力识别并区分指令和数据。它通过程序计数器等机制知道从内存的哪个位置获取下一条指令，以确保按照正确的顺序执行程序。</li>\n<li><strong>指令和数据采用特殊编码形式：</strong> 为了让CPU理解，指令和数据必须采用特殊的编码形式。指令集架构（ISA）定义了CPU可以理解和执行的所有操作，确保指令以及与之相关的数据能够在计算机内部进行正确的解释和处理。</li>\n</ul>\n<h2 id=\"历史\"><a href=\"#历史\" class=\"headerlink\" title=\"历史\"></a>历史</h2><ul>\n<li><strong>冯·诺依曼：</strong><ul>\n<li>术语“冯·诺依曼体系结构”最早出现在他于1945年6月30日发表的《EDVAC报告初稿》（First Draft of a Report on the EDVAC）中。这份报告描述了他对一种新型计算机结构的构想，成为冯·诺依曼体系结构的奠基石。</li>\n</ul>\n</li>\n<li><strong>康拉德·祖泽（Konrad Zuse）：</strong><ul>\n<li>1936年，祖泽在专利申请中提到了类似的概念。祖泽是一位德国工程师和计算机科学家，他的工作也对计算机发展产生了重要影响，尽管他的成就在当时并不为广泛认知。</li>\n</ul>\n</li>\n<li><strong>J.W. Mauchly 和 J.P. Eckert：</strong><ul>\n<li>在1943年12月，Mauchly和Eckert在他们对ENIAC的研究中写道存储程序的概念。ENIAC是一台通用的存储程序计算机，是世界上第一台大规模电子计算机之一。他们的工作对后来冯·诺依曼体系结构的发展起到了关键作用。</li>\n</ul>\n</li>\n</ul>\n<p>自己百度！</p>\n<h1 id=\"哈佛体系结构\"><a href=\"#哈佛体系结构\" class=\"headerlink\" title=\"哈佛体系结构\"></a>哈佛体系结构</h1><ol>\n<li><strong>冯·诺依曼体系结构的持久性：</strong><ul>\n<li>冯·诺依曼体系结构的规范在过去60多年中仍然保持有效，并且几乎所有今天的计算机都实现了这一体系结构。其灵活性和通用性使得它成为计算机设计的主导范式。</li>\n</ul>\n</li>\n<li><strong>哈佛体系结构的变体：</strong><ul>\n<li><strong>分离数据和程序：</strong> 最近，一种变体——哈佛体系结构，逐渐崭露头角。</li>\n<li><strong>需要不同的内存和访问总线：</strong> 哈佛体系结构通过将程序和数据存储在不同的内存中，并使用不同的访问总线来实现这种分离。这与冯·诺依曼体系结构中使用统一内存的方式形成对比。</li>\n<li><strong>提高传输速率的意图：</strong> 这种分离的设计旨在提高数据传输速率，从而提高计算机的吞吐量。哈佛体系结构通过同时从程序存储器和数据存储器中提取信息，可以在某种程度上实现并行操作。</li>\n</ul>\n</li>\n<li><strong>哈佛体系结构的吞吐量优势：</strong><ul>\n<li><strong>并行访问：</strong> 哈佛体系结构的一个优势在于，由于数据和指令存储在不同的存储器中，CPU可以同时从两个存储器中获取信息，而不会出现竞争或冲突。在某些情况下，这种并行访问可以提高系统的整体性能。</li>\n<li><strong>分离内存总线：</strong> 使用不同的内存和访问总线还有助于减少由于程序和数据访问之间的冲突而导致的延迟。</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"https://cdn.jsdelivr.net/gh/GeneralK1ng/My_Blog_IMG@main/img/HarvardArchitecture.png\"></p>\n<h1 id=\"Q-A\"><a href=\"#Q-A\" class=\"headerlink\" title=\"Q&A\"></a>Q&amp;A</h1><p><strong>1. 用图示说明输入-处理-输出模型的概念：</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/GeneralK1ng/My_Blog_IMG@main/img/IPO-Model.png\"></p>\n<p><strong>2. 给出了当前一代数字计算机的基本结构的模型是什么？</strong></p>\n<ul>\n<li>当前一代数字计算机的基本结构模型是<strong>冯·诺依曼体系结构</strong>。</li>\n</ul>\n<p><strong>3. 过程由什么控制？</strong></p>\n<ul>\n<li>过程由计算机的<strong>控制单元（Control Unit）</strong>控制。</li>\n</ul>\n<p><strong>4. 强调实现输入-处理-输出和冯·诺依曼模型所需的三个组件：</strong></p>\n<ul>\n<li><strong>输入（Input）：</strong> 数据从外部源输入计算机系统。</li>\n<li><strong>处理（Process）：</strong> 中央处理器（CPU）执行存储在内存中的指令，对数据进行处理。</li>\n<li><strong>输出（Output）：</strong> 处理结果被发送到外部，或者在计算机内部用于进一步处理或存储。</li>\n</ul>\n<p><strong>5. 列举5个计算机硬件的例子：</strong></p>\n<ol>\n<li><strong>中央处理器（CPU）</strong></li>\n<li><strong>内存（RAM）</strong></li>\n<li><strong>硬盘驱动器（HDD）</strong></li>\n<li><strong>图形处理器（GPU）</strong></li>\n<li><strong>主板（Motherboard）</strong></li>\n</ol>\n<p><strong>6. 识别计算机内执行计算和其他操作的主动部分是什么？</strong></p>\n<ul>\n<li>主动执行计算和其他操作的部分是<strong>中央处理器（CPU）</strong>。CPU包括算术逻辑单元（ALU）执行算术和逻辑运算，以及控制单元（Control Unit）管理程序执行的过程。</li>\n</ul>\n<p><strong>7. 计算机的哪一部分存储数据和程序，以供CPU访问？</strong></p>\n<ul>\n<li>存储数据和程序以供CPU访问的部分是<strong>主存储器（RAM，Random Access Memory）</strong>。</li>\n</ul>\n<p><strong>8. 提供三个次要存储的例子。</strong></p>\n<ul>\n<li>三个次要存储的例子包括：<ol>\n<li><strong>硬盘驱动器（Hard Disk Drive，HDD）</strong></li>\n<li><strong>固态硬盘（Solid State Drive，SSD）</strong></li>\n<li><strong>光盘（例如，DVD或CD）</strong></li>\n</ol>\n</li>\n</ul>\n<p><strong>9. 提供三个输入设备的例子。</strong></p>\n<ul>\n<li>三个输入设备的例子包括：<ol>\n<li><strong>键盘</strong></li>\n<li><strong>鼠标</strong></li>\n<li><strong>触摸屏</strong></li>\n</ol>\n</li>\n</ul>\n<p><strong>10. 提供三个输出设备的例子。</strong></p>\n<ul>\n<li>三个输出设备的例子包括：<ol>\n<li><strong>显示器</strong></li>\n<li><strong>打印机</strong></li>\n<li><strong>音响系统</strong></li>\n</ol>\n</li>\n</ul>\n<p><strong>11. 定义“软件”。</strong></p>\n<ul>\n<li><strong>软件（Software）</strong> 是指计算机程序和与之相关的数据，包括操作系统、应用程序和所有其他执行特定任务的代码。软件是一系列指令的集合，用于控制计算机硬件执行各种任务。</li>\n</ul>\n<p><strong>12. 两个模型——输入-处理-输出模型和冯·诺依曼模型之间的区别是什么？</strong></p>\n<ul>\n<li><strong>输入-处理-输出模型：</strong> 这个模型强调计算系统的基本功能，即接收输入、进行处理，然后产生输出。它并未涉及计算机内部的存储和控制。</li>\n<li><strong>冯·诺依曼模型：</strong> 这个模型不仅包括了输入-处理-输出的概念，还强调了将程序和数据存储在同一存储器中的特点。它包括中央处理器、存储器、输入/输出设备和控制单元等组件，形成了一个完整的计算机系统。</li>\n</ul>\n<p><strong>13. 对于特定的计算机，机器指令集通常是固定的。是真的还是假的？</strong></p>\n<ul>\n<li><strong>真的。</strong> 对于特定的计算机体系结构，机器指令集通常是硬件固定的，它定义了CPU可以理解和执行的一组指令。</li>\n</ul>\n<p><strong>14. 存在一个面向行业目的的标准指令集。是真的还是假的？</strong></p>\n<ul>\n<li><strong>真的。</strong> 有一些标准的指令集体系结构，例如x86（Intel和AMD处理器使用的指令集）、ARM（广泛用于移动设备和嵌入式系统）等，这些被广泛应用于整个行业。</li>\n</ul>\n<p><strong>15. 高级编程语言（HLLs）比机器指令更适合编程。为什么？</strong></p>\n<ul>\n<li><strong>是真的。</strong> 高级编程语言（HLLs）提供了更抽象、更易读、更易编写的语法和结构，使程序员能够更方便地表达和理解算法和逻辑。相比之下，机器指令更接近计算机硬件的底层细节，编写和理解相对更为困难。</li>\n</ul>\n<p><strong>16. 提到四大类机器指令。</strong></p>\n<ul>\n<li><strong>数据传输指令（Data Transfer Instructions）：</strong> 在寄存器和内存之间传输数据。</li>\n<li><strong>算术运算指令（Arithmetic Instructions）：</strong> 执行算术运算，如加法、减法、乘法和除法。</li>\n<li><strong>逻辑运算指令（Logical Instructions）：</strong> 执行逻辑运算，如与、或、非等。</li>\n<li><strong>控制指令（Control Instructions）：</strong> 控制程序的流程，包括分支（跳转）、循环等。</li>\n</ul>\n<p><strong>17. 为什么高级编程语言（HLL）程序在执行之前需要被翻译？</strong></p>\n<ul>\n<li>HLL程序需要被翻译，因为计算机的中央处理器（CPU）只能理解和执行机器语言指令。HLL程序首先被翻译成机器语言的形式，这个过程通常包括编译（Compile）或解释（Interpret）的步骤，以便在计算机上执行。</li>\n</ul>\n<p><strong>18. 什么是冯·诺依曼模型？</strong></p>\n<ul>\n<li>冯·诺依曼模型是一种计算机体系结构，它包括一个中央处理器（CPU）、内存（存储程序和数据的地方）、输入/输出设备以及一个用于传输数据和指令的总线。这个模型强调了程序和数据存储在同一内存中，并由CPU按照顺序执行。</li>\n</ul>\n<p><strong>19. 计算机的存储器中同时保存了?和?，两者都由?表示。</strong></p>\n<ul>\n<li>计算机的存储器中同时保存了<strong>程序（Program）**和**数据（Data）**，两者都由</strong>二进制代码（Binary Codes）**表示。</li>\n</ul>\n<p><strong>20. 识别冯·诺依曼瓶颈是什么？</strong></p>\n<ul>\n<li>冯·诺依曼瓶颈是指在冯·诺依曼体系结构中，由于程序和数据共享同一存储器和总线，导致数据传输速率受限，从而影响了计算机的性能。这一瓶颈在数据传输过程中可能导致CPU等待数据的时间增加，限制了整体性能。</li>\n</ul>\n<p><strong>21. 计算机如何区分数据和指令，因为它们都由二进制代码表示？</strong></p>\n<ul>\n<li>计算机通过<strong>指令集架构（ISA）</strong>来区分数据和指令。指令集架构定义了CPU可以理解和执行的操作指令。计算机根据指令的不同来执行不同的操作，因此在执行时能够区分数据和指令。</li>\n</ul>\n<p><strong>22. 冯·诺依曼机器和哈佛体系结构之间的主要区别是什么？</strong></p>\n<ul>\n<li>主要区别：<ul>\n<li>冯·诺依曼机器：程序和数据共享同一存储器，使用相同的总线进行访问。</li>\n<li>哈佛体系结构：程序和数据分别存储在不同的存储器中，使用不同的总线进行访问。</li>\n</ul>\n</li>\n</ul>\n<p><strong>23. 为什么要使用哈佛体系结构？</strong></p>\n<ul>\n<li>动机：<ul>\n<li>提高数据传输速率和系统吞吐量。</li>\n<li>通过使用独立的存储器和总线，允许程序和数据同时访问，从而提高并行性。</li>\n<li>更适合嵌入式系统和一些特定应用领域。</li>\n</ul>\n</li>\n</ul>\n<p><strong>24. 使用哈佛体系结构的额外成本是什么？</strong></p>\n<ul>\n<li>额外成本：<ul>\n<li>需要额外的硬件资源来实现独立的指令存储器和数据存储器，以及独立的总线系统。</li>\n<li>这可能导致芯片面积增大，设计复杂度增加，制造成本上升。</li>\n</ul>\n</li>\n</ul>\n<p><strong>25. 大多数桌面CPU具有一个内部的“指令缓存”供给控制单元和一个完全独立的“数据缓存”。这是模仿哪种计算机体系结构？</strong></p>\n<ul>\n<li>这模仿的是<strong>哈佛体系结构</strong>。在哈佛体系结构中，指令和数据分别存储，通常有独立的缓存用于提高访问效率。这种配置允许CPU在执行指令的同时访问数据，提高了整体性能。</li>\n</ul>\n","feature":true,"text":"期末考试，细算留一个月用来复习好像是真的有点紧了，甚至现在都不只一个月。 101就按部就班，下周需要复习107，101就跟着感觉走算了。 IPO模型Input-Process-Output (IPO) 模型是描述计算机功能和工作原理的基本概念。这个模型简要地阐述了计算机是如何接收...","link":"","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"9 mins."},"categories":[],"tags":[{"name":"CPT101复习","slug":"CPT101复习","count":2,"path":"api/tags/CPT101复习.json"},{"name":"笔记","slug":"笔记","count":41,"path":"api/tags/笔记.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#IPO%E6%A8%A1%E5%9E%8B\"><span class=\"toc-text\">IPO模型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BB%84%E6%88%90%E9%83%A8%E5%88%86\"><span class=\"toc-text\">组成部分</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%A1%AC%E4%BB%B6\"><span class=\"toc-text\">硬件</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%BD%AF%E4%BB%B6\"><span class=\"toc-text\">软件</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%9C%BA%E5%99%A8%E6%8C%87%E4%BB%A4\"><span class=\"toc-text\">机器指令</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E8%A7%81%E6%9C%BA%E5%99%A8%E6%8C%87%E4%BB%A4\"><span class=\"toc-text\">常见机器指令</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%87%8D%E8%A6%81%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">重要概念</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%8E%E9%AB%98%E7%BA%A7%E8%AF%AD%E8%A8%80%E7%9A%84%E5%85%B3%E7%B3%BB\"><span class=\"toc-text\">与高级语言的关系</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%86%AF-%E8%AF%BA%E4%BE%9D%E6%9B%BC%E6%A8%A1%E5%9E%8B\"><span class=\"toc-text\">冯-诺依曼模型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%80%9A%E7%94%A8%E6%80%A7\"><span class=\"toc-text\">通用性</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%BD%9C%E5%9C%A8%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">潜在问题</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8E%86%E5%8F%B2\"><span class=\"toc-text\">历史</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%93%88%E4%BD%9B%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">哈佛体系结构</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Q-A\"><span class=\"toc-text\">Q&amp;A</span></a></li></ol>","author":{"name":"General_K1ng","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/GeneralK1ng/My_Blog_IMG@main/img/avatar.png","link":"/","description":"一名正在努力学习计算机的菜鸟","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/BILIBILI.svg","link":"https://space.bilibili.com/32927332"},"csdn":{"icon":"/svg/csdn.svg","link":"https://blog.csdn.net/qq_34849354"},"github":{"icon":"/svg/GitHub.svg","link":"https://github.com/GeneralK1ng"},"QQ":{"icon":"/svg/QQ.svg","link":"tencent://AddContact/?fromId=45&fromSubId=1&subcmd=all&uin=2822688858"}}}},"mapped":true,"prev_post":{},"next_post":{"title":"MySQL Review-10","uid":"ef8bd82be23cedfc8cb7a2a8f2b9f3ab","slug":"MySQL-Review-10","date":"2023-12-08T07:08:26.000Z","updated":"2023-12-08T08:13:38.093Z","comments":true,"path":"api/articles/MySQL-Review-10.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/GeneralK1ng/My_Blog_IMG@main/img/MySQL-image.png","text":"继续来到数据库的规范化，也就是一种优化数据库结构的一种范式。 数据库的规范化良好数据库设计规范最小化属性数量： 数据库应该包含最少数量的属性，足以支持企业的数据需求。这有助于保持数据库的简洁性，提高查询效率，并降低维护成本。只有必要的属性应该包含在数据库中，避免不必要的冗余。 具...","link":"","photos":[],"count_time":{"symbolsCount":"8.7k","symbolsTime":"8 mins."},"categories":[],"tags":[{"name":"笔记","slug":"笔记","count":41,"path":"api/tags/笔记.json"},{"name":"MySQL复习","slug":"MySQL复习","count":10,"path":"api/tags/MySQL复习.json"}],"author":{"name":"General_K1ng","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/GeneralK1ng/My_Blog_IMG@main/img/avatar.png","link":"/","description":"一名正在努力学习计算机的菜鸟","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/BILIBILI.svg","link":"https://space.bilibili.com/32927332"},"csdn":{"icon":"/svg/csdn.svg","link":"https://blog.csdn.net/qq_34849354"},"github":{"icon":"/svg/GitHub.svg","link":"https://github.com/GeneralK1ng"},"QQ":{"icon":"/svg/QQ.svg","link":"tencent://AddContact/?fromId=45&fromSubId=1&subcmd=all&uin=2822688858"}}}},"feature":true}}