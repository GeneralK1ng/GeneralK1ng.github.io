{"title":"Java_Exercise(Week3)","uid":"db575aff8a359d17ed235c7bc3cb6733","slug":"Java-Exercise-Week3","date":"2023-09-29T16:54:42.000Z","updated":"2023-09-30T14:31:05.983Z","comments":true,"path":"api/articles/Java-Exercise-Week3.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/GeneralK1ng/My_Blog_IMG@main/img/codeBackground.png","content":"<p>这周开始就进入到了<strong>条件语句</strong>和<strong>循环语句</strong>了，那么随之而来的就是一些简单的算法题目了，当然对于刚开始接触的人来说还是有些困难的，但是不急，只要把每一步想明白，其实没什么难的，重点在于思路，为什么要用if，为什么要用循环，为什么这个循环是for循环，那个要用while循环，怎么说呢，一定要自己去真真切切的把代码打一遍你才能真的懂，自己不敲代码那真的是不可能学会的。</p>\n<h2 id=\"Exercise-3-1-Pandemic-Spread\"><a href=\"#Exercise-3-1-Pandemic-Spread\" class=\"headerlink\" title=\"Exercise #3.1 Pandemic Spread\"></a>Exercise #3.1 Pandemic Spread</h2><p>编写 Java 程序 <code>PandemicSpread</code>，模拟大流行病的传播速度，输入如下内容：</p>\n<ul>\n<li><code>init</code>：第 1 天的初始感染人数</li>\n<li><code>numInfect</code>：一名感染者每天新感染的健康人的平均数量</li>\n<li><code>population</code>：该地区的总人数<br>返回全部人口受感染的日期。</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/GeneralK1ng/My_Blog_IMG@main/img/pandemicspread.png\"></p>\n<p>测试用例：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">Test case 1 :\nInput:\n1\n2\n10\nOutput:\n4\n(Explanation: Total Infected Day 1 = 1; Day 2 = 3; Day 3 = 9; Day 4 = 27)\n\nTest case 2:\nInput:\n5\n3\n1000\nOutput:\n5</code></pre>\n\n<h3 id=\"题目分析\"><a href=\"#题目分析\" class=\"headerlink\" title=\"题目分析\"></a>题目分析</h3><p>我们先把这个题目进行分析，首先告诉我们需求是要模拟疫情的传播速度，然后定义了三个变量，分别是：</p>\n<ul>\n<li><code>init</code>：第一天的初始感染人数。它代表在大流行病开始时已经有<strong>多少人被感染了</strong>。</li>\n<li><code>numInfect</code>：一名感染者每天新感染的健康人的平均数量。它表示每个已感染者每天<strong>平均能传染给</strong>多少个健康人。</li>\n<li><code>population</code>：该地区的总人数。它代表了整个地区内的<strong>人口数量</strong>。</li>\n</ul>\n<p>然后其实意图就很明显了，举个例子，假设在某个地区，第一天的初始感染人数是 1，一名感染者每天平均感染 2 个健康人，而该地区的总人口是 10。我们的目标就是找出在这种情况下，需要多少天才能使整个人口都被感染。</p>\n<p>对吧？这种题就跟小学生的应用题一样，可能手算都会但是让你写一个程序呢？不急，我们就先按小学生的思路走。</p>\n<p>根据题目要求，我们可以逐天<strong>模拟传播的过程</strong>。</p>\n<ul>\n<li>第一天，只有一个人被感染，并且他每天平均感染 2 个健康人。</li>\n<li>第二天，已感染人数将变为 <code>1 + 1 * 2 = 3</code>。</li>\n<li>第三天，已感染人数将变为 <code>3 + 3 * 2 = 9</code>。</li>\n<li>第四天，已感染人数将变为 <code>9 + 9 * 2 = 27</code>。</li>\n</ul>\n<p>然而，根据题目要求，我们只需要知道全部人口被感染的日期，所以我们可以直接返回第四天作为答案。</p>\n<p>所以其实我们该怎么写代码呢？</p>\n<p>如果不知道那就先把变量初始化了呗，反之一定是要用的，对吧？</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">int init = sc.nextInt(); // 第一天有多少人被感染了\nint numInfect = sc.nextInt(); // 每个感染者平均能传染给多少人\nint population = sc.nextInt(); // 总人口</code></pre>\n\n<p>当然你要在此之前记得导入<code>Scanner</code>的包，这里我就不写了，后面完整代码可以看到。。。</p>\n<p>然后就能发现一个问题，其实我们无法确定需要多少天才能使整个人口都被感染。每天新增感染人数取决于已感染人数和每个感染者平均每天感染的健康人数。因此，我们需要通过逐天迭代的方式来模拟传播过程，直到已感染人数达到或超过总人口数量。</p>\n<p>那么不就是我们所说的循环了吗？那么用哪个循环？while还是for？</p>\n<p>我在这周最开始的教程里面其实讲过了，当知道具体循环次数的时候一般用for循环，当不确定的时候就用while循环。显然，此刻我们不知道要循环多少次。</p>\n<p>然后我们来想循环应该怎么来写，看看上面我们的<strong>模拟传播过程</strong>，有没有发现一些规律？</p>\n<p>我觉得都大学生了，这个规律应该还是能看出来的。。。吧？</p>\n<p>第一天，只有一个人被感染，对吧？然后，每个被感染的人每天平均再感染2个健康人。所以，第二天，已感染的人数是1<em>（初始感染）</em>加上1<em>（初始感染者）</em>乘以2<em>（每个感染者每天平均感染的人数）</em>，等于3人。</p>\n<p>接下来，第三天，已感染的人数是3<em>（第二天的感染人数）</em>加上3<em>（第二天的感染人数）</em>乘以2<em>（每个感染者每天平均感染的人数）</em>，等于9人。</p>\n<p>再往后，第四天，已感染的人数是9<em>（第三天的感染人数）</em>加上9<em>（第三天的感染人数）</em>乘以2<em>（每个感染者每天平均感染的人数）</em>，等于27人。</p>\n<p>这个规律就是每一天的感染人数都是前一天的感染人数乘以2再加上前一天的感染人数。</p>\n<p>所以这部分代码我想，还是非常简单的，首先，我们初始化一个变量叫做<code>day</code>，它表示当前是第几天，我们从第一天开始。</p>\n<p>还有一个变量叫做<code>infected</code>，它表示已经感染的人数，我们从初始感染人数开始。</p>\n<p>然后，我们使用一个<code>while</code>循环，它会一直运行直到所有人都被感染。在循环里，我们计算每一天新感染的人数，用<code>newInfections</code>表示，它等于<code>infected * numInfect</code>，也就是前一天的感染人数乘以2。</p>\n<p>接下来，我们将新感染的人数加到已感染的人数上，这样我们就更新了每一天的感染情况。</p>\n<p>最后，我们将<code>day</code>加1，表示进入下一天。然后，循环会继续运行，计算下一天的感染情况，直到所有人都被感染。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">int day = 1; // 定义天数，我们从第一天开始\nint infected = init; // 用infected这个变量表示已感染的人数，第一天感染的人数就是init变量所记录的值\n\nwhile (infected &lt; population) { // 循环结束条件，只要已感染人数小于总人数就一直继续循环\n    int newInfections = infected * numInfect; // 用已感染的人数乘以平均传染的速率并且用一个变量来接收，表示每日新增感染人数\n    infected += newInfections;// 然后更新已感染人数\n    day++; // 天数加一\n}</code></pre>\n\n<p>整个代码逻辑其实还是非常简单清晰的吧，如果还不懂的欢迎留言。</p>\n<p>最后很简单了，我们只需要把<code>day</code>进行输出就行了。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">System.out.println(day);</code></pre>\n\n<h3 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h3><details class=\"custom-details\">\n<summary>Click to see more</summary>\n<p><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">import java.util.Scanner;\n\npublic class PandemicSpread {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        \n        int init = sc.nextInt(); // 第一天有多少人被感染了\n        int numInfect = sc.nextInt(); // 每个感染者平均能传染给多少人\n        int population = sc.nextInt(); // 总人口\n\n        int day = 1; // 定义天数，我们从第一天开始\n        int infected = init; // 用infected这个变量表示已感染的人数，第一天感染的人数就是init变量所记录的值\n\n        while (infected &lt; population) { // 循环结束条件，只要已感染人数小于总人数就一直继续循环\n            int newInfections = infected * numInfect; // 用已感染的人数乘以平均传染的速率并且用一个变量来接收，表示每日新增感染人数\n            infected += newInfections;// 然后更新已感染人数\n            day++; // 天数加一\n        }\n\n        System.out.println(day);// 输出\n    }\n}</code></pre>\n\n</p>\n</details>\n<h2 id=\"Exercise-3-2-Right-Triangle\"><a href=\"#Exercise-3-2-Right-Triangle\" class=\"headerlink\" title=\"Exercise #3.2 Right Triangle\"></a>Exercise #3.2 Right Triangle</h2><p>编写一个 Java 程序 <code>RightTriangle</code>，接收三个整数输入数，并判断它们是否构成直角三角形的边长。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/GeneralK1ng/My_Blog_IMG@main/img/right-triangle1.png\"></p>\n<p>当且仅当以下两个条件为真时，您的程序必须打印输出为真：</p>\n<ol>\n<li>三个整数均为正数（大于零）。</li>\n<li>您可以找到两个整数，这两个整数的平方和等于第三个整数的平方。</li>\n</ol>\n<p>测试用例：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">Test cases 1:\nInput:\n5\n12\n13\nOutput:\ntrue\n(since they are all positive and 52  + 122 == 132)\nTest cases 2:\nInput:\n5\n4\n3\nOutput:\ntrue\n(since they are all positive and 42 + 32  == 52)\nTest cases 3:\nInput:\n-3\n-4\n5\nOutput:\nfalse\n(since -3 and -4 are not positive)</code></pre>\n\n<h3 id=\"题目分析-1\"><a href=\"#题目分析-1\" class=\"headerlink\" title=\"题目分析\"></a>题目分析</h3><p>说实话，这种题是不是拿到手感觉非常简单，然后一到了写代码的时候就头疼，我去，要考虑的东西好多啊。。。</p>\n<p>但是，无所谓，一步一步跟着思路走。</p>\n<p>说穿了，这不就是勾股定理嘛。勾股定理需要什么？三个边长，对吧？那就写咯。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">int side1 = sc.nextInt();\n   int side2 = sc.nextInt();\n   int side3 = sc.nextInt();</code></pre>\n\n<p>为什么不用<code>a,b,c</code>来当做变量名称呢？因为牵扯到下面的条件判断，因为我们熟悉的勾股定理的判定是<br><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.186ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"11.893ex\" height=\"2.185ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -883.9 5256.7 965.9\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msup\"><g data-mml-node=\"mi\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(562,413) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(1187.8,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(2188,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D44F\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(462,413) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(3331.3,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(4387.1,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D450\" d=\"M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(466,413) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g></g></g></g></svg></mjx-container><br>对吧？但其实<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.186ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"11.893ex\" height=\"2.072ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -833.9 5256.7 915.9\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msup\"><g data-mml-node=\"mi\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(562,363) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(1187.8,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(2188,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D450\" d=\"M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(466,363) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(3335.3,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(4391.1,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D44F\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(462,363) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g></g></g></g></svg></mjx-container>也是直角三角形，所以为了避免到时候条件的书写上出现一些混乱，还是用边长来当作变量名吧，当然这是我的习惯，你们可以用什么都行。</p>\n<p>然后我们该怎么判断？想想勾股定理</p>\n<ul>\n<li>所有三个整数必须为正数（大于零）。</li>\n<li>其中两个整数的平方和等于第三个整数的平方。</li>\n</ul>\n<p>所以我们先满足最基本的都要是正整数嘛，这还不简单？</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">if (side1 &gt; 0 &amp;&amp; side2 &gt; 0 &amp;&amp;side3 &gt; 0 ){\n    // 布拉布拉\n}</code></pre>\n\n<p>我只要写个if不就行啦，确实，然后我们想想接下来我们已经保证了三个都是正整数，然后就是怎么保证任意两边长的平方和等于第三边平方呢？</p>\n<p>毕竟老师上课讲到了if语句的嵌套是合法的对吧，那我继续嵌套就好啦！</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">if (side1 &gt; 0 &amp;&amp; side2 &gt; 0 &amp;&amp;side3 &gt; 0 ){\n    if (Math.pow(side1,2) + Math.pow(side2,2) == Math.pow(side3,2)){\n        System.out.println(true)\n    }\n}</code></pre>\n\n<p>我还用到了<code>Math.pow()</code>这个函数，真强</p>\n<p>对吧？然后呢？这只是一种情况对吧？</p>\n<p>一共应该有三种情况，我们都加上。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">if (side1 &gt; 0 &amp;&amp; side2 &gt; 0 &amp;&amp;side3 &gt; 0 ){\n    if (Math.pow(side1,2) + Math.pow(side2,2) == Math.pow(side3,2)){\n        System.out.println(true)\n    }\n    if (Math.pow(side1,2) + Math.pow(side3,2) == Math.pow(side2,2)){\n        System.out.println(true)\n    }\n    if (Math.pow(side2,2) + Math.pow(side3,2) == Math.pow(side1,2)){\n        System.out.println(true)\n    }\n}</code></pre>\n\n<p>真简单！但是有没有发现一个问题，就是当我们输入负数的时候，程序无法做出反应，这个代码只能输出满足条件的<code>true</code>却不能输出不满足条件的<code>false</code>，怎么办呢？</p>\n<p>简单，我们只需要在外部定义一个布尔变量，初始化为<code>false</code>，只要这些条件都不满足，我在条件语句最后就直接输出它不就好了，然后我们if条件内也需要改一下，因为如果是这样的话，满足条件时就会输出一行<code>true</code>和一行<code>false</code>。</p>\n<p>怎么改呢？</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">boolean isRight = false;\nif (side1 &gt; 0 &amp;&amp; side2 &gt; 0 &amp;&amp;side3 &gt; 0 ){\n    if (Math.pow(side1,2) + Math.pow(side2,2) == Math.pow(side3,2)){\n        isRight = true;\n    }\n    if (Math.pow(side1,2) + Math.pow(side3,2) == Math.pow(side2,2)){\n        isRight = true;\n    }\n    if (Math.pow(side2,2) + Math.pow(side3,2) == Math.pow(side1,2)){\n        isRight = true;\n    }\n}\nSystem.out.println(isRight);</code></pre>\n\n<p>我们只需要改一下就能满足题意了。但是，其实这个代码是还可以简化一下的。</p>\n<p>第一点就是<strong>精度问题</strong>，我们用到了<code>Math.pow()</code>这个函数，但是其实这个函数的底层接受的是<code>double</code>变量，如果我们传递<code>int</code>进去，Java会自动帮我们转换成<code>double</code>（还记得吗？隐式转换！）类型的浮点数再进行运算，但是浮点数由于二进制的原因精度上可能会有所欠缺，所以我建议最好写成乘号相乘，避免一些精度上的失误。</p>\n<p>然后就是语句的一些简化，这里我们用了太多的if语句，其实内部可以简写为一句，运用我们之前刚学的<strong>逻辑或</strong>（<code>||</code>）符号即可。</p>\n<p>更改完代码如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">boolean isRight = false;\nif (side1 &gt; 0 &amp;&amp; side2 &gt; 0 &amp;&amp; side3 &gt; 0) {\n    if (side1 * side1 + side2 * side2 == side3 * side3 ||\n        side1 * side1 + side3 * side3 == side2 * side2 ||\n        side2 * side2 + side3 * side3 == side1 * side1) {\n        isRight = true;\n    }\n}\nSystem.out.println(isRight);\n</code></pre>\n\n<p>可读性和简洁性一下子就上来了，对吧。</p>\n<h3 id=\"完整代码-1\"><a href=\"#完整代码-1\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h3><details class=\"custom-details\">\n<summary>Click to see more</summary>\n<p><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">import java.util.Scanner;\n\npublic class RightTriangle {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        // 输入的三个整数作为边长\n        int side1 = sc.nextInt();\n        int side2 = sc.nextInt();\n        int side3 = sc.nextInt();\n\n        // 判断所有边是否为正整数\n        boolean isPositive = side1 &gt; 0 &amp;&amp; side2 &gt; 0 &amp;&amp; side3 &gt; 0;\n\t\t\n        boolean isRight = false;// 定义变量\n        if (isPositive) {\n            if (side1 * side1 + side2 * side2 == side3 * side3 || \n                side1 * side1 + side3 * side3 == side2 * side2 ||\n                side2 * side2 + side3 * side3 == side1 * side1) {\n                isRight = true;\n            }\n        }\n        System.out.println(isRight);\n    }\n}</code></pre>\n\n</p>\n</details>\n<p>你们知道我最开始写出来的代码长什么样子吗？我都不敢给你看。。。</p>\n<p>算了还是放在这里吧，看不懂也没关系，毕竟我们还没有学方法，但是这个逻辑写得我都想抽自己，上面的是我后来优化的时候写出来的，以上面为准。</p>\n<details class=\"custom-details\">\n<summary>Click to see more</summary>\n<p><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">import java.util.Scanner;\n\npublic class RightTriangle {\n    \n    public static boolean isPositive(int a, int b, int c) {// 判断是否为正整数\n        return a &gt; 0 &amp;&amp; b &gt; 0 &amp;&amp; c &gt; 0;\n    }\n\n    public static int calculateSumOfSquares(int a, int b, int c, int maxSide) {// 分情况计算平方和\n        if (maxSide == a) {\n            return (b * b) + (c * c);\n        } else if (maxSide == b) {\n            return (a * a) + (c * c);\n        } else {\n            return (a * a) + (b * b);\n        }\n    }\n\n    public static boolean isRightTriangle(int a, int b, int c) {// 判断是否满足勾股定理\n        if (!isPositive(a, b, c)) {// 方法复用，先判断是否为正整数\n            return false; \n        }\n\n        int maxSide = Math.max(Math.max(a, b), c);// 寻找三边最大值，最长的一边就是斜边\n        int sumOfSquares = calculateSumOfSquares(a, b, c, maxSide);// 调用方法，计算平方和\n        int squareOfMaxSide = maxSide * maxSide;// 计算斜边平方\n\n        return sumOfSquares == squareOfMaxSide; // 判断平方和是否等于斜边平方\n    }\n\n    public static void main(String[] args) {// 主程序入口\n        Scanner sc = new Scanner(System.in);\n\n        int side1 = sc.nextInt();\n        int side2 = sc.nextInt();\n        int side3 = sc.nextInt();// 接收三个变量\n\n        boolean isRight = isRightTriangle(side1, side2, side3);// 判断\n        System.out.println(isRight);// 输出\n    }\n}</code></pre>\n\n</p>\n</details>\n<h2 id=\"Exercise-3-3-Hailstone-Sequence\"><a href=\"#Exercise-3-3-Hailstone-Sequence\" class=\"headerlink\" title=\"Exercise #3.3 Hailstone Sequence\"></a>Exercise #3.3 Hailstone Sequence</h2><p>好累啊，今天还是中秋节，写这篇文章之前我刚下飞机，现在是第二天凌晨两点半了，撑不住了，先睡觉，明天继续把剩下来的肝完。</p>\n<p>海尔斯通序列的计算方法如下：</p>\n<ul>\n<li>从一个整数 <code>n</code> 开始</li>\n<li>如果 <code>n</code> 是偶数，则序列中的下一个数字是 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.781ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.955ex\" height=\"2.379ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -706.5 864.3 1051.5\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mfrac\"><g data-mml-node=\"mi\" transform=\"translate(220,394) scale(0.707)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(255.4,-345) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><rect width=\"624.3\" height=\"60\" x=\"120\" y=\"220\"></rect></g></g></g></svg></mjx-container></li>\n<li>如果 <code>n</code> 是奇数，则下一个数字是 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.186ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"6.386ex\" height=\"1.692ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -666 2822.4 748\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mn\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(500,0)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1322.2,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(2322.4,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g></g></svg></mjx-container></li>\n<li>继续计算，直到到达 <code>1</code></li>\n</ul>\n<p>例如</p>\n<p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.186ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"5.506ex\" height=\"1.69ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -665 2433.6 747\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(877.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(1933.6,0)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path></g></g></g></svg></mjx-container> 时，序列为 <code>3、10、5、16、8、4、2、1</code><br><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.186ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"6.637ex\" height=\"1.692ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -666 2933.6 748\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(877.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(1933.6,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\" transform=\"translate(500,0)\"></path></g></g></g></svg></mjx-container> 时，序列为 <code>12, 6, 3, 10, 5, 16, 8, 4, 2, 1</code></p>\n<p>编写一个 Java 程序 <code>HailStone</code>，在输入正整数 <code>n</code> 时，打印从 <code>n</code> 开始的 <code>Hailstone</code> 序列的长度。</p>\n<p>测试用例：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">Test case 1:\nInput:\n3\nOutput:\n8\n\nTest case 2:\nInput:\n12\nOutput:\n10</code></pre>\n\n<h3 id=\"题目分析-2\"><a href=\"#题目分析-2\" class=\"headerlink\" title=\"题目分析\"></a>题目分析</h3><p>这个题属于是前面两个练习的结合，但是是属于非常简单，非常直观的结合，感觉不需要很费劲的去写这道题的思路分析，我就简单写一下，明确我们需要什么就好了。</p>\n<p><strong>目标：</strong></p>\n<ol>\n<li>我们需要编写一个 Java 程序，接受输入的正整数 <code>n</code>。</li>\n<li>根据规则计算从 <code>n</code> 开始的海尔斯通序列，直到序列中的数字变为 <code>1</code>。</li>\n<li>在计算过程中，我们需要追踪序列的长度。</li>\n<li>最终，我们需要打印出这个序列的长度。</li>\n</ol>\n<p>对吧，那就很明显了，其中牵扯到奇数和偶数的判断，这就涉及到了if条件语句，然后又需要不断的迭代去寻找数列并且要记录长度，这就牵扯到了循环，这都是一目了然的事情。</p>\n<p>所以，怎么解决呢？</p>\n<p>首先，我们需要一个变量来表示序列的长度，初始化为1。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">int sequenceLength = 1;</code></pre>\n\n<p>然后，我们可以使用一个循环来计算序列，直到 <code>n</code> 变为 <code>1</code>。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">while (n != 1) {\n    // 布拉布拉\n}</code></pre>\n\n<p>在循环中，我们需要根据奇偶性分别执行不同的操作：</p>\n<ul>\n<li>如果 <code>n</code> 是偶数，将 <code>n</code> 除以 2。</li>\n<li>如果 <code>n</code> 是奇数，将 <code>n</code> 乘以 3 并加 1。</li>\n<li>在每一步中，将序列长度加 1。</li>\n</ul>\n<p>当 <code>n</code> 变为 <code>1</code> 时，循环结束。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">while (n != 1) {\n    // 如果 n 是偶数\n    if (n % 2 == 0) {\n        n = n / 2;\n    } else {  // 如果 n 是奇数\n        n = 3 * n + 1;\n    }\n    sequenceLength++;  // 每次操作后，序列长度加 1\n}</code></pre>\n\n<p>最后，我们打印出序列的长度。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">System.out.println(sequenceLength);</code></pre>\n\n<p>整体非常的简单，可以说是一目了然。</p>\n<h3 id=\"完整代码-2\"><a href=\"#完整代码-2\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h3><p>我的代码牵扯到一些方法的知识，可以先尝试看看能不能读懂，其实没有想的那么高大上，只不过最开始写的时候习惯了。。。</p>\n<p>当然你可以按照上面的来写，也是很简单的。</p>\n<details class=\"custom-details\">\n<summary>Click to see more</summary>\n<p><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">import java.util.Scanner;\n\npublic class HailStone {\n    \n    public static int hailstoneLength(int n) {\n            int sequenceLength = 1; // 初始化序列长度为 1\n\n            while (n != 1) {\n                if (n % 2 == 0) {\n                    n = n / 2; // 如果 n 是偶数，下一个数是 n/2\n                } else {\n                    n = (3 * n) + 1; // 如果 n 是奇数，下一个数是 3n+1\n                }\n\n                sequenceLength++; // 序列长度加 1\n            }\n\n            return sequenceLength;\n        }\n\n        public static void main(String[] args) {\n            Scanner sc = new Scanner(System.in);\n\n            int n = sc.nextInt();\n\n            int sequenceLength = hailstoneLength(n);\n            System.out.println(sequenceLength);\n        }\n}</code></pre>\n\n</p>\n</details>\n<h2 id=\"CW1-3-1-Armstrong-Numbers\"><a href=\"#CW1-3-1-Armstrong-Numbers\" class=\"headerlink\" title=\"CW1 #3.1 Armstrong Numbers\"></a>CW1 #3.1 Armstrong Numbers</h2><p>这可是重头戏，我都有点不想一步一步讲了，算了先看题吧。 </p>\n<p>阿姆斯特朗数是一个 <code>n</code> 位数，等于其 <code>n</code> 次幂的总和。<br>例如</p>\n<ul>\n<li><code>153</code> 是一个三位数，个位数的立方之和等于 <code>153</code></li>\n<li><code>1634</code> 是一个四位数，个位数的 <code>4</code> 次方之和等于 <code>1634</code></li>\n</ul>\n<p><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.186ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"43.179ex\" height=\"2.203ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -891.7 19085.2 973.7\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"35\" d=\"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z\" transform=\"translate(500,0)\"></path><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\" transform=\"translate(1000,0)\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1777.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(2833.6,0)\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(533,413) scale(0.707)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(3992.3,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(4992.6,0)\"><g data-mml-node=\"mn\"><path data-c=\"35\" d=\"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(533,413) scale(0.707)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(6151.3,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(7151.6,0)\"><g data-mml-node=\"mn\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(533,413) scale(0.707)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path></g></g><g data-mml-node=\"mtext\" transform=\"translate(8088.1,0)\"><path data-c=\"A0\" d=\"\"></path></g><g data-mml-node=\"mn\" transform=\"translate(8338.1,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"36\" d=\"M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z\" transform=\"translate(500,0)\"></path><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\" transform=\"translate(1000,0)\"></path><path data-c=\"34\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\" transform=\"translate(1500,0)\"></path></g><g data-mml-node=\"mo\" transform=\"translate(10615.9,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(11671.7,0)\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(533,413) scale(0.707)\"><path data-c=\"34\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(12830.4,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(13830.7,0)\"><g data-mml-node=\"mn\"><path data-c=\"36\" d=\"M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(533,413) scale(0.707)\"><path data-c=\"34\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(14989.4,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(15989.7,0)\"><g data-mml-node=\"mn\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(533,413) scale(0.707)\"><path data-c=\"34\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(17148.4,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(18148.7,0)\"><g data-mml-node=\"mn\"><path data-c=\"34\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(533,413) scale(0.707)\"><path data-c=\"34\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\"></path></g></g></g></g></svg></mjx-container></p>\n<p>编写一个 Java 程序 <code>Armstrong</code>，输入两个正整数 <code>a</code> 和 <code>k</code>、<br>打印前 <code>k</code> 个大于或等于 <code>a</code> 的阿姆斯特朗数。</p>\n<p>测试用例：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">Test case 1:\nInput:\n100\n2\nOutput:\n153\n370\n\nTest case 2:\nInput:\n1500\n1\nOutput:\n1634</code></pre>\n\n<h3 id=\"题目分析-3\"><a href=\"#题目分析-3\" class=\"headerlink\" title=\"题目分析\"></a>题目分析</h3><p>呃一时不知道该怎么起手，先看这个数字，这个数字要求它的每一位数的某个次方之和等于它自己。</p>\n<p>举个例子就是，如果输入 <code>a = 1</code> 和 <code>k = 5</code>，那么程序应该输出前五个大于或等于 <code>1</code> 的阿姆斯特朗数。输出如下：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">1\n2\n3\n4\n5</code></pre>\n\n<p>这里的输出是前五个大于或等于 <code>1</code> 的阿姆斯特朗数。</p>\n<p>这里我们就直接跳过变量初始化，然后<code>Scanner</code>之类的了，过于麻烦，而且我不相信还有人不会。</p>\n<p>ok，接下来就是分块来思考，我们需要哪些功能。</p>\n<h4 id=\"位数获取\"><a href=\"#位数获取\" class=\"headerlink\" title=\"位数获取\"></a>位数获取</h4><p>首先我们需要知道给出的数字的位数是多少对吧，也就是说这个数字的长度是多少。</p>\n<p>其实可以直接使用一个方法，可能没学过，但是无所谓，现在教给你，那就是<code>String.valueOf()</code>，然后我们再使用<code>length()</code>方法即可，那么，什么意思？</p>\n<p><code>String.valueOf()</code>会将传入的<code>int</code>转换成<code>String</code>类型的字符串再返回，然后再通过<code>length()</code>方法就可以知道这个字符串的长度了。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">int a = 10;\nint digit = String.valueOf(a).length();\nSystem.out.println(digit);</code></pre>\n\n<p>就会输出</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">2</code></pre>\n\n<p>当然还有一种更难的方法，牵扯到了一点<strong>递归</strong>的知识，看不懂没关系，可以体会一下，我先把代码放在这里，然后再简单讲解一下，如果看不懂也无所谓，本来我也想用while循环的，但是最后写出来的代码时间复杂度略高。。。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public static int countDigits(int number) {\n        if (number == 0) {\n            return 0;\n        }\n        return 1 + countDigits(number / 10);\n    }</code></pre>\n\n<p>当我们遇到一个大问题时，递归就像是把它变成了一堆相同或类似的小问题。我们通过解决这些小问题来解决整个大问题。</p>\n<p>想象一下，你有一个大盒子里面有很多小盒子，每个小盒子里又有更小的盒子，以此类推，直到最小的盒子里没有其他盒子为止。</p>\n<p>递归就是一种类似的思想。</p>\n<p>在编程中，我们可以写一个函数，这个函数可以<strong>调用自己</strong>。当我们调用这个函数时，它会解决一个小问题，然后再调用自己来解决更小的问题。这个过程会一直持续下去，直到我们解决了最小的问题，然后逐层返回结果，最终得到整个问题的解。</p>\n<p>举个例子，假设我们要计算一个数的位数。我们可以把这个问题分解为计算这个数除以 10 的结果的位数，然后再加上 1。这个过程会一直重复，直到我们的数变成 0，这时我们就知道它的位数是多少了。</p>\n<p>递归就像是一个问题的拆解过程，将大问题变成了一系列更小的问题，然后通过递归调用来解决这些小问题，最终得到整个问题的解答。</p>\n<p>一般递归的形式就是让方法自己调用自己，但是要设定跳出的条件，不然就会无限递归，导致爆栈。。</p>\n<p>接着我们再简单看一下这个代码：</p>\n<p>这段代码是一个<strong>递归函数</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public static int countDigits(int number) {</code></pre>\n\n<p>这是静态方法，它接受一个整数参数 <code>number</code>，并返回一个整数作为结果。函数名为 <code>countDigits</code>。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">if (number == 0) {\n    return 0;\n}</code></pre>\n\n<p>这是递归函数的终止条件。如果输入的 <code>number</code> 等于 0，说明已经处理完所有位数，直接返回 0。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">return 1 + countDigits(number / 10);</code></pre>\n\n<p>这是递归调用的部分。如果输入的 <code>number</code> 不等于 0，将 <code>number</code> 除以 10，可以得到去掉最右边一位的结果。然后将这个结果传递给 <code>countDigits</code> 函数，继续递归计算剩余位数的数量。最后，将递归结果加上 1，表示当前位数，并返回。</p>\n<p>递归函数的基本思想是将一个大问题分解为一个或多个相同的小问题，并通过递归调用来解决这些小问题，最终得到整个问题的解。在这个例子中，通过每次除以 10 来逐渐缩小数字的范围，直到数字变为 0，从而计算出整数的位数。</p>\n<p>好吧，反正无所谓，感觉第一种更好用。</p>\n<h4 id=\"获取每一位上的数字\"><a href=\"#获取每一位上的数字\" class=\"headerlink\" title=\"获取每一位上的数字\"></a>获取每一位上的数字</h4><p>然后下一步就是我们如何获得这个数字每一位上的数字，因为我们需要分别拿每一位上的数字进行平方和相加，对吧，这一部分我来想想怎么获取每一位上的数字。</p>\n<p>这个其实在lab上有一个部分已经涉及了，就是怎么将数字反转。</p>\n<p>用到的方法其实就是我们的取模操作（<code>%</code>）</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">int digit = num % 10;</code></pre>\n\n<p>只要我们每一次对这个数字进行取模操作，每次模于<code>10</code>，就会发现每次的余数刚好是她的个位数字，然后我们在把这个数字除以<code>10</code>，因为是 <code>int</code> 类型，所以就相当于直接删去了个位数字，然后再加入循环就可以做到取出每一位上的数字了。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">while (num != 0){\n          int digit = num % 10;\n          num /= 10;\n      }</code></pre>\n\n<p>这样就拿到了每一个位上的数字，应该不是很难，但是估计有人能发现这个循环有个问题就是还没有进行平方和操作，那么我们就在里面加上一句就行了。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">int numDigits = String.valueOf(num).length();\nint sum = 0;\nwhile (num != 0){\n          int digit = num % 10;\n          sum += Math.pow(digit,numDigits);\n          num /= 10;\n      }</code></pre>\n\n<p>这样我们先通过<code>Math.pow()</code>这个方法计算平方，<code>digit</code>就是每一个位子上的数字，<code>numDigits</code>就是我们上一部分获得的一共有多少位，也就是我们计算的幂，然后再在循环外部先初始化一个<code>sum</code>变量等于<code>0</code>，然后通过赋值操作计算这个数字的平方和即可。</p>\n<h4 id=\"判断是否是Armstrong数字\"><a href=\"#判断是否是Armstrong数字\" class=\"headerlink\" title=\"判断是否是Armstrong数字\"></a>判断是否是Armstrong数字</h4><p>这一步很简单，就在上面的代码基础上就能完成，非常简单，无非就是判断这个数字是不是和计算出来的平方和相等就行了，对吧？</p>\n<p>我们先定义一个变量，用来记录最开始传入的数字，为什么要定义这个变量，因为后续的那个while循环操作会把原来的数字进行操作，如果不记录到时候比较的时候就会出错。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">int originalNum = num;</code></pre>\n\n<p>这里其实我想稍微的涉及一些<strong>方法</strong>相关的知识，如果看不懂也无所谓，后面我会给出一个不用方法的版本。</p>\n<p>首先我简短的提一下什么是方法，方法就是我们在代码当中有很多功能性的一些代码，我们需要重复用到，我们就会把他单独封装出来，为了更方便的使用，比如我们这里就可以定义一个方法叫做<code>isArmstrong</code>，用来判断传入的数字是不是 <code>Armstrong</code> 数字。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public static boolean isArmstrong(int num){ // 定义方法，返回Boolean变量\n      int originalNum = num;// 定义变量记录最初传入的数字\n      int numDigits = String.valueOf(num).length();// 计算传入数字的位数（长度），也就是幂\n      int sum = 0;// 定义一个平方和变量，初始化为0\n\n      while (num != 0){// 循环操作，计算平方和\n          int digit = num % 10;\n          sum += Math.pow(digit,numDigits);\n          num /= 10;\n      }\n      return sum == originalNum; // 比较 平方和 和 最初的数字是否相等，如果相等就返回true，不等就返回false\n  }</code></pre>\n\n<p>如果不懂就看注释吧，如果是 <code>true</code> 就说明这个数字是 <code>Armstrong</code> 数字，反之就不是。</p>\n<h4 id=\"通过循环不断的寻找\"><a href=\"#通过循环不断的寻找\" class=\"headerlink\" title=\"通过循环不断的寻找\"></a>通过循环不断的寻找</h4><p>接下来就是不断的寻找符合要求的数字了呗，那这一步我放到main方法当中好了。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public static void main(String[] args) { // 主入口\n      Scanner sc = new Scanner(System.in);\n\n      int a = sc.nextInt();\n      int k = sc.nextInt(); // 老生常谈，不想说了，看一下a和k分别代表啥\n\n      int count = 0; // 计数器，作为循环的跳出条件\n      int number = a; // 记录数字，a是初始数字，number用来记录后续更新的数字\n\n      while (count &lt; k) { //循环\n          if(isArmstrong(number)){ // 判断是否是Armstrong数字，调用方法，传入number进行判断\n              System.out.println(number);// 打印满足条件的数字\n              count++;//然后计数器加一\n          }\n          number++;// 不管条件是否满足都一直向后更新number的值，用于一直向后遍历寻找\n      }\n  }</code></pre>\n\n<p>这一部分注释已经写得很完整了，应该不需要再多说了。</p>\n<h3 id=\"完整代码-3\"><a href=\"#完整代码-3\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h3><p>带方法版：</p>\n<details class=\"custom-details\">\n<summary>Click to see more</summary>\n<p><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">import java.util.Scanner;\n\npublic class Armstrong {\n    public static boolean isArmstrong(int num){\n        int originalNum = num;\n        int numDigits = String.valueOf(num).length();\n        int sum = 0;\n\n        while (num != 0){\n            int digit = num % 10;\n            sum += Math.pow(digit,numDigits);\n            num /= 10;\n        }\n        return sum == originalNum;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        int a = sc.nextInt();\n        int k = sc.nextInt();\n\n        int count = 0;\n        int number = a;\n\n        while (count &lt; k) {\n            if(isArmstrong(number)){\n                System.out.println(number);\n                count++;\n            }\n            number++;\n        }\n    }\n}</code></pre>\n\n</p>\n</details>\n<p>不带方法版：</p>\n<details class=\"custom-details\">\n<summary>Click to see more</summary>\n<p><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">import java.util.Scanner;\n\npublic class Armstrong {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        int a = sc.nextInt(); // 输入起始数值\n        int k = sc.nextInt(); // 输入要找到的阿姆斯特朗数的个数\n\n        int count = 0; // 计数器，记录已找到的阿姆斯特朗数的个数\n        int number = a; // 当前要检查的数值\n\n        while (count &lt; k) {\n            int originalNum = number; // 保存当前数值，用于后面的比较\n            int numDigits = String.valueOf(number).length(); // 计算当前数值的位数\n            int sum = 0; // 保存每个位上数字的幂和\n\n            int num = number;\n            while (num != 0) {\n                int digit = num % 10; // 取出当前数值的个位数字\n                sum += Math.pow(digit, numDigits); // 计算幂和\n                num /= 10; // 去掉个位数字\n            }\n\n            if (sum == originalNum) { // 如果幂和等于原始数值，说明是阿姆斯特朗数\n                System.out.println(number); // 输出阿姆斯特朗数\n                count++; // 计数器加1\n            }\n            number++; // 继续检查下一个数值\n        }\n    }\n}\n</code></pre>\n\n</p>\n</details>\n<p>终于结束啦！！！累死了。。。</p>\n","text":"这周开始就进入到了条件语句和循环语句了，那么随之而来的就是一些简单的算法题目了，当然对于刚开始接触的人来说还是有些困难的，但是不急，只要把每一步想明白，其实没什么难的，重点在于思路，为什么要用if，为什么要用循环，为什么这个循环是for循环，那个要用while循环，怎么说呢，一定...","link":"","photos":[],"count_time":{"symbolsCount":"16k","symbolsTime":"15 mins."},"categories":[],"tags":[{"name":"笔记","slug":"笔记","count":31,"path":"api/tags/笔记.json"},{"name":"Java初学","slug":"Java初学","count":10,"path":"api/tags/Java初学.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Exercise-3-1-Pandemic-Spread\"><span class=\"toc-text\">Exercise #3.1 Pandemic Spread</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E5%88%86%E6%9E%90\"><span class=\"toc-text\">题目分析</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%8C%E6%95%B4%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">完整代码</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Exercise-3-2-Right-Triangle\"><span class=\"toc-text\">Exercise #3.2 Right Triangle</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E5%88%86%E6%9E%90-1\"><span class=\"toc-text\">题目分析</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%8C%E6%95%B4%E4%BB%A3%E7%A0%81-1\"><span class=\"toc-text\">完整代码</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Exercise-3-3-Hailstone-Sequence\"><span class=\"toc-text\">Exercise #3.3 Hailstone Sequence</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E5%88%86%E6%9E%90-2\"><span class=\"toc-text\">题目分析</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%8C%E6%95%B4%E4%BB%A3%E7%A0%81-2\"><span class=\"toc-text\">完整代码</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#CW1-3-1-Armstrong-Numbers\"><span class=\"toc-text\">CW1 #3.1 Armstrong Numbers</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E5%88%86%E6%9E%90-3\"><span class=\"toc-text\">题目分析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BD%8D%E6%95%B0%E8%8E%B7%E5%8F%96\"><span class=\"toc-text\">位数获取</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%8E%B7%E5%8F%96%E6%AF%8F%E4%B8%80%E4%BD%8D%E4%B8%8A%E7%9A%84%E6%95%B0%E5%AD%97\"><span class=\"toc-text\">获取每一位上的数字</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E6%98%AFArmstrong%E6%95%B0%E5%AD%97\"><span class=\"toc-text\">判断是否是Armstrong数字</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%80%9A%E8%BF%87%E5%BE%AA%E7%8E%AF%E4%B8%8D%E6%96%AD%E7%9A%84%E5%AF%BB%E6%89%BE\"><span class=\"toc-text\">通过循环不断的寻找</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%8C%E6%95%B4%E4%BB%A3%E7%A0%81-3\"><span class=\"toc-text\">完整代码</span></a></li></ol></li></ol>","author":{"name":"General_K1ng","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/GeneralK1ng/My_Blog_IMG@main/img/avatar.png","link":"/","description":"一名正在努力学习计算机的菜鸟","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/BILIBILI.svg","link":"https://space.bilibili.com/32927332"},"csdn":{"icon":"/svg/csdn.svg","link":"https://blog.csdn.net/qq_34849354"},"github":{"icon":"/svg/GitHub.svg","link":"https://github.com/GeneralK1ng"},"QQ":{"icon":"/svg/QQ.svg","link":"tencent://AddContact/?fromId=45&fromSubId=1&subcmd=all&uin=2645370205"},"WeChat":{"icon":"/svg/wechat.svg","link":null}}}},"mapped":true,"prev_post":{"title":"Java_Learning(Week4)","uid":"a8c731e8e4e06940923b6b0b44a5b222","slug":"Java-Learning-Week4","date":"2023-10-09T10:37:13.000Z","updated":"2023-10-09T13:00:16.629Z","comments":true,"path":"api/articles/Java-Learning-Week4.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/GeneralK1ng/My_Blog_IMG@main/img/codeBackground.png","text":"有一说一，咱们学校这个课的进度是真的赶啊，这才几节课就到数组和方法了。。 循环补充什么？原来上周没有讲什么是For循环，那我上周笔记不就多写了！ 怪不得感觉上周写的这么多。。。算了无所谓了，那么这里就来补充一些上周没有提到的东西。 break关键字break 关键字用于立即退出当...","link":"","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[],"tags":[{"name":"笔记","slug":"笔记","count":31,"path":"api/tags/笔记.json"},{"name":"Java初学","slug":"Java初学","count":10,"path":"api/tags/Java初学.json"}],"author":{"name":"General_K1ng","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/GeneralK1ng/My_Blog_IMG@main/img/avatar.png","link":"/","description":"一名正在努力学习计算机的菜鸟","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/BILIBILI.svg","link":"https://space.bilibili.com/32927332"},"csdn":{"icon":"/svg/csdn.svg","link":"https://blog.csdn.net/qq_34849354"},"github":{"icon":"/svg/GitHub.svg","link":"https://github.com/GeneralK1ng"},"QQ":{"icon":"/svg/QQ.svg","link":"tencent://AddContact/?fromId=45&fromSubId=1&subcmd=all&uin=2645370205"},"WeChat":{"icon":"/svg/wechat.svg","link":null}}}}},"next_post":{"title":"Java_Learning(Week 3)","uid":"40a5a3eda9f47ccd7f66db869eb2a067","slug":"Java-Learning-Week-3","date":"2023-09-25T08:09:43.000Z","updated":"2023-10-09T10:39:58.626Z","comments":true,"path":"api/articles/Java-Learning-Week-3.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/GeneralK1ng/My_Blog_IMG@main/img/codeBackground.png","text":"什么是布尔类型？呃其实上周笔记应该都讲了，这周不知道为什么又提到了，那就再稍微过一下，什么是布尔类型呢？ boolean： boolean数据类型表示一位的信息； 只有两个取值：true 和 false； 这种类型只作为一种标志来记录 true/false 情况； 默认值是 fa...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[],"tags":[{"name":"笔记","slug":"笔记","count":31,"path":"api/tags/笔记.json"},{"name":"Java初学","slug":"Java初学","count":10,"path":"api/tags/Java初学.json"}],"author":{"name":"General_K1ng","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/GeneralK1ng/My_Blog_IMG@main/img/avatar.png","link":"/","description":"一名正在努力学习计算机的菜鸟","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/BILIBILI.svg","link":"https://space.bilibili.com/32927332"},"csdn":{"icon":"/svg/csdn.svg","link":"https://blog.csdn.net/qq_34849354"},"github":{"icon":"/svg/GitHub.svg","link":"https://github.com/GeneralK1ng"},"QQ":{"icon":"/svg/QQ.svg","link":"tencent://AddContact/?fromId=45&fromSubId=1&subcmd=all&uin=2645370205"},"WeChat":{"icon":"/svg/wechat.svg","link":null}}}}}}