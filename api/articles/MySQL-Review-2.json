{"title":"MySQL Review-2","uid":"931d32a5aa688f1d603d588de90831ae","slug":"MySQL-Review-2","date":"2023-12-02T05:52:17.000Z","updated":"2023-12-06T09:47:18.341Z","comments":true,"path":"api/articles/MySQL-Review-2.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/GeneralK1ng/My_Blog_IMG@main/img/MySQL-image.png","content":"<p>今天继续复习数据库，顺序就按照学校的来，我也不知道从哪里开始讲。</p>\n<h1 id=\"什么是SQL？\"><a href=\"#什么是SQL？\" class=\"headerlink\" title=\"什么是SQL？\"></a>什么是SQL？</h1><p><code>SQL</code>的全称是 <strong>“Structured Query Language”</strong>，也就是结构化查询语言，是一种用于访问和处理数据库的标准的计算机语言。</p>\n<h2 id=\"SQL可以干什么？\"><a href=\"#SQL可以干什么？\" class=\"headerlink\" title=\"SQL可以干什么？\"></a>SQL可以干什么？</h2><p><code>SQL</code>主要分为两种，一种是<code>DDL</code>（<strong>Data Definition Language</strong>），另一种是<code>DML</code>（<strong>Data Manipulation Language</strong>）。</p>\n<p><strong>DDL（数据定义语言）：</strong></p>\n<ul>\n<li><strong>解释：</strong> DDL 是用于定义和管理数据库结构的语言。</li>\n<li><strong>比喻：</strong> 想象数据库是一个房子，DDL 就像是建造房子的工具和规划图。它负责定义房子的基本结构，比如房间的数量、形状，以及窗户、门等的位置。</li>\n<li><strong>例子：</strong> 如果你想在数据库中创建一个新的表格来存储学生信息，你会使用DDL 来定义这个表格的结构，包括每个字段的类型和大小。</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">CREATE TABLE 学生表 (\n    姓名 VARCHAR(50),\n    年龄 INT,\n    成绩 FLOAT\n);</code></pre>\n\n<p><strong>DML（数据操作语言）：</strong></p>\n<ul>\n<li><strong>解释：</strong> DML 是用于操作（添加、修改、删除）数据库中实际数据的语言。</li>\n<li><strong>比喻：</strong> 如果 DDL 是用来规划和建造房子的工具，那么 DML 就是用来在房子里进行装修和整理的工具。</li>\n<li><strong>例子：</strong> 如果你想在学生表中添加一条新的学生记录，你会使用 DML。</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">INSERT INTO 学生表 (姓名, 年龄, 成绩) VALUES ('小明', 15, 95);</code></pre>\n\n<h2 id=\"建立表格\"><a href=\"#建立表格\" class=\"headerlink\" title=\"建立表格\"></a>建立表格</h2><p>当你使用MySQL建表时，可以把表想象成一个电子表格，每个表格有一些列（字段），每列代表一种数据类型，而每一行则代表一条记录。</p>\n<p>这就是一般建表的语法：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">CREATE TABLE 表名 (\n    列1 数据类型,\n    列2 数据类型,\n    列3 数据类型,\n    ...\n);</code></pre>\n\n<p>现在，我们可以通过一个具体的例子来说明。假设我们要创建一个存储学生信息的表，包括学生ID、姓名、年龄和成绩。我们可以这样写：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">CREATE TABLE 学生表 (\n    学生ID INT,\n    姓名 VARCHAR(50),\n    年龄 INT,\n    成绩 FLOAT\n);</code></pre>\n\n<p>在这个例子中，我们创建了一个名为“学生表”的表，其中包含了四个列：学生ID（整数类型）、姓名（最大长度为50的字符串类型）、年龄（整数类型）和成绩（浮点数类型）。</p>\n<ol>\n<li><strong>表名：</strong> 就像给一个文件起名一样，我们给我们的表起了一个名字，这个表的名字叫做“学生表”。</li>\n<li><strong>列名和数据类型：</strong> 就像填写一个表格一样，我们定义了表格的每一列。例如，学生表中有学生ID、姓名、年龄和成绩这四列。而每一列都有对应的数据类型，比如学生ID是整数类型，姓名是字符串类型，年龄也是整数类型，成绩是浮点数类型。</li>\n</ol>\n<h3 id=\"命名对象注意规范\"><a href=\"#命名对象注意规范\" class=\"headerlink\" title=\"命名对象注意规范\"></a>命名对象注意规范</h3><p>在MySQL中，命名对象（例如表名、列名、数据库名等）时，你会经常看到使用引号（单引号或双引号）或反引号（`）来括住这些名称。它们的使用有一些区别：</p>\n<ol>\n<li><strong>单引号和双引号：</strong><ul>\n<li>单引号（'）和双引号（\"）在MySQL中通常用于表示字符串值。例如，<code>SELECT * FROM 表 WHERE 列 = '某个值';</code>。</li>\n<li>但是，当命名数据库对象（如表名、列名）时，单引号和双引号并不是标准的用法，而通常使用反引号。</li>\n</ul>\n</li>\n<li><strong>反引号（`）：</strong><ul>\n<li>在MySQL中，反引号主要用于标识数据库对象的名称，如表名、列名等。它是MySQL中用于引用标识符（identifiers）的一种方式。</li>\n<li>使用反引号可以确保MySQL正确解释标识符，即使标识符中包含了MySQL关键字或特殊字符。</li>\n<li>举例说明，在使用反引号的情况下，你可以创建一个包含空格的列名：CREATE TABLE 表名 (`有空格的列` INT);</li>\n</ul>\n</li>\n</ol>\n<p>举例来说明：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">-- 使用反引号命名表名和列名\nCREATE TABLE `学生表` (\n    `学生ID` INT,\n    `姓名` VARCHAR(50),\n    `年龄` INT,\n    `成绩` FLOAT\n);\n\n-- 查询数据时也要使用反引号\nSELECT `学生ID`, `姓名` FROM `学生表` WHERE `年龄` &gt; 18;</code></pre>\n\n<h1 id=\"MySQL中的数据类型\"><a href=\"#MySQL中的数据类型\" class=\"headerlink\" title=\"MySQL中的数据类型\"></a>MySQL中的数据类型</h1><h2 id=\"整数类型：\"><a href=\"#整数类型：\" class=\"headerlink\" title=\"整数类型：\"></a><strong>整数类型：</strong></h2><ul>\n<li><strong>TINYINT:</strong><ul>\n<li>范围：-128 到 127 （有符号），0 到 255 （无符号）</li>\n<li>存储空间：1字节</li>\n</ul>\n</li>\n<li><strong>SMALLINT:</strong><ul>\n<li>范围：-32,768 到 32,767 （有符号），0 到 65,535 （无符号）</li>\n<li>存储空间：2字节</li>\n</ul>\n</li>\n<li><strong>MEDIUMINT:</strong><ul>\n<li>范围：-8,388,608 到 8,388,607 （有符号），0 到 16,777,215 （无符号）</li>\n<li>存储空间：3字节</li>\n</ul>\n</li>\n<li><strong>INT (INTEGER):</strong><ul>\n<li>范围：-2,147,483,648 到 2,147,483,647 （有符号），0 到 4,294,967,295 （无符号）</li>\n<li>存储空间：4字节</li>\n</ul>\n</li>\n<li><strong>BIGINT:</strong><ul>\n<li>范围：-9,223,372,036,854,775,808 到 9,223,372,036,854,775,807 （有符号），0 到 18,446,744,073,709,551,615 （无符号）</li>\n<li>存储空间：8字节</li>\n</ul>\n</li>\n</ul>\n<p><strong>注意事项：</strong></p>\n<ul>\n<li>在上述范围内，有符号整数类型的范围是从负数到正数，而无符号整数类型的范围是从0到正数。</li>\n<li>要注意的是，选择整数类型时，应根据存储需求选择合适的类型，以避免浪费存储空间。如果知道数据永远不会为负，可以考虑使用无符号整数类型，这将扩大可表示的正数范围。</li>\n</ul>\n<h2 id=\"浮点数和定点数类型：\"><a href=\"#浮点数和定点数类型：\" class=\"headerlink\" title=\"浮点数和定点数类型：\"></a><strong>浮点数和定点数类型：</strong></h2><p><strong>1. 浮点数类型:</strong></p>\n<ul>\n<li><code>FLOAT</code>和<code>DOUBLE</code>是MySQL中用于存储浮点数的数据类型。</li>\n<li><code>FLOAT</code>存储单精度浮点数，占用4字节。</li>\n<li><code>DOUBLE</code>存储双精度浮点数，占用8字节。</li>\n</ul>\n<p><strong>注意事项：</strong></p>\n<ul>\n<li>浮点数在表示小数时可能存在精度问题，因为它们是以二进制形式存储的。</li>\n<li>在科学计算等需要广范围和较高精度的场景中使用。</li>\n</ul>\n<p><strong>例子：</strong></p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">CREATE TABLE 浮点数表 (\n    列1 FLOAT,\n    列2 DOUBLE\n);</code></pre>\n\n<p><strong>2. 定点数类型:</strong></p>\n<ul>\n<li><code>DECIMAL</code>是MySQL中用于存储定点数的数据类型，也称为精确数值类型。</li>\n<li><code>DECIMAL</code>用于确保小数的精确性，而不会受到浮点数精度问题的影响。</li>\n<li><code>DECIMAL</code>存储的小数点位数是固定的，通过指定精度和小数位数来定义。</li>\n</ul>\n<p><strong>注意事项：</strong></p>\n<ul>\n<li>适用于需要高精度计算，如货币或其他需要精确小数位的场景。</li>\n<li>占用的存储空间和定义的精度和小数位数相关。</li>\n</ul>\n<p><strong>例子：</strong></p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">CREATE TABLE 定点数表 (\n    列1 DECIMAL(10, 2),\n    列2 DECIMAL(8, 4)\n);</code></pre>\n\n<p>在这个例子中，<code>DECIMAL(10, 2)</code>表示总共10位数，其中包括2位小数；而<code>DECIMAL(8, 4)</code>表示总共8位数，其中包括4位小数。</p>\n<p>总体而言，选择浮点数还是定点数取决于应用的需求。如果需要高精度，特别是在与货币相关的场景中，建议使用<code>DECIMAL</code>。如果对精度要求相对较低，而且需要处理大量数据，可以考虑使用<code>FLOAT</code>或<code>DOUBLE</code>。</p>\n<h2 id=\"字符串类型：\"><a href=\"#字符串类型：\" class=\"headerlink\" title=\"字符串类型：\"></a><strong>字符串类型：</strong></h2><p>在MySQL中，有几种常见的字符串类型，包括<code>CHAR</code>、<code>VARCHAR</code>、<code>TEXT</code>。这些类型之间有一些关键的区别，主要涉及存储方式、长度限制和性能等方面。</p>\n<p><strong>CHAR:</strong></p>\n<ul>\n<li><code>CHAR</code>是一种固定长度的字符串类型，即使存储的字符串长度不足，也会占用指定长度的空间。</li>\n<li>例如，如果定义了一个<code>CHAR(10)</code>，那么不管实际存储的字符串是”abc”还是”abcdefghij”，都会占用10个字符的存储空间。</li>\n</ul>\n<p><strong>注意事项：</strong></p>\n<ul>\n<li>适用于存储长度固定的字符串，比如存储国家代码或其他长度一致的数据。</li>\n<li>如果存储的字符串长度变化较大，可能会浪费存储空间。</li>\n</ul>\n<p><strong>例子：</strong></p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">CREATE TABLE 字符表 (\n    列1 CHAR(10),\n    列2 CHAR(50)\n);</code></pre>\n\n<p><strong>VARCHAR:</strong></p>\n<ul>\n<li><code>VARCHAR</code>是一种可变长度的字符串类型，它只占用存储的实际数据长度加上一些额外的字节。</li>\n<li>例如，如果定义了一个<code>VARCHAR(10)</code>，实际存储的字符串是”abc”，那么只会占用4个字符的存储空间（3个字符的数据加上一个用于存储长度的字节）。</li>\n</ul>\n<p><strong>注意事项：</strong></p>\n<ul>\n<li>适用于存储长度变化较大的字符串，可以节省存储空间。</li>\n<li><code>VARCHAR</code>最大长度受数据库引擎的限制。</li>\n</ul>\n<p><strong>例子：</strong></p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">CREATE TABLE 可变字符表 (\n    列1 VARCHAR(10),\n    列2 VARCHAR(50)\n);</code></pre>\n\n<p><strong>TEXT:</strong></p>\n<ul>\n<li><code>TEXT</code>用于存储大文本数据，可以存储较长的字符串。</li>\n<li>与<code>VARCHAR</code>不同，<code>TEXT</code>没有指定长度，可以存储非常大的文本数据。</li>\n</ul>\n<p><strong>注意事项：</strong></p>\n<ul>\n<li>适用于存储非常长的文本数据，如文章内容、日志等。</li>\n<li><code>TEXT</code>类型的数据在排序和索引上的性能可能不如<code>CHAR</code>和<code>VARCHAR</code>。</li>\n</ul>\n<p><strong>例子：</strong></p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">CREATE TABLE 文本表 (\n    列1 TEXT,\n    列2 LONGTEXT\n);</code></pre>\n\n<p>总体而言，选择哪种字符串类型取决于实际的数据需求。如果字符串长度是固定的，使用<code>CHAR</code>可能更为合适。如果长度变化较大，但不会超过某个限定值，使用<code>VARCHAR</code>。如果需要存储非常长的文本数据，使用<code>TEXT</code>。</p>\n<h2 id=\"日期和时间类型：\"><a href=\"#日期和时间类型：\" class=\"headerlink\" title=\"日期和时间类型：\"></a><strong>日期和时间类型：</strong></h2><p><strong>DATE:</strong></p>\n<ul>\n<li><code>DATE</code>用于存储日期，不包含时间部分。</li>\n<li>格式为’YYYY-MM-DD’。</li>\n</ul>\n<p><strong>注意事项：</strong></p>\n<ul>\n<li>适用于存储不需要精确到时分秒的日期信息。</li>\n</ul>\n<p><strong>TIME:</strong></p>\n<ul>\n<li><code>TIME</code>用于存储时间，不包含日期部分。</li>\n<li>格式为’HH:MM:SS’。</li>\n</ul>\n<p><strong>注意事项：</strong></p>\n<ul>\n<li>适用于存储不需要日期信息的时间。</li>\n</ul>\n<p><strong>DATETIME:</strong></p>\n<ul>\n<li><code>DATETIME</code>用于存储日期和时间。</li>\n<li>格式为’YYYY-MM-DD HH:MM:SS’。</li>\n</ul>\n<p><strong>注意事项：</strong></p>\n<ul>\n<li>适用于需要同时存储日期和时间的情况。</li>\n</ul>\n<p><strong>TIMESTAMP:</strong></p>\n<ul>\n<li><code>TIMESTAMP</code>也用于存储日期和时间。</li>\n<li>格式为’YYYY-MM-DD HH:MM:SS’。</li>\n<li><code>TIMESTAMP</code>还具有特殊的自动更新功能，即当记录插入或更新时，<code>TIMESTAMP</code>列会自动更新为当前时间戳。</li>\n</ul>\n<p><strong>注意事项：</strong></p>\n<ul>\n<li>适用于需要记录时间戳并且可能需要自动更新的情况。</li>\n</ul>\n<p>总的来说，选择日期和时间类型取决于存储需求。如果只需要日期或时间，可以选择<code>DATE</code>或<code>TIME</code>。如果需要同时存储日期和时间，可以选择<code>DATETIME</code>或<code>TIMESTAMP</code>。在选择时还需要考虑是否需要自动更新功能。</p>\n<h2 id=\"枚举和集合类型：\"><a href=\"#枚举和集合类型：\" class=\"headerlink\" title=\"枚举和集合类型：\"></a><strong>枚举和集合类型：</strong></h2><p>在MySQL中，枚举（ENUM）和集合（SET）是用于存储一组离散值的数据类型。它们允许你定义一组可能的值，然后将某一列的值限制在这个集合内。以下是它们的详细解释：</p>\n<p><strong>ENUM:</strong></p>\n<ul>\n<li><code>ENUM</code>用于存储一组预定义的可能取值。</li>\n<li>你可以在定义列的时候列举出所有可能的取值，然后在数据表中存储这些取值中的一个。</li>\n<li>例如，<code>ENUM('男', '女')</code>表示这个列的值只能是’男’或’女’中的一个。</li>\n</ul>\n<p><strong>注意事项：</strong></p>\n<ul>\n<li><code>ENUM</code>适用于有限且固定的取值集合。</li>\n<li>存储的值是按照定义时的顺序来排序的。</li>\n</ul>\n<p><strong>例子：</strong></p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">CREATE TABLE 枚举表 (\n    列1 ENUM('小', '中', '大')\n);</code></pre>\n\n<p><strong>SET:</strong></p>\n<ul>\n<li><code>SET</code>也用于存储一组预定义的可能取值，但不同于<code>ENUM</code>，<code>SET</code>允许存储多个值，这些值是由逗号分隔的。</li>\n<li>例如，<code>SET('篮球', '足球', '乒乓球')</code>表示这个列的值可以是单个选项，也可以是多个选项的组合，如’篮球’、’足球’、’篮球,乒乓球’等。</li>\n</ul>\n<p><strong>注意事项：</strong></p>\n<ul>\n<li><code>SET</code>适用于有限的且可以组合的取值集合。</li>\n<li>存储的值是按照插入时的顺序来排序的。</li>\n</ul>\n<p><strong>例子：</strong></p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">CREATE TABLE 集合表 (\n    列1 SET('苹果', '橙子', '香蕉')\n);</code></pre>\n\n<p>这玩意可不常用，起码目前我还没用过。</p>\n<h2 id=\"二进制类型：\"><a href=\"#二进制类型：\" class=\"headerlink\" title=\"二进制类型：\"></a><strong>二进制类型：</strong></h2><p>在MySQL中，二进制类型用于存储二进制数据，例如图像、音频、视频等二进制文件。以下是MySQL中常见的二进制类型：</p>\n<p><strong>BINARY 和 VARBINARY:</strong></p>\n<ul>\n<li><code>BINARY</code>和<code>VARBINARY</code>用于存储二进制数据，其中<code>BINARY</code>是定长的，而<code>VARBINARY</code>是变长的。</li>\n<li>例如，<code>BINARY(10)</code>表示存储长度为10的二进制数据，而<code>VARBINARY(255)</code>表示可以存储最大长度为255的变长二进制数据。</li>\n</ul>\n<p><strong>注意事项：</strong></p>\n<ul>\n<li>适用于存储固定或变长的二进制数据。</li>\n</ul>\n<p><strong>例子：</strong></p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">CREATE TABLE 二进制表 (\n    列1 BINARY(10),\n    列2 VARBINARY(255)\n);</code></pre>\n\n<p><strong>BLOB:</strong></p>\n<ul>\n<li><code>BLOB</code>是用于存储大型二进制对象的类型，适用于存储比较大的二进制数据。</li>\n<li>MySQL提供了不同大小的<code>BLOB</code>类型，包括<code>TINYBLOB</code>、<code>BLOB</code>、<code>MEDIUMBLOB</code>和<code>LONGBLOB</code>。</li>\n</ul>\n<p><strong>注意事项：</strong></p>\n<ul>\n<li>适用于存储大型的二进制数据，如图像、音频、视频等。</li>\n<li><code>BLOB</code>类型的数据在排序和索引上的性能可能不如其他类型。</li>\n</ul>\n<p><strong>例子：</strong></p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">CREATE TABLE 二进制大对象表 (\n    列1 BLOB,\n    列2 LONGBLOB\n);</code></pre>\n\n<p>这玩意更加不常用，一般我们会使用第三方提供的OSS（对象存储服务），便宜安全好用，还快，谁会往自家服务本地存东西？</p>\n<h2 id=\"空间数据类型：\"><a href=\"#空间数据类型：\" class=\"headerlink\" title=\"空间数据类型：\"></a><strong>空间数据类型：</strong></h2><p>在MySQL中，空间数据类型用于存储与空间（地理或几何）相关的数据。以下是几种常见的空间数据类型：</p>\n<ol>\n<li><p><strong>GEOMETRY:</strong></p>\n<ul>\n<li><code>GEOMETRY</code>类型用于存储任意几何对象。</li>\n<li>这包括点、线、多边形等各种几何形状。</li>\n</ul>\n<p><strong>注意事项：</strong></p>\n<ul>\n<li>适用于存储任意几何对象，但不能进行特定类型的分析或查询。</li>\n</ul>\n</li>\n<li><p><strong>POINT:</strong></p>\n<ul>\n<li><code>POINT</code>类型用于存储二维平面上的点。</li>\n<li>POINT类型可以用来表示地理坐标，如经纬度。</li>\n</ul>\n<p><strong>注意事项：</strong></p>\n<ul>\n<li>适用于存储地理坐标等点的信息。</li>\n</ul>\n</li>\n<li><p><strong>LINESTRING:</strong></p>\n<ul>\n<li><code>LINESTRING</code>类型用于存储线。</li>\n<li>可以用一系列的点来定义一条线。</li>\n</ul>\n<p><strong>注意事项：</strong></p>\n<ul>\n<li>适用于存储线的几何信息。</li>\n</ul>\n</li>\n<li><p><strong>POLYGON:</strong></p>\n<ul>\n<li><code>POLYGON</code>类型用于存储多边形。</li>\n<li>可以用一系列的点来定义一个封闭的区域。</li>\n</ul>\n<p><strong>注意事项：</strong></p>\n<ul>\n<li>适用于存储多边形的几何信息。</li>\n</ul>\n</li>\n</ol>\n<p>这个我也没用过。。。。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>存储空间的单位通常有字节（Byte）、千字节（KB）、兆字节（MB）、吉字节（GB）、太字节（TB）等。它们之间的换算关系如下：</p>\n<ol>\n<li><strong>字节（Byte）:</strong><ul>\n<li>1 Byte = 8 比特（bit）</li>\n</ul>\n</li>\n<li><strong>千字节（KB）:</strong><ul>\n<li>1 KB = 1024 Bytes</li>\n</ul>\n</li>\n<li><strong>兆字节（MB）:</strong><ul>\n<li>1 MB = 1024 KB = 1024 * 1024 Bytes</li>\n</ul>\n</li>\n<li><strong>吉字节（GB）:</strong><ul>\n<li>1 GB = 1024 MB = 1024 * 1024 KB = 1024 * 1024 * 1024 Bytes</li>\n</ul>\n</li>\n<li><strong>太字节（TB）:</strong><ul>\n<li>1 TB = 1024 GB = 1024 * 1024 MB = 1024 * 1024 * 1024 KB = 1024 * 1024 * 1024 * 1024 Bytes</li>\n</ul>\n</li>\n</ol>\n<p>自个慢慢换算，感觉考试肯定有一道题考这个。</p></blockquote>\n<h1 id=\"列选项（约束）\"><a href=\"#列选项（约束）\" class=\"headerlink\" title=\"列选项（约束）\"></a>列选项（约束）</h1><p>在MySQL中，当你创建表时，你可以为每个列指定一些选项，这些选项称为列选项（Column Options）。这些选项允许你进一步定制列的行为和特性。以下是一些常见的列选项：</p>\n<h2 id=\"NOT-NULL\"><a href=\"#NOT-NULL\" class=\"headerlink\" title=\"NOT NULL\"></a><strong>NOT NULL</strong></h2><p>使用<code>NOT NULL</code>选项是为了确保某一列的值不能为空（即不允许为NULL）。这对于确保数据的完整性和有效性是非常重要的。以下是关于<code>NOT NULL</code>选项的一些注意事项：</p>\n<p><strong>数据完整性：</strong></p>\n<ul>\n<li>主要目的是确保表中的每一行都有该列的值，从而维护数据的完整性。如果某一列没有<code>NOT NULL</code>选项，那么在插入数据时，该列可以为空。</li>\n</ul>\n<p><strong>默认值：</strong></p>\n<ul>\n<li>如果没有为列指定<code>DEFAULT</code>选项，而且该列被设置为<code>NOT NULL</code>，则在插入新行时必须为该列提供一个非NULL的值，否则插入将失败。</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">CREATE TABLE 表名 (\n    列1 INT NOT NULL DEFAULT 0,\n    列2 VARCHAR(50) NOT NULL DEFAULT '未知'\n);</code></pre>\n\n<p><strong>索引和性能：</strong></p>\n<ul>\n<li><code>NOT NULL</code>列上的索引通常比允许NULL值的列上的索引更有效。这是因为索引不需要考虑NULL值，因此在使用<code>NOT NULL</code>的列进行检索时可能更快。</li>\n</ul>\n<p><strong>外键约束：</strong></p>\n<ul>\n<li>如果某列被用作外键，通常会希望该列是<code>NOT NULL</code>的，以确保引用的完整性。外键通常引用主键，而主键列通常是<code>NOT NULL</code>的。</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">CREATE TABLE 父表 (\n    列1 INT PRIMARY KEY\n);\n\nCREATE TABLE 子表 (\n    列2 INT REFERENCES 父表(列1) NOT NULL\n);</code></pre>\n\n<p><strong>查询条件：</strong></p>\n<ul>\n<li>在查询数据时，<code>NOT NULL</code>条件可以用于过滤掉空值。例如，<code>SELECT * FROM 表名 WHERE 列1 IS NOT NULL;</code></li>\n</ul>\n<h2 id=\"DEFAULT\"><a href=\"#DEFAULT\" class=\"headerlink\" title=\"DEFAULT\"></a><strong>DEFAULT</strong></h2><p>在MySQL中，<code>DEFAULT</code>选项用于指定列的默认值。如果在插入数据时未提供值，列将采用默认值。以下是关于<code>DEFAULT</code>选项的一些注意事项：</p>\n<p><strong>默认值的类型：</strong></p>\n<ul>\n<li>默认值必须是与列数据类型兼容的值。例如，如果列是整数类型，那么默认值必须是整数。如果类型不匹配，MySQL可能会尝试进行自动转换，但这可能导致错误或意外行为。</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">CREATE TABLE 表名 (\n    列1 INT DEFAULT 0,\n    列2 VARCHAR(50) DEFAULT '未知'\n);</code></pre>\n\n<p><strong>NULL与DEFAULT的区别：</strong></p>\n<ul>\n<li><code>DEFAULT</code>和<code>NULL</code>是不同的概念。如果列被定义为<code>NOT NULL</code>，并且没有指定<code>DEFAULT</code>值，那么插入数据时必须提供一个非NULL的值。如果列具有<code>DEFAULT</code>值，那么在插入数据时可以省略该列，而MySQL将使用默认值。</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">CREATE TABLE 表名 (\n    列1 INT NOT NULL,\n    列2 VARCHAR(50) DEFAULT '未知'\n);</code></pre>\n\n<p><strong>多列的默认值：</strong></p>\n<ul>\n<li>对于包含多个列的表，可以为每列分别指定默认值。这些默认值将在插入数据时使用。</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">CREATE TABLE 表名 (\n    列1 INT DEFAULT 0,\n    列2 VARCHAR(50) DEFAULT '未知',\n    列3 DATE DEFAULT CURRENT_DATE\n);</code></pre>\n\n<p><strong>系统函数和表达式：</strong></p>\n<ul>\n<li>可以使用系统函数或表达式作为默认值，例如<code>CURRENT_DATE</code>表示当前日期，<code>NOW()</code>表示当前日期和时间。这使得可以动态地生成默认值。</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">CREATE TABLE 表名 (\n    列1 INT DEFAULT 0,\n    列2 VARCHAR(50) DEFAULT '未知',\n    列3 TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);</code></pre>\n\n<p><strong>注意默认值的影响：</strong></p>\n<ul>\n<li>当在插入数据时未提供指定列的值时，MySQL将使用默认值。这可以确保即使没有显式提供值，表中的每一行都具有某些默认的初始值。</li>\n</ul>\n<h2 id=\"AUTO-INCREMENT\"><a href=\"#AUTO-INCREMENT\" class=\"headerlink\" title=\"AUTO_INCREMENT\"></a><strong>AUTO_INCREMENT</strong></h2><p><code>AUTO_INCREMENT</code>是MySQL中用于创建自增长列的选项。当插入一行数据时，自增长列会自动递增，为每一行分配一个唯一的标识。以下是关于<code>AUTO_INCREMENT</code>选项的一些注意事项：</p>\n<p><strong>仅适用于整数类型：</strong></p>\n<ul>\n<li><code>AUTO_INCREMENT</code>通常用于整数列，例如<code>INT</code>、<code>BIGINT</code>等。自增长列的值会从一个指定的起始值开始，然后按照指定的步长递增。</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">CREATE TABLE 表名 (\n    列1 INT AUTO_INCREMENT,\n    列2 VARCHAR(50),\n    PRIMARY KEY (列1)\n);</code></pre>\n\n<p><strong>唯一性：</strong></p>\n<ul>\n<li>自增长列通常用作主键，确保每行的唯一性。由于每行的自增长值都不同，可以方便地用作唯一标识。</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">CREATE TABLE 表名 (\n    列1 INT AUTO_INCREMENT PRIMARY KEY,\n    列2 VARCHAR(50)\n);</code></pre>\n\n<p><strong>指定起始值：</strong></p>\n<ul>\n<li>可以使用<code>AUTO_INCREMENT</code>选项指定自增长列的起始值。这可以通过在创建表时使用<code>AUTO_INCREMENT = value</code>语法来完成。</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">CREATE TABLE 表名 (\n    列1 INT AUTO_INCREMENT PRIMARY KEY,\n    列2 VARCHAR(50)\n) AUTO_INCREMENT = 100;</code></pre>\n\n<p><strong>不跳号：</strong></p>\n<ul>\n<li>自增长列保证不会跳过任何值。即使删除了表中的某些行，下一行插入时仍会使用之前未使用的最小的自增长值。</li>\n</ul>\n<p><strong>事务和并发：</strong></p>\n<ul>\n<li>自增长列在事务和并发环境下的行为是可控的。不同的数据库引擎可能有不同的实现方式，但通常会保证生成唯一的自增长值。</li>\n</ul>\n<p><strong>不适用于复制表：</strong></p>\n<ul>\n<li>在使用复制表结构的操作（如<code>CREATE TABLE ... AS SELECT ...</code>）时，不会保留<code>AUTO_INCREMENT</code>属性。需要额外的步骤来设置新表的自增长属性。</li>\n</ul>\n<p><strong>不可手动插入值：</strong></p>\n<ul>\n<li>通常情况下，不建议手动插入值到自增长列。MySQL会自动为该列分配一个唯一的值。如果插入时指定了自增长列的值，系统可能会忽略该值并使用自己的自增长值。</li>\n</ul>\n<h2 id=\"PRIMARY-KEY\"><a href=\"#PRIMARY-KEY\" class=\"headerlink\" title=\"PRIMARY KEY\"></a><strong>PRIMARY KEY</strong></h2><p><code>PRIMARY KEY</code>用于定义表中的主键，主键是用来唯一标识表中每一行的一列或一组列。以下是关于<code>PRIMARY KEY</code>的一些注意事项：</p>\n<p><strong>唯一性：</strong></p>\n<ul>\n<li>主键必须保证唯一性，每一行都必须有不同的主键值。这确保了表中的每个记录都可以通过主键唯一标识。</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">CREATE TABLE 表名 (\n    列1 INT PRIMARY KEY,\n    列2 VARCHAR(50)\n);</code></pre>\n\n<p><strong>不允许NULL：</strong></p>\n<ul>\n<li>主键列不允许包含NULL值。每个主键列都必须包含一个非NULL的值。</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">CREATE TABLE 表名 (\n    列1 INT PRIMARY KEY,\n    列2 VARCHAR(50) NOT NULL\n);</code></pre>\n\n<p><strong>唯一索引：</strong></p>\n<ul>\n<li>主键在数据库中通常被实现为唯一索引。因此，通过主键进行查询或检索的速度很快。</li>\n</ul>\n<p><strong>复合主键：</strong></p>\n<ul>\n<li>主键可以包含多列，这称为复合主键。复合主键的组合值必须是唯一的。</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">CREATE TABLE 表名 (\n    列1 INT,\n    列2 INT,\n    PRIMARY KEY (列1, 列2)\n);</code></pre>\n\n<p><strong>自动递增：</strong></p>\n<ul>\n<li>主键列通常与<code>AUTO_INCREMENT</code>一起使用，确保每次插入新记录时都生成唯一的主键值。</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">CREATE TABLE 表名 (\n    列1 INT AUTO_INCREMENT PRIMARY KEY,\n    列2 VARCHAR(50)\n);</code></pre>\n\n<p><strong>外键关系：</strong></p>\n<ul>\n<li>主键通常用作与其他表的外键关系。外键可以引用另一表中的主键，以确保数据的引用完整性。</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">CREATE TABLE 父表 (\n    列1 INT PRIMARY KEY\n);\n\nCREATE TABLE 子表 (\n    列2 INT,\n    FOREIGN KEY (列2) REFERENCES 父表(列1)\n);</code></pre>\n\n<p><strong>变更注意事项：</strong></p>\n<ul>\n<li>在表已经存在的情况下，要添加主键，表中的数据必须保证唯一性。如果表中已经有重复的值，需要先处理这些冲突再添加主键。</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">ALTER TABLE 表名 ADD PRIMARY KEY (列1);</code></pre>\n\n<h2 id=\"UNIQUE\"><a href=\"#UNIQUE\" class=\"headerlink\" title=\"UNIQUE\"></a><strong>UNIQUE</strong></h2><p><code>UNIQUE</code>是用于定义唯一约束的关键字，在MySQL中，它用于确保表中的某一列或一组列的值是唯一的。以下是关于<code>UNIQUE</code>的一些注意事项：</p>\n<p><strong>唯一性：</strong></p>\n<ul>\n<li><code>UNIQUE</code>约束确保被约束的列中的所有值都是唯一的，不允许重复。</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">CREATE TABLE 表名 (\n    列1 INT UNIQUE,\n    列2 VARCHAR(50)\n);</code></pre>\n\n<p><strong>NULL值：</strong></p>\n<ul>\n<li>对于带有<code>UNIQUE</code>约束的列，NULL值在唯一性方面是例外的。即使有多个NULL值，它们在唯一性检查中不会相互冲突。</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">CREATE TABLE 表名 (\n    列1 INT UNIQUE,\n    列2 VARCHAR(50) UNIQUE\n);</code></pre>\n\n<p><strong>复合唯一性：</strong></p>\n<ul>\n<li><code>UNIQUE</code>约束可以应用于单列，也可以应用于多列，称为复合唯一性。复合唯一性要求所有列的组合值是唯一的。</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">CREATE TABLE 表名 (\n    列1 INT,\n    列2 VARCHAR(50),\n    UNIQUE (列1, 列2)\n);</code></pre>\n\n<p><strong>自动创建索引：</strong></p>\n<ul>\n<li><code>UNIQUE</code>约束通常会在底层自动创建唯一索引。因此，对带有<code>UNIQUE</code>约束的列进行检索或排序的性能较好。</li>\n</ul>\n<p><strong>违反唯一性的操作：</strong></p>\n<ul>\n<li>如果插入或更新操作违反了<code>UNIQUE</code>约束，MySQL将抛出唯一性冲突的错误。在进行这些操作前应该确保要插入或更新的值不会导致唯一性冲突。</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">INSERT INTO 表名 (列1, 列2) VALUES (1, '值1'); -- 正确\nINSERT INTO 表名 (列1, 列2) VALUES (1, '值2'); -- 违反唯一性约束</code></pre>\n\n<p><strong>变更注意事项：</strong></p>\n<ul>\n<li>在表已经存在的情况下，要添加<code>UNIQUE</code>约束，表中的数据必须保证唯一性。如果表中已经有重复的值，需要先处理这些冲突再添加<code>UNIQUE</code>约束。</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">ALTER TABLE 表名 ADD UNIQUE (列1);</code></pre>\n\n<h1 id=\"插入数据（INSERT-INTO）\"><a href=\"#插入数据（INSERT-INTO）\" class=\"headerlink\" title=\"插入数据（INSERT INTO）\"></a>插入数据（<code>INSERT INTO</code>）</h1><h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><p>想象你有一张表格，表格的每一行代表一位同学的信息，有姓名、年龄和成绩三列。</p>\n<p><strong>打开表格（表）：</strong></p>\n<ul>\n<li>在MySQL中，就是打开你要插入数据的表。比如，我们打开了一张叫做<code>students</code>的表。</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">USE your_database_name; -- 切换到你的数据库</code></pre>\n\n<p><strong>选择要插入的位置（表的列）：</strong></p>\n<ul>\n<li>告诉MySQL你要在哪个表格的哪几列插入数据。在我们的例子中，我们要插入姓名、年龄和成绩。</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">INSERT INTO students (name, age, score) VALUES</code></pre>\n\n<p><strong>填写信息（插入具体的数据）：</strong></p>\n<ul>\n<li>在表格中填写新同学的信息。比如，小明，13岁，成绩90。</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">('小明', 13, 90);</code></pre>\n\n<p><strong>整合成完整的插入语句：</strong></p>\n<ul>\n<li>将上述两步整合在一起，形成完整的插入语句。</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">INSERT INTO students (name, age, score) VALUES ('小明', 13, 90);</code></pre>\n\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><p><strong>列顺序和值的对应：</strong></p>\n<ul>\n<li>插入数据时，要确保列名和对应的值的顺序是一致的。比如，如果你的表有列 <code>name</code>、<code>age</code>、<code>score</code>，那么你插入的值的顺序也应该是 <code>name</code>、<code>age</code>、<code>score</code>。</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">INSERT INTO students (name, age, score) VALUES ('小明', 13, 90);</code></pre>\n\n<p><strong>数据类型匹配：</strong></p>\n<ul>\n<li>插入的值的数据类型要与表中对应列的数据类型匹配。如果某一列是整数类型，那么插入时对应的值也应该是整数。</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">INSERT INTO students (name, age, score) VALUES ('小明', '13', 90); -- 错误示例，'13' 应为整数</code></pre>\n\n<p><strong>字符串使用单引号：</strong></p>\n<ul>\n<li>如果插入的值是字符串，要确保用单引号括起来。</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">INSERT INTO students (name, age, score) VALUES ('小明', 13, 90);</code></pre>\n\n<p><strong>主键约束：</strong></p>\n<ul>\n<li>如果表中有主键，确保插入的数据不会导致主键重复。主键是表中唯一标识每一行记录的列。</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">INSERT INTO students (id, name, age, score) VALUES (1, '小明', 13, 90);</code></pre>\n\n<p>当然，一般主键都是自增的，我们不需要给主键赋值。</p>\n<p><strong>默认值：</strong></p>\n<ul>\n<li>如果表中某一列有默认值，可以选择不插入该列的值，数据库会使用默认值。</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">INSERT INTO students (name, age) VALUES ('小明', 13); -- score 列会使用默认值</code></pre>\n\n<p><strong>插入多行数据：</strong></p>\n<ul>\n<li><code>INSERT INTO</code>语句可以一次插入多行数据，只需在<code>VALUES</code>后面添加多组值。</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">INSERT INTO students (name, age, score) VALUES\n('小明', 13, 90),\n('小红', 14, 95),\n('小刚', 13, 88);</code></pre>\n\n<p><strong>良好的数据准备：</strong></p>\n<ul>\n<li>在执行插入操作之前，确保你的数据准备工作已经完成，例如数据已经清理、格式正确等。</li>\n</ul>\n<p><strong>事务处理：</strong></p>\n<ul>\n<li>在插入大量数据时，可以考虑使用事务处理，以确保数据的一致性和完整性。</li>\n</ul>\n<h1 id=\"更新（修改）数据（UPDATE）\"><a href=\"#更新（修改）数据（UPDATE）\" class=\"headerlink\" title=\"更新（修改）数据（UPDATE）\"></a>更新（修改）数据（<code>UPDATE</code>）</h1><p>当你想要修改数据库表中已经存在的数据时，你可以使用 MySQL 中的 <code>UPDATE</code> 语句。这就好像你在纸上修改错别字一样，只不过是在数据库里进行的修改。</p>\n<h2 id=\"示例-1\"><a href=\"#示例-1\" class=\"headerlink\" title=\"示例\"></a>示例</h2><p>想象你有一张表格，里面记录了同学的名字、年龄和成绩。现在你发现小明的成绩写错了，他实际上是 95 分，而不是原来的 90 分。</p>\n<p><strong>找到小明的那一行（定位数据）：</strong></p>\n<ul>\n<li>就像在表格里找到小明的那一行一样，在 MySQL 中，我们使用 <code>WHERE</code> 子句来定位要修改的行。</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">UPDATE students SET score = 95 WHERE name = '小明';</code></pre>\n\n<p><strong>修改小明的成绩：</strong></p>\n<ul>\n<li>然后告诉数据库你要把小明的成绩改成 95 分。</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">UPDATE students SET score = 95 WHERE name = '小明';</code></pre>\n\n<p><strong>提交修改（保存修改）：</strong></p>\n<ul>\n<li>最后，告诉数据库你已经完成了修改，要保存这个修改。</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>一般的语法格式为：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">UPDATE table_name\nSET column1 = value1, column2 = value2, ...\nWHERE condition;</code></pre>\n\n<ul>\n<li><strong>table_name</strong>：要修改的表名称。</li>\n<li>**column1, column2, …**：要修改的字段名称，可以为多个字段。</li>\n<li>**value1, value2, …**：要修改的值，可以为多个值。</li>\n<li><strong>condition</strong>：修改条件，用于指定哪些数据要修改。</li>\n</ul></blockquote>\n<h2 id=\"注意事项-1\"><a href=\"#注意事项-1\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><p><strong>使用 <code>WHERE</code> 子句：</strong></p>\n<ul>\n<li><code>UPDATE</code> 语句会更新表中所有符合条件的记录。因此，务必使用 <code>WHERE</code> 子句来明确指定哪些行需要被更新。如果不使用 <code>WHERE</code>，可能会导致意外地修改整个表的数据。</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">UPDATE students SET score = 95 WHERE name = '小明';</code></pre>\n\n<p><strong>确保条件唯一性：</strong></p>\n<ul>\n<li>如果可能的话，确保 <code>WHERE</code> 子句的条件足够唯一，以免误操作。确保只有目标行满足条件。</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">UPDATE students SET score = 95 WHERE student_id = 123; -- 使用唯一的 student_id</code></pre>\n\n<p><strong>备份数据：</strong></p>\n<ul>\n<li>在执行大规模更新或者重要数据的更新操作之前，最好备份数据。这可以在意外发生时提供数据的还原点。</li>\n</ul>\n<p><strong>避免过度更新：</strong></p>\n<ul>\n<li>谨慎使用 <code>UPDATE</code> 语句，特别是在生产环境中。过度更新可能导致性能问题和数据一致性问题。确保只更新必要的数据。</li>\n</ul>\n<p><strong>事务处理：</strong></p>\n<ul>\n<li>对于涉及多个表或需要多个步骤的复杂更新，使用事务处理确保数据的一致性。在更新操作完成之后，使用 <code>COMMIT</code> 提交事务。</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">START TRANSACTION;\n-- 执行一系列更新操作\nCOMMIT;</code></pre>\n\n<p>这一步一般不需要我们手动去操作，一般的数据库软件都能做到，点一下，或者回车之类的。</p>\n<p><strong>考虑性能：</strong></p>\n<ul>\n<li>在更新大量数据时，要考虑更新操作的性能。如果可能的话，避免在大表上执行没有索引支持的更新操作，以提高查询效率。</li>\n</ul>\n<p><strong>数据类型匹配：</strong></p>\n<ul>\n<li>确保更新的值与目标列的数据类型匹配，以避免数据转换错误。</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">UPDATE students SET age = '15' WHERE name = '小明'; -- 错误示例，'15' 应为整数</code></pre>\n\n<p><strong>更新部分字段：</strong></p>\n<ul>\n<li>可以选择仅更新需要修改的列，而不必修改整行的所有数据。</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">UPDATE students SET score = 95 WHERE name = '小明'; -- 只更新成绩，而不修改其他信息</code></pre>\n\n<p><strong>测试更新语句：</strong></p>\n<ul>\n<li>在执行更新语句之前，先使用 <code>SELECT</code> 语句检查 <code>WHERE</code> 子句，确保它选中了你希望更新的行。</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">SELECT * FROM students WHERE name = '小明';</code></pre>\n\n<h1 id=\"删除（行）数据（DELETE）\"><a href=\"#删除（行）数据（DELETE）\" class=\"headerlink\" title=\"删除（行）数据（DELETE）\"></a>删除（行）数据（<code>DELETE</code>）</h1><p>当你想要从数据库中删除一些信息时，就可以使用 MySQL 中的 <code>DELETE</code> 语句。这就好像你在擦掉一张纸上的某些文字一样。</p>\n<h2 id=\"示例-2\"><a href=\"#示例-2\" class=\"headerlink\" title=\"示例\"></a>示例</h2><p>想象你有一张同学名单表格，里面记录了同学们的名字、年龄和成绩。现在你发现表里有一个错误的记录，记录了一个不存在的同学，名字叫做”小花”，你要把这个错误的记录删除。</p>\n<p><strong>找到要删除的那一行（定位数据）：</strong></p>\n<ul>\n<li>就像在表格里找到那个错误记录的行一样，在 MySQL 中，我们使用 <code>WHERE</code> 子句来定位要删除的行。</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">SELECT * FROM students WHERE name = '小花';</code></pre>\n\n<p><strong>确认删除操作（删除数据）：</strong></p>\n<ul>\n<li>然后告诉数据库你要删除这个找到的记录。</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">DELETE FROM students WHERE name = '小花';</code></pre>\n\n<p><strong>提交删除（保存删除操作）：</strong></p>\n<ul>\n<li>最后，告诉数据库你已经完成了删除操作，要保存这个删除。</li>\n</ul>\n<h2 id=\"注意事项-2\"><a href=\"#注意事项-2\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><p><strong>使用 <code>WHERE</code> 子句：</strong></p>\n<ul>\n<li><code>DELETE</code> 语句会删除表中所有符合条件的记录。因此，务必使用 <code>WHERE</code> 子句来明确指定哪些行需要被删除。如果不使用 <code>WHERE</code>，可能会导致意外地删除整个表的数据。</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">DELETE FROM students WHERE name = '小花';</code></pre>\n\n<p><strong>确保条件唯一性：</strong></p>\n<ul>\n<li>确保 <code>WHERE</code> 子句的条件足够唯一，以免误删除其他不需要删除的数据。确保只有目标行满足条件。</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">DELETE FROM students WHERE student_id = 123; -- 使用唯一的 student_id</code></pre>\n\n<p><strong>备份数据：</strong></p>\n<ul>\n<li>在执行大规模删除或者删除重要数据之前，最好备份数据。这可以在意外发生时提供数据的还原点。</li>\n</ul>\n<p><strong>避免没有 <code>WHERE</code> 的删除：</strong></p>\n<ul>\n<li>不要轻易执行没有 <code>WHERE</code> 子句的 <code>DELETE</code> 语句，因为这会删除整个表中的所有数据。</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">DELETE FROM students; -- 慎用，会删除整个表中的数据</code></pre>\n\n<p><strong>事务处理：</strong></p>\n<ul>\n<li>对于涉及多个表或需要多个步骤的复杂删除操作，使用事务处理确保数据的一致性。在删除操作完成之后，使用 <code>COMMIT</code> 提交事务。</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">START TRANSACTION;\n-- 执行一系列删除操作\nCOMMIT;</code></pre>\n\n<p><strong>考虑性能：</strong></p>\n<ul>\n<li>在删除大量数据时，要考虑删除操作的性能。如果可能的话，避免在大表上执行没有索引支持的删除操作，以提高查询效率。</li>\n</ul>\n<p><strong>谨慎使用 <code>DELETE</code>：</strong></p>\n<ul>\n<li>谨慎使用 <code>DELETE</code>，尤其是在生产环境中。过度删除可能导致数据丢失和性能问题。</li>\n</ul>\n<p><strong>测试删除语句：</strong></p>\n<ul>\n<li>在执行删除语句之前，先使用 <code>SELECT</code> 语句检查 <code>WHERE</code> 子句，确保它选中了你希望删除的行。</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">SELECT * FROM students WHERE name = '小花';</code></pre>\n\n<h2 id=\"关于删除的补充\"><a href=\"#关于删除的补充\" class=\"headerlink\" title=\"关于删除的补充\"></a>关于删除的补充</h2><p>在 MySQL 中，有几种不同的删除操作，包括 <code>DELETE</code>、<code>TRUNCATE</code> 和 <code>DROP</code>，它们有不同的作用和用途。以下是它们的主要区别：</p>\n<h3 id=\"DELETE\"><a href=\"#DELETE\" class=\"headerlink\" title=\"DELETE\"></a><strong>DELETE</strong></h3><ul>\n<li><strong>作用：</strong> 用于删除表中的记录。</li>\n<li><strong>影响范围：</strong> 可以通过使用 <code>WHERE</code> 子句来指定删除的记录。可以删除满足条件的一行或多行数据。</li>\n<li><strong>保留结构：</strong> 表结构不受影响，只删除数据。</li>\n<li><strong>事务支持：</strong> <code>DELETE</code> 操作是事务安全的，可以与事务一起使用。</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">DELETE FROM table_name WHERE condition;</code></pre>\n\n<h3 id=\"TRUNCATE\"><a href=\"#TRUNCATE\" class=\"headerlink\" title=\"TRUNCATE\"></a><strong>TRUNCATE</strong></h3><ul>\n<li><strong>作用：</strong> 用于快速删除表中的所有数据。</li>\n<li><strong>影响范围：</strong> 删除整个表中的所有数据，而不考虑任何条件。没有 <code>WHERE</code> 子句。</li>\n<li><strong>保留结构：</strong> 保留表的结构，只删除数据。</li>\n<li><strong>重置计数器：</strong> 在某些数据库中，<code>TRUNCATE</code> 操作还可以重置自增计数器（如果有的话）。</li>\n<li><strong>事务支持：</strong> <code>TRUNCATE</code> 操作通常比 <code>DELETE</code> 操作更快，但不支持回滚。</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">TRUNCATE TABLE table_name;</code></pre>\n\n<h3 id=\"DROP\"><a href=\"#DROP\" class=\"headerlink\" title=\"DROP\"></a><strong>DROP</strong></h3><ul>\n<li><strong>作用：</strong> 用于删除整个表，包括表的结构、数据以及相关的索引、约束等。</li>\n<li><strong>影响范围：</strong> 删除整个表，无法恢复。</li>\n<li><strong>保留结构：</strong> 表结构也被删除，不再存在。</li>\n<li><strong>事务支持：</strong> <code>DROP</code> 操作是 DDL（数据定义语言）命令，不能回滚。执行后表不可恢复地被删除。</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">DROP TABLE table_name;</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>这里说的事务安全是指什么呢？</p>\n<p>在数据库管理系统中，事务（Transaction）是一组数据库操作，被看作是一个不可分割的工作单元。事务具有以下四个特性，通常被称为 ACID 特性：</p>\n<ol>\n<li><strong>原子性（Atomicity）：</strong> 事务是一个原子操作，要么全部执行成功，要么全部执行失败。如果在事务执行过程中发生错误，系统会回滚（Rollback）事务，将数据库恢复到事务开始之前的状态，保持数据的一致性。</li>\n<li><strong>一致性（Consistency）：</strong> 事务执行前后，数据库从一个一致的状态转变到另一个一致的状态。事务执行过程中，数据库约束不会被破坏，确保数据的完整性。</li>\n<li><strong>隔离性（Isolation）：</strong> 事务的执行是相互隔离的，一个事务的执行不应影响其他事务的执行。事务之间应该是相互独立的，就好像它们是在系统中独立运行一样。</li>\n<li><strong>持久性（Durability）：</strong> 一旦事务被提交，其结果应该是永久性的，即使系统崩溃，也能够通过数据库的恢复机制将数据还原到事务提交后的状态。</li>\n</ol>\n<p>说白了，如果是事务安全的，删除操作如果中途出现了什么问题导致了删除失败，则会回滚到删除之前的状态。</p>\n<p>比方说执行了一条删除语句，需要删除表中五条数据，但是在第三条的时候不知道咋了无法删除，但是已经删了两条数据了，如果是事务安全的，则会回滚到之前的状态，等于什么都没删。如果不是事务安全的，那么结果就是永久的删掉了这两条数据。</p>\n<p>也就是说，要么全部成功，要么全部失败。</p></blockquote>\n<p>剩下的几个外键，CHECK之类的后面再说，今天复习的蛮多了，结束！</p>\n","text":"今天继续复习数据库，顺序就按照学校的来，我也不知道从哪里开始讲。 什么是SQL？SQL的全称是 “Structured Query Language”，也就是结构化查询语言，是一种用于访问和处理数据库的标准的计算机语言。 SQL可以干什么？SQL主要分为两种，一种是DDL（Dat...","link":"","photos":[],"count_time":{"symbolsCount":"16k","symbolsTime":"14 mins."},"categories":[],"tags":[{"name":"笔记","slug":"笔记","count":48,"path":"api/tags/笔记.json"},{"name":"MySQL复习","slug":"MySQL复习","count":10,"path":"api/tags/MySQL复习.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AFSQL%EF%BC%9F\"><span class=\"toc-text\">什么是SQL？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#SQL%E5%8F%AF%E4%BB%A5%E5%B9%B2%E4%BB%80%E4%B9%88%EF%BC%9F\"><span class=\"toc-text\">SQL可以干什么？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BB%BA%E7%AB%8B%E8%A1%A8%E6%A0%BC\"><span class=\"toc-text\">建立表格</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%91%BD%E5%90%8D%E5%AF%B9%E8%B1%A1%E6%B3%A8%E6%84%8F%E8%A7%84%E8%8C%83\"><span class=\"toc-text\">命名对象注意规范</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#MySQL%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">MySQL中的数据类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B4%E6%95%B0%E7%B1%BB%E5%9E%8B%EF%BC%9A\"><span class=\"toc-text\">整数类型：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B5%AE%E7%82%B9%E6%95%B0%E5%92%8C%E5%AE%9A%E7%82%B9%E6%95%B0%E7%B1%BB%E5%9E%8B%EF%BC%9A\"><span class=\"toc-text\">浮点数和定点数类型：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B1%BB%E5%9E%8B%EF%BC%9A\"><span class=\"toc-text\">字符串类型：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4%E7%B1%BB%E5%9E%8B%EF%BC%9A\"><span class=\"toc-text\">日期和时间类型：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9E%9A%E4%B8%BE%E5%92%8C%E9%9B%86%E5%90%88%E7%B1%BB%E5%9E%8B%EF%BC%9A\"><span class=\"toc-text\">枚举和集合类型：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E8%BF%9B%E5%88%B6%E7%B1%BB%E5%9E%8B%EF%BC%9A\"><span class=\"toc-text\">二进制类型：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%A9%BA%E9%97%B4%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%EF%BC%9A\"><span class=\"toc-text\">空间数据类型：</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%88%97%E9%80%89%E9%A1%B9%EF%BC%88%E7%BA%A6%E6%9D%9F%EF%BC%89\"><span class=\"toc-text\">列选项（约束）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#NOT-NULL\"><span class=\"toc-text\">NOT NULL</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#DEFAULT\"><span class=\"toc-text\">DEFAULT</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#AUTO-INCREMENT\"><span class=\"toc-text\">AUTO_INCREMENT</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#PRIMARY-KEY\"><span class=\"toc-text\">PRIMARY KEY</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#UNIQUE\"><span class=\"toc-text\">UNIQUE</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE%EF%BC%88INSERT-INTO%EF%BC%89\"><span class=\"toc-text\">插入数据（INSERT INTO）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">示例</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9\"><span class=\"toc-text\">注意事项</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%9B%B4%E6%96%B0%EF%BC%88%E4%BF%AE%E6%94%B9%EF%BC%89%E6%95%B0%E6%8D%AE%EF%BC%88UPDATE%EF%BC%89\"><span class=\"toc-text\">更新（修改）数据（UPDATE）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-1\"><span class=\"toc-text\">示例</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9-1\"><span class=\"toc-text\">注意事项</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%88%A0%E9%99%A4%EF%BC%88%E8%A1%8C%EF%BC%89%E6%95%B0%E6%8D%AE%EF%BC%88DELETE%EF%BC%89\"><span class=\"toc-text\">删除（行）数据（DELETE）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-2\"><span class=\"toc-text\">示例</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9-2\"><span class=\"toc-text\">注意事项</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%B3%E4%BA%8E%E5%88%A0%E9%99%A4%E7%9A%84%E8%A1%A5%E5%85%85\"><span class=\"toc-text\">关于删除的补充</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#DELETE\"><span class=\"toc-text\">DELETE</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#TRUNCATE\"><span class=\"toc-text\">TRUNCATE</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#DROP\"><span class=\"toc-text\">DROP</span></a></li></ol></li></ol></li></ol>","author":{"name":"General_K1ng","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/GeneralK1ng/My_Blog_IMG@main/img/avatar.png","link":"/","description":"一名正在努力学习计算机的菜鸟","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/BILIBILI.svg","link":"https://space.bilibili.com/32927332"},"csdn":{"icon":"/svg/csdn.svg","link":"https://blog.csdn.net/qq_34849354"},"github":{"icon":"/svg/GitHub.svg","link":"https://github.com/GeneralK1ng"},"QQ":{"icon":"/svg/QQ.svg","link":"tencent://AddContact/?fromId=45&fromSubId=1&subcmd=all&uin=2822688858"}}}},"mapped":true,"prev_post":{"title":"CPT101 Review-1","uid":"ca462487924054497383c1abea48a162","slug":"CPT101-Review-1","date":"2023-12-03T07:50:09.000Z","updated":"2023-12-03T08:51:58.666Z","comments":true,"path":"api/articles/CPT101-Review-1.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/GeneralK1ng/My_Blog_IMG@main/img/CPT101-img.png","text":"今天复习CPT101，在我看来全是死记硬背的东西，但是不背又不行，唉 我看课件感觉好多废话，但是我又不知道到底会不会考，我真无语了 计算机的分类计算机主要可以分为四个主要阶段，分别是：大型计算机，超级计算机，工作站，微型计算机，个人电脑。 Mainframe Computers（...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[],"tags":[{"name":"CPT101复习","slug":"CPT101复习","count":6,"path":"api/tags/CPT101复习.json"},{"name":"笔记","slug":"笔记","count":48,"path":"api/tags/笔记.json"}],"author":{"name":"General_K1ng","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/GeneralK1ng/My_Blog_IMG@main/img/avatar.png","link":"/","description":"一名正在努力学习计算机的菜鸟","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/BILIBILI.svg","link":"https://space.bilibili.com/32927332"},"csdn":{"icon":"/svg/csdn.svg","link":"https://blog.csdn.net/qq_34849354"},"github":{"icon":"/svg/GitHub.svg","link":"https://github.com/GeneralK1ng"},"QQ":{"icon":"/svg/QQ.svg","link":"tencent://AddContact/?fromId=45&fromSubId=1&subcmd=all&uin=2822688858"}}}}},"next_post":{"title":"Java_Learning(Week10&11)","uid":"39fbf399d55711348e77da1a1e71b32f","slug":"Java-Learning-Week10-11","date":"2023-11-30T08:33:11.000Z","updated":"2023-11-30T10:56:25.198Z","comments":true,"path":"api/articles/Java-Learning-Week10-11.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/GeneralK1ng/My_Blog_IMG@main/img/codeBackground.png","text":"哥们上周发烧了，就啥也没写，这周看能不能把两周的东西全写了。 第十周这个JavaFX快被人喷烂了，我这里也不想写，我只写有必要学的。 Java IO首先，Java IO 指的是 Java Input/Output（输入/输出）的缩写。在编程中，输入/输出是指程序与外部世界之间的信...","link":"","photos":[],"count_time":{"symbolsCount":"20k","symbolsTime":"19 mins."},"categories":[],"tags":[{"name":"笔记","slug":"笔记","count":48,"path":"api/tags/笔记.json"},{"name":"Java初学","slug":"Java初学","count":10,"path":"api/tags/Java初学.json"}],"author":{"name":"General_K1ng","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/GeneralK1ng/My_Blog_IMG@main/img/avatar.png","link":"/","description":"一名正在努力学习计算机的菜鸟","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/BILIBILI.svg","link":"https://space.bilibili.com/32927332"},"csdn":{"icon":"/svg/csdn.svg","link":"https://blog.csdn.net/qq_34849354"},"github":{"icon":"/svg/GitHub.svg","link":"https://github.com/GeneralK1ng"},"QQ":{"icon":"/svg/QQ.svg","link":"tencent://AddContact/?fromId=45&fromSubId=1&subcmd=all&uin=2822688858"}}}}}}