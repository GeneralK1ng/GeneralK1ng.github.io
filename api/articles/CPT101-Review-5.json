{"title":"CPT101 Review-5","uid":"2a328082fca1ff4ae5cd632b6f599daa","slug":"CPT101-Review-5","date":"2023-12-12T06:42:00.000Z","updated":"2024-01-05T14:42:28.009Z","comments":true,"path":"api/articles/CPT101-Review-5.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/GeneralK1ng/My_Blog_IMG@main/img/CPT101-img.png","content":"<p>继续讲这个字符相关的一些知识，看了一眼CPT101的课件为什么每周只有一节课但是会有两个课件。。。</p>\n<h1 id=\"字母数字字符\"><a href=\"#字母数字字符\" class=\"headerlink\" title=\"字母数字字符\"></a>字母数字字符</h1><p>计算机系统中处理的数据通常包括字母、数字和其他字符，这些统称为alphanumeric characters（字母数字字符）。让我们逐一讨论这三种类型的字符：</p>\n<ol>\n<li><strong>Letters（字母）:</strong><ul>\n<li>字母通常包括英文字母，例如大写字母 ‘A’ 到 ‘Z’ 和小写字母 ‘a’ 到 ‘z’。</li>\n<li>在计算机系统中，字母通常用ASCII码（美国信息交换标准代码）或Unicode编码表示。每个字母都有一个唯一的数字值，计算机使用这些数字值来存储和处理字母数据。</li>\n</ul>\n</li>\n<li><strong>Numbers（数字）:</strong><ul>\n<li>数字包括从 ‘0’ 到 ‘9’ 的阿拉伯数字。</li>\n<li>同样，数字也使用ASCII码或Unicode编码进行表示。计算机可以执行各种数学和算术运算，因此数字在计算机系统中是非常重要的。</li>\n</ul>\n</li>\n<li><strong>Other Characters（其他字符）:</strong><ul>\n<li>这一类包括各种标点符号、符号和特殊字符，如句号（.）、逗号（,）、感叹号（!）、问号（?）、括号（()）、星号（*）等。</li>\n<li>除了常见的标点符号，还包括一些特殊字符，如换行符（newline）、制表符（tab）等，它们在文本处理和格式化中起着重要作用。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"二进制编码\"><a href=\"#二进制编码\" class=\"headerlink\" title=\"二进制编码\"></a>二进制编码</h2><p>因为计算机内部所有的数据都是用二进制序列表示的，所以问题就是如何表示这些字母数字字符。</p>\n<ol>\n<li><strong>编码的需求：</strong><ul>\n<li>由于计算机只能处理二进制数据，字母、数字和其他字符需要被映射到二进制序列。这个过程被称为编码。</li>\n<li>字符的二进制编码使计算机能够存储、传输和处理各种类型的数据，而不仅仅是字母和数字。</li>\n</ul>\n</li>\n<li><strong>编码的选择：</strong><ul>\n<li>选择字符的二进制编码方式可能是任意的。不同的编码方案存在，如ASCII（美国信息交换标准代码）和Unicode。</li>\n<li>ASCII是一种基本的字符编码，为英文字母、数字和一些常见符号分配了唯一的二进制值。Unicode则更加广泛，支持世界上几乎所有的语言字符。</li>\n</ul>\n</li>\n<li><strong>一致性和标准：</strong><ul>\n<li>尽管选择编码的方式可能是任意的，但重要的是要保持一致性。即使选择不同的编码方案，不同的计算机系统也应该能够正确地解释和处理数据。</li>\n<li>标准变得至关重要。例如，如果一台计算机使用ASCII编码，而另一台计算机使用Unicode编码，数据的传输和解释就可能会出现问题。通过遵循共同的标准，可以确保不同系统之间的兼容性。</li>\n</ul>\n</li>\n</ol>\n<p><strong>为什么需要标准？</strong></p>\n<ul>\n<li><strong>一致性：</strong> 标准确保在不同的系统和应用程序之间有一致的数据表示，避免了混淆和错误的发生。</li>\n<li><strong>互操作性：</strong> 标准使得不同的计算机和设备能够共同协作，交换和处理数据。</li>\n<li><strong>可维护性：</strong> 使用标准使得系统更易于维护和升级，因为不同部分之间的交互是可预测的。</li>\n</ul>\n<h2 id=\"各种编码方式\"><a href=\"#各种编码方式\" class=\"headerlink\" title=\"各种编码方式\"></a>各种编码方式</h2><p>在计算机系统中，有几种常见的字母数字编码方式，其中包括ASCII码、EBCDIC码和Unicode。</p>\n<ol>\n<li><strong>ASCII码（美国信息交换标准代码）:</strong><ul>\n<li>ASCII是一种广泛采用的字符编码，最初设计为7位二进制编码，可以表示128个不同的字符。后来，为了适应更多字符的需求，ASCII的扩展版本（Extended ASCII）引入了8位编码，允许表示256个字符。</li>\n<li>ASCII覆盖了基本的拉丁字母、数字、标点符号和控制字符，并为各种应用提供了一致的字符表示方式。这使得在不同的计算机系统和应用程序之间进行文本数据的交换变得更加容易。</li>\n</ul>\n</li>\n<li><strong>EBCDIC码（Extended Binary Coded Decimal Interchange Code）:</strong><ul>\n<li>EBCDIC是IBM（国际商业机器公司）主机计算机系统上使用的一种字符编码方式，通常采用8位编码。与ASCII不同，EBCDIC主要用于IBM大型机和中型机的系统，而不是个人计算机。</li>\n<li>EBCDIC包含更多的字符，包括字母、数字、标点符号和一些特殊字符。尽管EBCDIC与ASCII在字符表示上存在差异，但通过转换工具，可以在它们之间进行互操作。</li>\n</ul>\n</li>\n<li><strong>Unicode:</strong><ul>\n<li>Unicode是一种较新的字符编码标准，最初设计为16位编码，可表示65,536（2^16）个字符。Unicode的目标是为世界上所有的语言和符号提供统一的编码方案，以解决ASCII和其他编码方案无法完全覆盖的问题。</li>\n<li>Unicode的16位编码空间迅速被证明不足以容纳所有的字符需求。因此，Unicode进行了扩展，现在有32位编码空间，允许编码超过两亿个字符。这种扩展版的Unicode通常称为UTF-32（Unicode Transformation Format）。</li>\n</ul>\n</li>\n</ol>\n<p><strong>总结：</strong></p>\n<ul>\n<li>ASCII、EBCDIC和Unicode都是用于表示字母数字字符的编码方式，它们在不同的场景和系统中得到应用。</li>\n<li>ASCII主要用于个人计算机和互联网，EBCDIC用于IBM主机系统，而Unicode则成为一个全球性的标准，用于支持各种语言和符号。Unicode的普及有助于解决跨语言和国际化的文本表示问题。</li>\n</ul>\n<h1 id=\"ASCII码\"><a href=\"#ASCII码\" class=\"headerlink\" title=\"ASCII码\"></a>ASCII码</h1><p>ASCII（American Standard Code for Information Interchange）码是一种基本的字符编码标准，用于在计算机和其他设备之间传输文本信息。ASCII最初设计为7位编码，可以表示128个字符，包括控制字符和可打印字符。由于后来的扩展，ASCII的8位版本也得到了广泛的应用，允许表示256个字符。</p>\n<p><strong>基本结构：</strong></p>\n<ul>\n<li>ASCII码使用二进制来表示字符。最初设计是7位二进制，因此能表示的字符范围是0到127。每个字符都被赋予一个唯一的7位二进制值。</li>\n<li>后来的扩展版本（Extended ASCII）使用了8位二进制，扩展到0到255的范围，以支持更多的字符。</li>\n</ul>\n<p><strong>字符范围：</strong></p>\n<ul>\n<li>ASCII码包含了基本的拉丁字母、阿拉伯数字、标点符号、控制字符和一些特殊字符。</li>\n<li>控制字符用于控制设备和通信，例如换行符（LF）、回车符（CR）、制表符（Tab）等。</li>\n<li>可打印字符包括空格、字母、数字和常见的标点符号。</li>\n</ul>\n<p><strong>ASCII表：</strong></p>\n<ul>\n<li>ASCII字符及其对应的二进制值可以在ASCII表中找到。每个字符都有一个唯一的ASCII码，方便计算机系统在文本处理和通信中进行一致的字符表示。</li>\n</ul>\n<p><strong>ASCII扩展字符集：</strong></p>\n<ul>\n<li>Extended ASCII对原始ASCII进行了扩展，通过使用8位二进制，支持更多的字符，包括特殊符号、外文字符和其他符号。这样，ASCII码就能够满足更多语言和应用的需求。</li>\n</ul>\n<p><strong>应用：</strong></p>\n<ul>\n<li>ASCII码是计算机系统中最常用的字符编码之一，广泛应用于文本处理、通信协议、编程和许多其他领域。</li>\n<li>在网络通信中，例如电子邮件、网页等，文本通常使用ASCII码表示。</li>\n</ul>\n<p>那么这个表长什么样子呢？</p>\n<p><img src=\"http://www.jimprice.com/ascii-0-127.gif\" alt=\"ASCII\"></p>\n<p>就长这样，感觉考试应该不会考这种背诵吧。。</p>\n<h2 id=\"拓展表\"><a href=\"#拓展表\" class=\"headerlink\" title=\"拓展表\"></a>拓展表</h2><p>ASCII码表仅使用了可能的8位（1字节）模式中的一半。这是因为ASCII最初设计为7位编码，只使用了0到127的范围。后来的8位扩展版本使用了剩余的128到255的范围，用于表示额外的符号、线形、外文字符等。</p>\n<p>这个8位扩展部分是ASCII的Extended ASCII版本，也称为High ASCII。它包括了许多特殊符号、外文字符、图形符号和其他不在基本ASCII范围内的字符。以下是一些Extended ASCII中常见的字符：</p>\n<table>\n<thead>\n<tr>\n<th>ASCII (7-bit)</th>\n<th>ASCII (8-bit)</th>\n<th>Character</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>…</td>\n<td>128</td>\n<td>Ç</td>\n</tr>\n<tr>\n<td>…</td>\n<td>129</td>\n<td>ü</td>\n</tr>\n<tr>\n<td>…</td>\n<td>130</td>\n<td>é</td>\n</tr>\n<tr>\n<td>…</td>\n<td>…</td>\n<td>…</td>\n</tr>\n<tr>\n<td>…</td>\n<td>160</td>\n<td>¡</td>\n</tr>\n<tr>\n<td>…</td>\n<td>161</td>\n<td>í</td>\n</tr>\n<tr>\n<td>…</td>\n<td>…</td>\n<td>…</td>\n</tr>\n<tr>\n<td>…</td>\n<td>255</td>\n<td>ÿ</td>\n</tr>\n</tbody></table>\n<h2 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h2><p>ASCII码表中的字母编码的顺序与字母表中字母的字母顺序相一致。这种设计有助于使字符编码更加直观和易于记忆。同时，ASCII码表可以分为两个主要类别：打印字符（Printing characters）和控制字符（Control characters）。</p>\n<ol>\n<li><strong>Printing Characters (打印字符):</strong><ul>\n<li>打印字符是能够在屏幕上或打印机上直接显示的字符。它们产生可见的输出，包括字母、数字、标点符号和其他可视字符。这些字符通常用于文本的显示和输出，用户可以直接看到它们的表示。</li>\n</ul>\n</li>\n<li><strong>Control Characters (控制字符):</strong><ul>\n<li>控制字符是不可见的字符，用于控制设备和通信。它们不会直接产生可见的输出，而是用于执行一些特殊的操作或控制输出的位置和格式。</li>\n<li>一些常见的控制字符及其作用包括：<ul>\n<li><strong>换行符 (LF，ASCII码为10):</strong> 用于将光标移动到下一行，类似于按下”Enter”键。</li>\n<li><strong>回车符 (CR，ASCII码为13):</strong> 用于将光标移动到行首，通常与换行符一起使用。</li>\n<li><strong>制表符 (Tab，ASCII码为9):</strong> 在文本中创建水平制表格，通常用于对齐文本。</li>\n<li><strong>响铃符 (Bell，ASCII码为7):</strong> 产生声音或闪烁光标，用于引起注意。</li>\n<li><strong>控制字符组合 (例如，Control-C):</strong> 通过组合键盘上的Ctrl键和其他按键，可以生成控制字符，用于触发某些特殊的命令或操作。</li>\n</ul>\n</li>\n<li>控制字符的主要作用包括：<ul>\n<li><strong>控制输出位置：</strong> 通过制表符等控制字符，可以在文本中创建格式和对齐。</li>\n<li><strong>触发动作：</strong> 通过特定的控制字符，可以触发设备上的特定动作，比如响铃符产生声音。</li>\n<li><strong>通信状态：</strong> 一些控制字符用于在计算机和输入/输出设备之间传递状态信息，例如Ctrl-C通常用于中断运行的程序。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"局限性\"><a href=\"#局限性\" class=\"headerlink\" title=\"局限性\"></a>局限性</h2><ol>\n<li><strong>显示要求的限制：</strong><ul>\n<li>ASCII码最初设计时只使用了7位二进制，后来扩展到8位以支持更多字符。然而，对于现代基于Windows的字处理软件等应用程序，ASCII码的8位表示仍然有一些限制。</li>\n<li>许多现代字处理软件需要更多的字符集，包括各种语言的特殊字符、符号和表情符号。由于ASCII只有256个可能的字符，这可能无法满足日益增长的全球化和多语言需求。</li>\n</ul>\n</li>\n<li><strong>处理国际字符集的全球软件市场需求：</strong><ul>\n<li>ASCII码在最初设计时主要关注美国英语，因此并未完全满足全球范围内处理国际字符集的需求。随着计算机的普及和全球化的发展，全球软件市场对于能够处理多语言字符集的需求逐渐增加。</li>\n<li>许多国际字符集，如汉字、日语假名、西里尔字母等，无法用ASCII码表示。这促使了更为复杂和全面的字符编码方案的发展，如Unicode。</li>\n</ul>\n</li>\n</ol>\n<p>就像这个笑话图片里面说的一样：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/GeneralK1ng/My_Blog_IMG@main/img/programmerJoke-1.jpg\"></p>\n<p>那么我们就迎来了大集合，Unicode。</p>\n<h1 id=\"Unicode\"><a href=\"#Unicode\" class=\"headerlink\" title=\"Unicode\"></a>Unicode</h1><p>Unicode（统一码，也叫万国码）是一种字符编码标准，用于在计算机系统中表示和处理文本。它的设计目标是支持全球范围内所有语言的字符，包括各种字母、符号、汉字、表情符号等，以满足多语言和多文化的需求。Unicode提供了一个统一的、标准化的字符集，以替代早期的字符编码方案，如ASCII。</p>\n<p>以下是Unicode的一些关键特点和概念：</p>\n<ol>\n<li><strong>编码方式：</strong><ul>\n<li>最初，Unicode使用16位编码，可以表示2^16（65536）个字符。这个字符集称为基本多文种平面（Basic Multilingual Plane，BMP）。</li>\n<li>由于BMP容量有限，无法涵盖全球所有字符，因此Unicode进行了扩展。扩展版本使用32位编码，可以表示超过2^21个字符。</li>\n</ul>\n</li>\n<li><strong>字符集范围：</strong><ul>\n<li>Unicode包括了世界上几乎所有语言的字符，涵盖了字母、数字、标点符号、汉字、西里尔字母、阿拉伯字符、印度文字等。</li>\n<li>Unicode还包括一些专用字符，如表情符号、数学符号、箭头等，以满足各种应用的需求。</li>\n</ul>\n</li>\n<li><strong>字符表示：</strong><ul>\n<li>每个Unicode字符都有一个唯一的代码点，它是一个正整数，用来标识该字符。例如，拉丁字母’A’的Unicode代码点是U+0041。</li>\n<li>Unicode代码点可以表示为U+XXXX的形式，其中XXXX是一个代表16进制数的数字。</li>\n</ul>\n</li>\n<li><strong>UTF（Unicode Transformation Format）:</strong><ul>\n<li>UTF是一种用于在计算机内存和外部存储介质中存储Unicode字符的编码方式。</li>\n<li>UTF-8、UTF-16和UTF-32是最常见的UTF变体。它们使用不同的字节序列来表示Unicode字符，允许有效地表示不同范围的字符。</li>\n</ul>\n</li>\n<li><strong>全球性和兼容性：</strong><ul>\n<li>Unicode的全球性和兼容性使得它成为处理多语言文本的标准。不同的操作系统、应用程序和设备都能够使用Unicode，确保文本数据在不同环境中的正确显示和处理。</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"数字表示\"><a href=\"#数字表示\" class=\"headerlink\" title=\"数字表示\"></a>数字表示</h1><ol>\n<li><strong>整数的表示：</strong><ul>\n<li>整数是没有小数部分的整数值。在计算机中，整数可以使用不同的表示方式，包括二进制、八进制、十进制和十六进制等。</li>\n<li><strong>二进制表示：</strong> 在计算机内部，整数通常以二进制形式存储。例如，二进制数1101表示十进制的13。整数的二进制表示是通过对位进行加权求和来实现的。</li>\n<li><strong>十进制表示：</strong> 十进制是我们日常生活中常用的表示方式，整数直接以十进制形式表示。例如，数字123表示整数123。</li>\n<li><strong>十六进制和八进制表示：</strong> 这些是在计算机编程中经常使用的进制。十六进制使用0-9和A-F表示16个数字，而八进制使用0-7表示。</li>\n</ul>\n</li>\n<li><strong>实数的表示：</strong><ul>\n<li>实数包括整数部分和小数部分，可以表示正数和负数。在计算机中，实数的表示方式通常涉及浮点数表示。</li>\n<li><strong>浮点数表示：</strong> 浮点数使用科学计数法的形式，即尾数和指数的组合。例如，1.23可以表示为1.23 x 10^0，其中1.23是尾数，0是指数。在计算机中，浮点数采用IEEE 754标准，用于存储单精度（32位）和双精度（64位）浮点数。</li>\n<li><strong>定点表示：</strong> 定点表示是一种表示实数的方法，其中小数点的位置是固定的。这对于一些嵌入式系统和特定应用场景可能更适用。</li>\n</ul>\n</li>\n</ol>\n<p>在任何数字表示中，需要考虑精度和范围。例如，浮点数在表示大范围的实数时可能存在精度损失。计算机科学家和工程师需要根据应用的需求选择适当的数字表示方法，并了解在不同情境下的性能和准确性权衡。</p>\n<h2 id=\"整数表示\"><a href=\"#整数表示\" class=\"headerlink\" title=\"整数表示\"></a>整数表示</h2><p>在计算机中，整数通常以二进制形式表示，而通常使用的位数是32位，即4个字节。这种表示方式称为32位整数表示，它支持范围更广的整数值。</p>\n<p><strong>Two’s Complement（二进制补码）:</strong></p>\n<ul>\n<li>Two’s complement是表示和处理负整数的一种常见方法。在这个表示法中，负整数的二进制表示是其正整数表示的补码形式。这种方法具有许多有用的性质，例如，它可以通过简单的加法和减法操作来处理负数。</li>\n</ul>\n<p><strong>例子:</strong></p>\n<ul>\n<li>考虑一个32位整数，例如，<code>00000101 00000000 00000000 00000111</code>。这是一个正整数，它的十进制值为<code>13474279</code>。</li>\n<li>如果我们要表示负数，我们可以使用Two’s Complement。首先，计算正整数的二进制补码。对于正数<code>13474279</code>，其二进制表示是<code>00000101 00000000 00000000 00000111</code>。然后，取反并加1，得到补码<code>11111010 11111111 11111111 11111001</code>。这是负整数<code>-13474279</code>的二进制表示。</li>\n</ul>\n<p><strong>Two’s Complement的优势:</strong></p>\n<ul>\n<li>Two’s Complement在计算机系统中被广泛使用，因为它具有一些优势，例如简化加法和减法操作，且不需要专门的减法电路。</li>\n<li>它使得计算机可以更容易地执行算术运算，同时减小了硬件的复杂性。</li>\n</ul>\n<h3 id=\"补码的计算\"><a href=\"#补码的计算\" class=\"headerlink\" title=\"补码的计算\"></a>补码的计算</h3><h4 id=\"步骤1-找到整数的二进制表示\"><a href=\"#步骤1-找到整数的二进制表示\" class=\"headerlink\" title=\"步骤1: 找到整数的二进制表示\"></a>步骤1: 找到整数的二进制表示</h4><ol>\n<li><strong>确定整数的绝对值的二进制表示：</strong><ul>\n<li>将整数的绝对值转换为二进制形式，忽略符号。这包括确定整数的二进制表示中的位数，以及每个位上的二进制值。</li>\n</ul>\n</li>\n<li><strong>确定二进制表示的位数：</strong><ul>\n<li>对于32位整数，将二进制表示补齐为32位。在有符号整数的表示中，最高位是符号位。</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"步骤2-计算补码\"><a href=\"#步骤2-计算补码\" class=\"headerlink\" title=\"步骤2: 计算补码\"></a>步骤2: 计算补码</h4><ol>\n<li><strong>对正整数，补码即是其二进制表示：</strong><ul>\n<li>对于正整数，其补码就是其二进制表示，因为正整数的原码、反码和补码都相同。</li>\n</ul>\n</li>\n<li><strong>对于负整数，计算补码：</strong><ul>\n<li>取正整数的反码：将每个位取反，即0变为1，1变为0。</li>\n<li>对反码加1：在反码的基础上加1，得到补码。</li>\n</ul>\n</li>\n</ol>\n<p>总结来说就是一句话，如果是正数，那就是二进制，如果是负数，<strong>二进制取反再加1</strong></p>\n<h4 id=\"例子：\"><a href=\"#例子：\" class=\"headerlink\" title=\"例子：\"></a>例子：</h4><p>让我们以一个8位整数为例，计算整数-5的二进制补码。</p>\n<h4 id=\"步骤1-找到整数的二进制表示-1\"><a href=\"#步骤1-找到整数的二进制表示-1\" class=\"headerlink\" title=\"步骤1: 找到整数的二进制表示\"></a>步骤1: 找到整数的二进制表示</h4><ul>\n<li>5的二进制表示是<code>0000 0101</code>。</li>\n</ul>\n<h4 id=\"步骤2-计算补码-1\"><a href=\"#步骤2-计算补码-1\" class=\"headerlink\" title=\"步骤2: 计算补码\"></a>步骤2: 计算补码</h4><ul>\n<li>反码是<code>1111 1010</code>。</li>\n<li>补码是反码加1，即<code>1111 1011</code>。</li>\n</ul>\n<p>所以，整数-5的8位二进制补码是<code>1111 1011</code>。</p>\n<h4 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h4><ul>\n<li>对于正整数，补码即为其二进制表示。</li>\n<li>对于负整数，补码是取其正整数的反码并加1。</li>\n</ul>\n<h3 id=\"浮点数表示\"><a href=\"#浮点数表示\" class=\"headerlink\" title=\"浮点数表示\"></a>浮点数表示</h3><p>实数的表示通常涉及到浮点数表示，而IEEE 754标准是最广泛使用的浮点数表示和运算标准。IEEE 754定义了浮点数的格式、特殊值以及一系列在这些值上执行的浮点运算。</p>\n<h4 id=\"IEEE-754浮点数表示：\"><a href=\"#IEEE-754浮点数表示：\" class=\"headerlink\" title=\"IEEE 754浮点数表示：\"></a>IEEE 754浮点数表示：</h4><ol>\n<li><strong>浮点数格式：</strong><ul>\n<li>IEEE 754标准定义了几种浮点数格式，包括单精度（32位）和双精度（64位）浮点数。这些格式分为三个部分：符号位、指数位和尾数位。</li>\n<li>对于单精度浮点数，通常采用1位符号位、8位指数位和23位尾数位。对于双精度浮点数，分别是1位符号位、11位指数位和52位尾数位。</li>\n</ul>\n</li>\n<li><strong>浮点数表示：</strong><ul>\n<li>一个浮点数的表示基本上可以分为三个部分：符号、指数和尾数。符号位表示数的正负，指数位确定数的数量级，尾数位表示数的精度。</li>\n<li>例如，单精度浮点数的二进制表示为：<code>(-1)^s * 1.f * 2^(e-127)</code>，其中<code>s</code>是符号位，<code>f</code>是尾数位，<code>e</code>是指数位。</li>\n</ul>\n</li>\n<li><strong>特殊值：</strong><ul>\n<li>IEEE 754定义了一些特殊的浮点数值，如正无穷大、负无穷大、NaN（Not a Number）等，以处理在计算中可能遇到的特殊情况。</li>\n</ul>\n</li>\n<li><strong>浮点数运算：</strong><ul>\n<li>IEEE 754标准还定义了浮点数的一系列运算，包括加法、减法、乘法和除法。这些运算的结果遵循浮点数的规范，考虑了舍入误差和溢出等问题。</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"https://cdn.jsdelivr.net/gh/GeneralK1ng/My_Blog_IMG@main/img/Representation-of-numbers.png\"></p>\n<h1 id=\"程序中的变量声明\"><a href=\"#程序中的变量声明\" class=\"headerlink\" title=\"程序中的变量声明\"></a>程序中的变量声明</h1><p>在程序中声明变量是向编译器说明在程序运行期间将要使用的变量，并告诉编译器为这些变量保留正确数量的内存空间。此外，还指定了变量的编码、解码和表示方案。</p>\n<h3 id=\"声明变量的目的：\"><a href=\"#声明变量的目的：\" class=\"headerlink\" title=\"声明变量的目的：\"></a>声明变量的目的：</h3><ol>\n<li><strong>内存分配：</strong><ul>\n<li>当你声明一个变量时，编译器负责分配适当大小的内存以存储该变量的值。不同类型的变量需要不同大小的内存空间，如<code>char</code>通常需要1字节，<code>short</code>需要2字节，<code>long</code>需要4字节，<code>long double</code>需要8字节。</li>\n</ul>\n</li>\n<li><strong>数据类型说明：</strong><ul>\n<li>变量声明中的数据类型告诉编译器如何解释这段内存中的位模式。不同的数据类型使用不同的编码和解码规则。</li>\n</ul>\n</li>\n</ol>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">char letter;              // 声明一个字符变量，占用1字节\nshort count;              // 声明一个短整型变量，占用2字节\nlong world_population;    // 声明一个长整型变量，占用4字节\nlong double world_weight; // 声明一个长双精度浮点数变量，占用8字节</code></pre>\n\n<h3 id=\"其他注意事项：\"><a href=\"#其他注意事项：\" class=\"headerlink\" title=\"其他注意事项：\"></a>其他注意事项：</h3><ol>\n<li><strong>变量名称：</strong><ul>\n<li>变量名用于在程序中标识和引用变量。在上述示例中，<code>letter</code>、<code>count</code>、<code>world_population</code>和<code>world_weight</code>是变量的名称。</li>\n</ul>\n</li>\n<li><strong>初始值：</strong><ul>\n<li>变量声明时可以选择提供初始值。例如，<code>int x = 10;</code>将创建一个整数变量<code>x</code>，并将其初始化为10。</li>\n</ul>\n</li>\n<li><strong>作用域：</strong><ul>\n<li>变量声明的作用域定义了变量在程序中的可见性和生命周期。变量可以是全局的（在整个程序中可见）或局部的（在特定代码块或函数中可见）。</li>\n</ul>\n</li>\n<li><strong>类型修饰符：</strong><ul>\n<li>在一些编程语言中，还可以使用类型修饰符来提供更多信息，例如<code>const</code>表示常量、<code>volatile</code>表示易失性等。</li>\n</ul>\n</li>\n</ol>\n","text":"继续讲这个字符相关的一些知识，看了一眼CPT101的课件为什么每周只有一节课但是会有两个课件。。。 字母数字字符计算机系统中处理的数据通常包括字母、数字和其他字符，这些统称为alphanumeric characters（字母数字字符）。让我们逐一讨论这三种类型的字符： Lett...","link":"","photos":[],"count_time":{"symbolsCount":"8k","symbolsTime":"7 mins."},"categories":[],"tags":[{"name":"CPT101复习","slug":"CPT101复习","count":7,"path":"api/tags/CPT101复习.json"},{"name":"笔记","slug":"笔记","count":49,"path":"api/tags/笔记.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%AD%97%E6%AF%8D%E6%95%B0%E5%AD%97%E5%AD%97%E7%AC%A6\"><span class=\"toc-text\">字母数字字符</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E8%BF%9B%E5%88%B6%E7%BC%96%E7%A0%81\"><span class=\"toc-text\">二进制编码</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%90%84%E7%A7%8D%E7%BC%96%E7%A0%81%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">各种编码方式</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#ASCII%E7%A0%81\"><span class=\"toc-text\">ASCII码</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8B%93%E5%B1%95%E8%A1%A8\"><span class=\"toc-text\">拓展表</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%86%E7%B1%BB\"><span class=\"toc-text\">分类</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B1%80%E9%99%90%E6%80%A7\"><span class=\"toc-text\">局限性</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Unicode\"><span class=\"toc-text\">Unicode</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%95%B0%E5%AD%97%E8%A1%A8%E7%A4%BA\"><span class=\"toc-text\">数字表示</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B4%E6%95%B0%E8%A1%A8%E7%A4%BA\"><span class=\"toc-text\">整数表示</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%A1%A5%E7%A0%81%E7%9A%84%E8%AE%A1%E7%AE%97\"><span class=\"toc-text\">补码的计算</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%AD%A5%E9%AA%A41-%E6%89%BE%E5%88%B0%E6%95%B4%E6%95%B0%E7%9A%84%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%A1%A8%E7%A4%BA\"><span class=\"toc-text\">步骤1: 找到整数的二进制表示</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%AD%A5%E9%AA%A42-%E8%AE%A1%E7%AE%97%E8%A1%A5%E7%A0%81\"><span class=\"toc-text\">步骤2: 计算补码</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BE%8B%E5%AD%90%EF%BC%9A\"><span class=\"toc-text\">例子：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%AD%A5%E9%AA%A41-%E6%89%BE%E5%88%B0%E6%95%B4%E6%95%B0%E7%9A%84%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%A1%A8%E7%A4%BA-1\"><span class=\"toc-text\">步骤1: 找到整数的二进制表示</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%AD%A5%E9%AA%A42-%E8%AE%A1%E7%AE%97%E8%A1%A5%E7%A0%81-1\"><span class=\"toc-text\">步骤2: 计算补码</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93%EF%BC%9A\"><span class=\"toc-text\">总结：</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B5%AE%E7%82%B9%E6%95%B0%E8%A1%A8%E7%A4%BA\"><span class=\"toc-text\">浮点数表示</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#IEEE-754%E6%B5%AE%E7%82%B9%E6%95%B0%E8%A1%A8%E7%A4%BA%EF%BC%9A\"><span class=\"toc-text\">IEEE 754浮点数表示：</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%A8%8B%E5%BA%8F%E4%B8%AD%E7%9A%84%E5%8F%98%E9%87%8F%E5%A3%B0%E6%98%8E\"><span class=\"toc-text\">程序中的变量声明</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A3%B0%E6%98%8E%E5%8F%98%E9%87%8F%E7%9A%84%E7%9B%AE%E7%9A%84%EF%BC%9A\"><span class=\"toc-text\">声明变量的目的：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%B6%E4%BB%96%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9%EF%BC%9A\"><span class=\"toc-text\">其他注意事项：</span></a></li></ol></li></ol></li></ol>","author":{"name":"General_K1ng","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/GeneralK1ng/My_Blog_IMG@main/img/avatar.png","link":"/","description":"一名正在努力学习计算机的菜鸟","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/BILIBILI.svg","link":"https://space.bilibili.com/32927332"},"csdn":{"icon":"/svg/csdn.svg","link":"https://blog.csdn.net/qq_34849354"},"github":{"icon":"/svg/GitHub.svg","link":"https://github.com/GeneralK1ng"},"QQ":{"icon":"/svg/QQ.svg","link":"tencent://AddContact/?fromId=45&fromSubId=1&subcmd=all&uin=2822688858"}}}},"mapped":true,"prev_post":{"title":"Crash Course For CPT107-1","uid":"f149fe3b0d48e404f320a7e5e6c42caa","slug":"Crash-Course-For-CPT107-1","date":"2023-12-29T02:24:21.000Z","updated":"2024-01-02T10:54:13.753Z","comments":true,"path":"api/articles/Crash-Course-For-CPT107-1.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/GeneralK1ng/My_Blog_IMG@main/img/CPT107-img.png","text":"快要考试了哈，没事，最近我也才开始学习离散数学，这篇文章主要帮助各位以最快的速度上手CPT107这门课程，看完不一定会，但是会做题就行。 反证法反证法，高中应该都学过，这里直接给一个模板，然后大伙自己去找题试试。 模板 命题： 假设命题 P 不成立。 步骤： 假设反证法： 假设命...","link":"","photos":[],"count_time":{"symbolsCount":"5.6k","symbolsTime":"5 mins."},"categories":[],"tags":[{"name":"笔记","slug":"笔记","count":49,"path":"api/tags/笔记.json"},{"name":"CPT107","slug":"CPT107","count":3,"path":"api/tags/CPT107.json"}],"author":{"name":"General_K1ng","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/GeneralK1ng/My_Blog_IMG@main/img/avatar.png","link":"/","description":"一名正在努力学习计算机的菜鸟","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/BILIBILI.svg","link":"https://space.bilibili.com/32927332"},"csdn":{"icon":"/svg/csdn.svg","link":"https://blog.csdn.net/qq_34849354"},"github":{"icon":"/svg/GitHub.svg","link":"https://github.com/GeneralK1ng"},"QQ":{"icon":"/svg/QQ.svg","link":"tencent://AddContact/?fromId=45&fromSubId=1&subcmd=all&uin=2822688858"}}}}},"next_post":{"title":"CPT101 Review-4","uid":"6a06535b3bcdc549550c9f79e3c5e8f7","slug":"CPT101-Review-4","date":"2023-12-11T10:50:04.000Z","updated":"2024-01-08T11:37:36.272Z","comments":true,"path":"api/articles/CPT101-Review-4.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/GeneralK1ng/My_Blog_IMG@main/img/CPT101-img.png","text":"继续复习下一节。 数据，信息，知识这三者是我们在对于信息处理时的三个不同的抽象阶段。 数据（Data）： 数据是原始的、未经加工的事实或细节。它是离散的、不加组织的符号或符号集合，通常是数字、文字、图像等的表示。 数据本身并没有给予任何含义，只有在一定的上下文中才能被理解。例如，...","link":"","photos":[],"count_time":{"symbolsCount":"6.6k","symbolsTime":"6 mins."},"categories":[],"tags":[{"name":"CPT101复习","slug":"CPT101复习","count":7,"path":"api/tags/CPT101复习.json"},{"name":"笔记","slug":"笔记","count":49,"path":"api/tags/笔记.json"}],"author":{"name":"General_K1ng","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/GeneralK1ng/My_Blog_IMG@main/img/avatar.png","link":"/","description":"一名正在努力学习计算机的菜鸟","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/BILIBILI.svg","link":"https://space.bilibili.com/32927332"},"csdn":{"icon":"/svg/csdn.svg","link":"https://blog.csdn.net/qq_34849354"},"github":{"icon":"/svg/GitHub.svg","link":"https://github.com/GeneralK1ng"},"QQ":{"icon":"/svg/QQ.svg","link":"tencent://AddContact/?fromId=45&fromSubId=1&subcmd=all&uin=2822688858"}}}}}}