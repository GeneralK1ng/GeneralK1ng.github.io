{"title":"Java_Learning(Week4)","uid":"a8c731e8e4e06940923b6b0b44a5b222","slug":"Java-Learning-Week4","date":"2023-10-09T10:37:13.000Z","updated":"2023-10-09T13:00:16.629Z","comments":true,"path":"api/articles/Java-Learning-Week4.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/GeneralK1ng/My_Blog_IMG@main/img/codeBackground.png","content":"<p>有一说一，咱们学校这个课的进度是真的赶啊，这才几节课就到数组和方法了。。</p>\n<h2 id=\"循环补充\"><a href=\"#循环补充\" class=\"headerlink\" title=\"循环补充\"></a>循环补充</h2><p>什么？原来上周没有讲什么是For循环，那我上周笔记不就多写了！</p>\n<p>怪不得感觉上周写的这么多。。。算了无所谓了，那么这里就来补充一些上周没有提到的东西。</p>\n<h3 id=\"break关键字\"><a href=\"#break关键字\" class=\"headerlink\" title=\"break关键字\"></a><code>break</code>关键字</h3><p><code>break</code> 关键字用于立即退出当前所在的循环，不再执行剩余的循环迭代。它的主要用途是在满足某个条件时，提前跳出循环，以节省计算资源或处理特殊情况。</p>\n<p><strong>使用情况：</strong></p>\n<ul>\n<li><code>break</code> 可以用在 <code>for</code>、<code>while</code>、和 <code>do-while</code> 循环中，以及 <code>switch</code> 语句中。</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">for (int i = 1; i &lt;= 10; i++) {\n    if (i == 5) {\n        break; // 当 i 等于 5 时，退出循环\n    }\n    System.out.println(i);\n}</code></pre>\n\n<p>上述代码就只会输出数字 1 到 4，然后退出循环，也就是说，循环后面的就不会执行了，就会直接跳出。</p>\n<h3 id=\"continue-关键字\"><a href=\"#continue-关键字\" class=\"headerlink\" title=\"continue 关键字\"></a><code>continue</code> 关键字</h3><p><code>continue</code> 关键字用于跳过当前迭代，并继续下一次迭代。它的主要用途是在某些条件下，跳过某些循环迭代，但不会退出整个循环。</p>\n<p>简单来说就是跳过一次循环，继续执行下面的循环操作。</p>\n<p><strong>使用情况：</strong></p>\n<ul>\n<li><code>continue</code> 可以用在 <code>for</code>、<code>while</code>、和 <code>do-while</code> 循环中。</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">for (int i = 1; i &lt;= 5; i++) {\n    if (i == 3) {\n        continue; // 当 i 等于 3 时，跳过当前迭代\n    }\n    System.out.println(i);\n}</code></pre>\n\n<p>上述代码将输出数字 1、2、4、5，跳过了数字 3。</p>\n<h3 id=\"循环结构嵌套\"><a href=\"#循环结构嵌套\" class=\"headerlink\" title=\"循环结构嵌套\"></a>循环结构嵌套</h3><p>跟if一样，循环结构也是可以进行嵌套操作的，无论是while循环还是For循环，或者两者杂交，都可以。</p>\n<h4 id=\"基本的嵌套循环结构\"><a href=\"#基本的嵌套循环结构\" class=\"headerlink\" title=\"基本的嵌套循环结构\"></a>基本的嵌套循环结构</h4><p>最常见的循环嵌套是使用for循环。下面是一个简单的例子，演示如何使用嵌套的for循环打印一个矩形图案：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">for (int i = 1; i &lt;= 5; i++) {\n    for (int j = 1; j &lt;= 5; j++) {\n        System.out.print(\"* \");\n    }\n    System.out.println(); // 换行\n}</code></pre>\n\n<p>上述代码将输出一个5x5的矩形，如下所示：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">* * * * * \n* * * * * \n* * * * * \n* * * * * \n* * * * * </code></pre>\n\n<h4 id=\"外部循环和内部循环\"><a href=\"#外部循环和内部循环\" class=\"headerlink\" title=\"外部循环和内部循环\"></a>外部循环和内部循环</h4><p>在嵌套循环中，通常有<strong>外部循环</strong>和<strong>内部循环</strong>的概念。外部循环的迭代次数决定了内部循环的执行次数。下面的示例展示了如何使用嵌套循环生成一个数字三角形：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">for (int i = 1; i &lt;= 5; i++) {\n    for (int j = 1; j &lt;= i; j++) {\n        System.out.print(j + \" \");\n    }\n    System.out.println();\n}</code></pre>\n\n<p>这将输出以下数字三角形：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">1 \n1 2 \n1 2 3 \n1 2 3 4 \n1 2 3 4 5 </code></pre>\n\n<h4 id=\"控制循环的流程\"><a href=\"#控制循环的流程\" class=\"headerlink\" title=\"控制循环的流程\"></a>控制循环的流程</h4><p>然后我们就可以通过学到的<code>continue</code>和<code>break</code>关键字进行循环的控制了。<code>break</code>用于退出循环，而<code>continue</code>用于跳过当前迭代并进入下一次迭代。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">for (int i = 1; i &lt;= 5; i++) {\n    if (i == 3) {\n        continue; // 跳过i等于3的迭代\n    }\n    for (int j = 1; j &lt;= 5; j++) {\n        if (j == 4) {\n            break; // 退出内部循环\n        }\n        System.out.print(i + \"-\" + j + \" \");\n    }\n    System.out.println();\n}</code></pre>\n\n<p>这就会输出：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">1-1 1-2 1-3 \n2-1 2-2 2-3 \n4-1 4-2 4-3 \n5-1 5-2 5-3 </code></pre>\n\n<p>可以发现，当进行最外层循环并没有进行第三次操作，直接进行到了第四次，然后内部循环在第四次直接跳出了，所以也并没有打印3之后的数字。</p>\n<p>那么这里就要强调一个重点：</p>\n<h4 id=\"break和continue的注意事项\"><a href=\"#break和continue的注意事项\" class=\"headerlink\" title=\"break和continue的注意事项\"></a><code>break</code>和<code>continue</code>的注意事项</h4><ul>\n<li><code>break</code> 只会退出包含它的<strong>最内层循环</strong>。</li>\n<li>在多层嵌套循环中，可以使用带标签的 <code>break</code> 来退出指定的外部循环。</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">outerloop:\nfor (int i = 1; i &lt;= 3; i++) {\n    for (int j = 1; j &lt;= 3; j++) {\n        if (i * j == 6) {\n            break outerloop; // 通过标签退出外部循环\n        }\n        System.out.println(i * j);\n    }\n}</code></pre>\n\n<ul>\n<li><code>continue</code> 只会影响包含它的当前循环迭代。</li>\n<li>在多层嵌套循环中，<code>continue</code> 只会影响包含它的最内层循环迭代。</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">for (int i = 1; i &lt;= 3; i++) {\n    for (int j = 1; j &lt;= 3; j++) {\n        if (i * j == 6) {\n            continue; // 跳过当前内部循环的迭代\n        }\n        System.out.println(i * j);\n    }\n}</code></pre>\n\n<h4 id=\"循环嵌套的性能\"><a href=\"#循环嵌套的性能\" class=\"headerlink\" title=\"循环嵌套的性能\"></a>循环嵌套的性能</h4><p>说实话，这周看了很多人写的代码，让我大为震惊，最高的循环嵌套次数打到了五六个for循环嵌套，这个不是说不行，但是循环嵌套的性能是很低的，专业一点是时间复杂度是很高的，嵌套循环的时间复杂度是外部循环次数与内部循环次数的乘积。如果循环次数很大，可能会导致程序运行时间过长。</p>\n<p>所以，尽量避免不必要的嵌套循环。</p>\n<p>记住！</p>\n<p>一定要记住！</p>\n<h3 id=\"用循环实现多个骰子\"><a href=\"#用循环实现多个骰子\" class=\"headerlink\" title=\"用循环实现多个骰子\"></a>用循环实现多个骰子</h3><p>呃，其实没啥写的，既然课件上面有，我就写在这里吧，我不会去用<code>Math.random()</code>那个方法，过于复杂，这里我是直接创建Random的对象来进行随机数的产生。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">import java.util.Random;\nimport java.util.Scanner;\n\npublic class DiceSimulator {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);// 创建键盘录入的对象\n\n        System.out.print(\"请输入要投掷的骰子次数: \");// 一个提示\n        int numberOfThrows = scanner.nextInt();// 接收需要投掷的次数，或者说有几个骰子\n\n        if (numberOfThrows &lt;= 0) {// 无效判断，如果是负数或者0就直接停止\n            System.out.println(\"无效的次数。请输入一个正整数。\");\n            return;\n        }\n\n        Random random = new Random(); // 创建Random随机类\n\n        System.out.println(\"投掷结果：\");\n        for (int i = 0; i &lt; numberOfThrows; i++) {// 用for循环实现，只要小于录入的投掷次数就持续循环\n            int diceRoll = random.nextInt(6) + 1; // 生成1到6之间的随机整数\n            System.out.println(\"第 \" + (i + 1) + \" 次投掷: \" + diceRoll);// 输出\n        }\n\n    }\n}</code></pre>\n\n<p>应该没有什么需要我特别强调的吧，看注释应该都能看懂。</p>\n<h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><p>说实话讲到这里还是有些惊讶的，没想到这周能涉及到数组，按理说应该会在循环和条件语句那里停一段时间做做算法题什么的，没想到进度这么猛。所以我感觉其实对大部分人来说还是比较困难的。</p>\n<p>但是那能怎么办呢？</p>\n<h3 id=\"什么是数组？\"><a href=\"#什么是数组？\" class=\"headerlink\" title=\"什么是数组？\"></a>什么是数组？</h3><p>数组是一种数据结构，用于存储相同类型的数据元素的集合。在Java中，数组具有以下特点：</p>\n<ul>\n<li><strong>固定大小：</strong> 数组一旦创建，其大小通常是固定的，不能随意增加或减少。这意味着在创建数组时必须指定其大小，而且不可更改。</li>\n<li><strong>索引访问：</strong> 数组中的每个元素都有一个唯一的索引值，用于访问该元素。索引通常从0开始，然后递增，最大索引是数组大小减1。</li>\n<li><strong>相同数据类型：</strong> 数组中的所有元素必须是相同的数据类型，例如整数、浮点数、字符等。</li>\n</ul>\n<p>记住，数组是一种数据结构，在内存当中用来存储数据，不仅是Java当中，C和C++当中，包括任何语言当中你都能见到数组身影。</p>\n<h3 id=\"为什么需要数组？\"><a href=\"#为什么需要数组？\" class=\"headerlink\" title=\"为什么需要数组？\"></a>为什么需要数组？</h3><p>记住，数组是一种数据结构，跟什么语言关系不大，我还是要强调一遍。</p>\n<p>为什么需要数组呢，主要有以下几点：</p>\n<ol>\n<li><strong>组织数据：</strong> 数组提供了一种有效的方式来组织和存储大量数据，这些数据可以按顺序排列，并且可以通过索引快速访问。</li>\n<li><strong>快速访问：</strong> 数组的查询是非常快速的，如果我们知道索引的话，数组就允许我们以常量时间（O(1)）访问特定索引位置的元素，这使得查找、插入和删除操作变得非常高效。</li>\n<li><strong>内存管理：</strong> 数组在内存中是连续存储的，这有助于减少内存访问的开销，提高数据的读取速度。</li>\n<li><strong>数学和算法：</strong> 数组是许多数学和算法问题的基本工具，例如排序、搜索、统计等。</li>\n</ol>\n<p>总之，数组是一种数据结构，为我们实际应用有很大帮助，有以下几点作用：</p>\n<ol>\n<li><strong>存储和访问数据：</strong> 数组用于存储和访问大量数据元素，如存储学生成绩、员工信息、图像像素等。</li>\n<li><strong>迭代和遍历：</strong> 数组使得我们可以轻松遍历数据集，执行各种操作，例如打印所有元素、查找特定元素等。</li>\n<li><strong>排序和搜索：</strong> 数组是许多排序和搜索算法的基础，如冒泡排序、快速排序、二分查找等。</li>\n<li><strong>实现其他数据结构：</strong> 数组可以用来实现其他高级数据结构，如栈、队列、堆等。</li>\n<li><strong>多维数组：</strong> 数组可以扩展到多维，用于表示矩阵、图形等复杂结构。</li>\n<li><strong>缓存性能优化：</strong> 数组的连续内存存储有助于提高缓存性能，因为数据通常在内存中连续存储，这降低了内存访问的开销。</li>\n</ol>\n<h3 id=\"如何声明和创建数组？\"><a href=\"#如何声明和创建数组？\" class=\"headerlink\" title=\"如何声明和创建数组？\"></a>如何声明和创建数组？</h3><p>我们必须要先声明数组这个变量，才能在程序中使用数组。下面是声明数组变量的语法：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">dataType[] arrayName;   // 首选的方法\n \n或者\n \ndataType arrayName[];  // 效果相同，但不是首选方法</code></pre>\n\n<p><strong>注意:</strong> 建议使用 <code>**dataType[] arrayName**</code> 的声明风格声明数组变量。 <code>dataType arrayName[]</code> 风格是来自 <code>C/C++</code> 语言 ，在<code>Java</code>中采用是为了让 <code>C/C++</code> 程序员能够快速理解Java语言。</p>\n<p>然后接下来就是创建数组：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">arrayName = new dataType[arraySize]; // 创建数组</code></pre>\n\n<p>其中：</p>\n<ul>\n<li><code>dataType</code> 表示数组中元素的数据类型，例如 <code>int</code>、<code>double</code>、<code>String</code> 等。</li>\n<li><code>arrayName</code> 是数组的名称，可以根据需要自定义。</li>\n<li><code>arraySize</code> 是数组的大小，即数组可以容纳的元素数量。</li>\n</ul>\n<p>上面的语法语句做了两件事：</p>\n<ul>\n<li>使用 <code>dataType[arraySize]</code> 创建了一个数组。</li>\n<li>把新创建的数组的引用赋值给变量 <code>arrayName</code>。</li>\n</ul>\n<p>当然我们一般直接写一行，直接声明并创建：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">dataType[] arrayName = new dataType[arraySize]</code></pre>\n\n<p>当然我们如果知道数组当中需要存放的值，我们也可以这样直接创建：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">dataType[] arrayName = {value0, value1, ..., valuek};</code></pre>\n\n<p>然后最值得注意的就是数组的索引是从<code>0</code>开始的，为什么呢？我也不知道，记住就行。</p>\n<p>那么最后举个例子创建一个用来存放整型的长度为5的数组吧！</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">int[] numbers; // 声明一个整数数组\nnumbers = new int[5]; // 创建一个包含5个整数的数组</code></pre>\n\n<h3 id=\"数组的赋值与访问\"><a href=\"#数组的赋值与访问\" class=\"headerlink\" title=\"数组的赋值与访问\"></a>数组的赋值与访问</h3><p>可以使用数组的索引来访问和赋值数组元素。数组的索引从0开始，最大索引是数组长度减1。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">int[] numbers = new int[5];\nnumbers[0] = 10; // 给第一个元素赋值\nnumbers[1] = 20; // 给第二个元素赋值\n\nint firstNumber = numbers[0]; // 访问第一个元素\nint secondNumber = numbers[1]; // 访问第二个元素</code></pre>\n\n<p>那么如果我们此时去访问除了第一和第二索引之外的值会发生什么？</p>\n<p>因为我们没有赋值，所以其实返回的就是默认值，默认值是0。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class ArrayExample {\n    public static void main(String[] args) {\n        int[] numbers = new int[5];\n        \n        // 给索引0和1赋值\n        numbers[0] = 10;\n        numbers[1] = 20;\n        \n        // 访问索引2、3、4\n        System.out.println(numbers[2]); // 默认为0\n        System.out.println(numbers[3]); // 默认为0\n        System.out.println(numbers[4]); // 默认为0\n    }\n}</code></pre>\n\n<p>输出如下：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">0\n0\n0</code></pre>\n\n<p>那如果我访问比这个数组长度更长的索引会发生什么嘞？</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class ArrayExample {\n    public static void main(String[] args) {\n        int[] numbers = new int[5];\n        \n        // 给索引0和1赋值\n        numbers[0] = 10;\n        numbers[1] = 20;\n        \n        // 访问索引5\n        System.out.println(numbers[5]);\n    }\n}</code></pre>\n\n<p>会直接报出异常，哈哈：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException: Index 5 out of bounds for length 5\n\tat CPT111.DiceSimulator.main(DiceSimulator.java:15)</code></pre>\n\n<p>这里我们触发了数组索引越界异常（<code>ArrayIndexOutOfBoundsException</code>），这是一个<strong>运行时异常</strong>。在Java中，数组的索引从0开始，所以有效索引范围是0到数组长度减1。</p>\n<p>不清楚运行时异常是什么没关系，你就把它当做你的程序的一个bug就好，在非常后面我们就会了解到。</p>\n<h3 id=\"数组的遍历\"><a href=\"#数组的遍历\" class=\"headerlink\" title=\"数组的遍历\"></a>数组的遍历</h3><p>遍历数组是访问数组中所有元素的常见操作。可以使用循环来遍历数组，常见的是for循环遍历，当然在之后也有增强for，现阶段我们就先用普通for进行遍历吧。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">int[] numbers = {1, 2, 3, 4, 5};\nfor (int i = 0; i &lt; numbers.length; i++) {\n    System.out.println(numbers[i]);\n}</code></pre>\n\n<p>这里我们遍历并且输出了这个数组当中存储的数据，然后就是讲一下这个<code>number.length</code>这个就是会返回对应数组的长度。</p>\n<h3 id=\"求数组当中的平均值，最大值，最小值，总和\"><a href=\"#求数组当中的平均值，最大值，最小值，总和\" class=\"headerlink\" title=\"求数组当中的平均值，最大值，最小值，总和\"></a>求数组当中的平均值，最大值，最小值，总和</h3><p>那就按照课件我们继续使用上面那个我们扔骰子的代码，把它继续更改一下，无非就是把每次随机的值存储到一个数组里面进行输出。</p>\n<p>我就直接把代码丢到这里了：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">import java.util.Random;\nimport java.util.Scanner;\n\npublic class DiceSimulator {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        System.out.print(\"请输入要投掷的骰子次数: \");\n        int numberOfThrows = scanner.nextInt();\n\n        if (numberOfThrows &lt;= 0) {\n            System.out.println(\"无效的次数。请输入一个正整数。\");\n            return;\n        }\n\n        Random random = new Random();\n        \n        int[] diceValues = new int[numberOfThrows]; // 创建一个数组来存储每次投掷的值\n\n        System.out.println(\"投掷结果：\");\n\n        for (int i = 0; i &lt; numberOfThrows; i++) {\n            int diceRoll = random.nextInt(6) + 1;\n            diceValues[i] = diceRoll; // 将投掷结果存储到数组中\n            System.out.println(\"第 \" + (i + 1) + \" 次投掷: \" + diceRoll);\n        }\n        \n        int max = diceValues[0]; // 初始化最大值\n        int min = diceValues[0]; // 初始化最小值\n\n        //计算总和\n        int sum = 0;\n        for (int i = 0; i &lt; diceValues.length; i++) {\n            sum += diceValues[i];\n        }\n        \n        // 计算平均值\n        double average = (double) sum / numberOfThrows;\n\n        // 计算最大值\n        for (int i = 0; i &lt; diceValues.length; i++) {\n            if (diceValues[i] &gt; max){\n                max = diceValues[i];\n            }\n        }\n\n        //计算最小值\n        for (int i = 0; i &lt; diceValues.length; i++) {\n            if (diceValues[i] &lt; min){\n                min = diceValues[i];\n            }\n        }\n\n        System.out.println(\"总和: \" + sum);\n        System.out.println(\"最大值: \" + max);\n        System.out.println(\"最小值: \" + min);\n        System.out.println(\"平均值: \" + average);\n    }\n}</code></pre>\n\n<p>本来有更好的写法，但是为了帮助大家理解遍历计算这些值的方法，就先这样写了，这里也要强调一件事情，那就是<strong>一个循环只干一件事情</strong>。</p>\n<p>比如计算总和，那么这个循环就只计算总和，不要想着一个循环里面我们既计算总和，又把最大值一算，这个习惯很不好，如果各位后续开发一些项目出了bug，想要进行排查的时候你就知道如果你写一个非常臃肿的循环有多么头疼了。</p>\n<p>不要以为一个循环解决了很多事情就觉得自己很聪明，其实hhh。。。</p>\n<p>那么数组就先到这里，后面有补充的我会继续补充，毕竟课件就讲了这些，这还是我补充过的。</p>\n<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><p>这个我是更没想到，我们居然讲到方法了，这可真的有点太快了。。。</p>\n<p>课件的引入我就不想说了，就是让我们看我们的代码，wow，我们的main方法为什么写的这么长，有没有什么办法让他简单易读又不影响正常逻辑呢？</p>\n<h3 id=\"什么是方法？\"><a href=\"#什么是方法？\" class=\"headerlink\" title=\"什么是方法？\"></a>什么是方法？</h3><p>Java方法是一种编程结构，它们是一组有序的语句，用于执行特定的功能或任务。这些功能可以解决各种问题。</p>\n<ol>\n<li><strong>问题解决步骤的组合：</strong> 方法实际上是问题解决步骤的组合。它们让你将一个大问题分解为更小、可管理的部分，然后以特定的方式组合这些部分，以实现所需的功能。</li>\n<li><strong>方法存在于类或对象中：</strong> 方法通常与类或对象相关联。它们可以被定义在类的内部，以便与类的其他成员（如属性和其他方法）共享数据和行为。此外，一些方法也可以与对象相关联，使其成为对象的行为。</li>\n<li><strong>方法的创建和引用：</strong> 在编写Java程序时，你可以创建方法并在程序中使用它们。创建方法意味着定义方法的名称、参数和执行的操作。一旦定义，你可以在程序的其他部分引用这些方法，以便重复使用它们，而不必每次都重新编写相同的代码。</li>\n</ol>\n<p>说白了，目的就是为了更加简洁，减少代码量，重复使用。</p>\n<p>刚好这些就是方法的优点。</p>\n<h3 id=\"方法的命名规则\"><a href=\"#方法的命名规则\" class=\"headerlink\" title=\"方法的命名规则\"></a>方法的命名规则</h3><p>当然，这个上课没说，但是这里我要提一下。</p>\n<ol>\n<li><strong>方法名应该有意义：</strong> 方法名应该反映方法的功能和目的。使用清晰、有意义的词汇来描述方法的操作，这有助于其他开发人员理解代码的含义。</li>\n<li><strong>采用驼峰命名法（Camel Case）：</strong> Java通常使用驼峰命名法来命名方法，这意味着方法名的首字母小写，后续的单词首字母大写，并且不使用下划线或连字符。例如：<code>calculateTotalAmount()</code>。</li>\n<li><strong>遵循Java标识符规则：</strong> 方法名必须遵守Java标识符的规则。合法的方法名可以包含字母、数字和下划线，但必须以字母（a-z或A-Z）或下划线（_）开头。不能使用Java的关键字作为方法名。</li>\n<li><strong>使用动词或动词短语：</strong> 方法名通常以动词或动词短语开头，以表示方法正在执行的操作。例如，<code>calculateTotal()</code> 或 <code>validateInput()</code>。</li>\n<li><strong>选择恰当的名字长度：</strong> 方法名应该足够长以清楚地描述其功能，但不要过于冗长。避免使用过长的方法名，因为这可能会降低代码的可读性。</li>\n<li><strong>根据约定选择命名：</strong> Java社区有一些广泛接受的命名约定，例如：<ul>\n<li><code>get</code> 开头的方法通常用于获取对象的属性值，例如 <code>getName()</code></li>\n<li><code>set</code> 开头的方法通常用于设置对象的属性值，例如 <code>setName(String name)</code></li>\n<li><code>is</code> 开头的方法通常用于布尔属性的getter方法，例如 <code>isActive()</code></li>\n</ul>\n</li>\n<li><strong>命名一致性：</strong> 在整个代码库中保持方法命名的一致性非常重要。如果一个方法执行类似的操作，应该使用类似的命名约定。</li>\n<li><strong>避免使用缩写：</strong> 尽量避免使用缩写，除非缩写是广泛理解的，不会导致歧义。使用完整的单词可以提高代码的可读性。</li>\n<li><strong>根据领域专业知识选择命名：</strong> 如果您的代码与特定领域相关，尽量使用该领域的专业术语来命名方法，以提高代码的可理解性。</li>\n<li><strong>使用Java命名约定：</strong> 遵循Java编码规范和约定，这有助于保持代码的一致性，并让其他人更容易理解你的代码。</li>\n</ol>\n<p>好！那就继续！</p>\n<h3 id=\"方法的定义\"><a href=\"#方法的定义\" class=\"headerlink\" title=\"方法的定义\"></a>方法的定义</h3><p>一般来说，定义一个方法，语法如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">修饰符 返回类型 方法名(参数列表) throws 异常列表 {\n    // 方法体\n}\n</code></pre>\n\n<p>有点看不懂无所谓，我放一张图（来自菜鸟教程）。</p>\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2013/12/D53C92B3-9643-4871-8A72-33D491299653.jpg\"></p>\n<p>这个异常抛出可以不用管，目前先不写也无所谓，主要以这张图为主。</p>\n<ol>\n<li><strong>修饰符（Modifiers）：</strong> 修饰符用于控制方法的访问权限和行为。修饰符可以是以下之一：<ul>\n<li><code>public</code>：方法可以被任何类访问。</li>\n<li><code>private</code>：方法只能被定义它的类访问。</li>\n<li><code>protected</code>：方法可以被同一包内的类和继承该类的子类访问。</li>\n<li>没有修饰符（默认情况下）：方法在同一包内可见，但不对其他包可见。</li>\n</ul>\n</li>\n<li><strong>返回类型（Return Type）：</strong> 返回类型指定了方法执行后返回的数据类型。它可以是任何Java数据类型，包括原始数据类型（如<code>int</code>、<code>double</code>）和引用数据类型（如对象、数组）。如果方法不返回任何值，可以使用关键字 <code>void</code> 表示。</li>\n<li><strong>方法名（Method Name）：</strong> 方法名是方法的标识符，用于在程序中引用该方法。方法名必须遵守Java标识符的规则，如字母、数字和下划线的组合，但不能以数字开头。</li>\n<li><strong>参数列表（Parameter List）：</strong> 参数列表包含方法接受的输入参数。参数是方法执行所需的数据，它们由括号括起来，多个参数之间用逗号分隔。每个参数由参数类型和参数名称组成。例如：<code>int x, String name</code>。</li>\n<li><strong>throws 异常列表（Throws Exception List）：</strong> 异常列表指定了方法可能会抛出的异常。异常是程序运行时可能出现的问题的表示。在方法声明中使用 <code>throws</code> 关键字，后跟一个异常类的列表，以通知调用方需要处理这些异常。</li>\n<li><strong>方法体（Method Body）：</strong> 方法体是包含在花括号 <code>{}</code> 中的代码块，它定义了方法的实际操作。方法体包含了方法的执行逻辑，可以访问方法参数和局部变量，并执行各种操作。</li>\n</ol>\n<h3 id=\"调用方法\"><a href=\"#调用方法\" class=\"headerlink\" title=\"调用方法\"></a>调用方法</h3><p>这。。。目前学的就是静态方法，也就是static修饰的方法，如果要在main方法中调用，那就直接调用好了，调用，然后传递需要的参数即可。</p>\n<p>应该没什么需要特别强调的，待会的例子应该就能看懂了。</p>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><p>我们继续用上面的代码，把生成数组，计算最大值最小值平均值和总和的这些循环，都给他封装成方法。</p>\n<p>生成数组</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">// 模拟骰子投掷并返回结果数组\npublic static int[] simulateDiceRolls(int numberOfThrows) {\n    Random random = new Random();\n    int[] diceValues = new int[numberOfThrows];\n\n    for (int i = 0; i &lt; numberOfThrows; i++) {\n        diceValues[i] = random.nextInt(6) + 1;\n    }\n\n    return diceValues;\n}</code></pre>\n\n<p>计算总和</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">// 计算数组的总和\npublic static int calculateSum(int[] array) {\n    int sum = 0;\n    for (int value : array) {\n        sum += value;\n    }\n    return sum;\n}</code></pre>\n\n<p>计算最大值</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">// 计算数组的最大值\npublic static int calculateMax(int[] array) {\n    int max = array[0];\n    for (int value : array) {\n        if (value &gt; max) {\n            max = value;\n        }\n    }\n    return max;\n}</code></pre>\n\n<p>计算最小值</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">// 计算数组的最小值\npublic static int calculateMin(int[] array) {\n    int min = array[0];\n    for (int value : array) {\n        if (value &lt; min) {\n            min = value;\n        }\n    }\n    return min;\n}</code></pre>\n\n<p>计算平均值</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">    // 计算数组的平均值\n    public static double calculateAverage(int[] array) {\n        int sum = calculateSum(array);\n        return (double) sum / array.length;\n    }\n}</code></pre>\n\n<p>好了，这就是我们把那些循环啊，生成数组之类的语句全都写成了方法，那么最后再来看看我们的main方法变成什么样子了吧！</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public static void main(String[] args) {\n    Scanner scanner = new Scanner(System.in);\n\n    System.out.print(\"请输入要投掷的骰子次数: \");\n    int numberOfThrows = scanner.nextInt();\n\n    if (numberOfThrows &lt;= 0) {\n        System.out.println(\"无效的次数。请输入一个正整数。\");\n        return;\n    }\n\n    int[] diceValues = simulateDiceRolls(numberOfThrows);// 调用方法生成数组\n\n    System.out.println(\"投掷结果：\");\n    for (int i = 0; i &lt; numberOfThrows; i++) {\n        System.out.println(\"第 \" + (i + 1) + \" 次投掷: \" + diceValues[i]);\n    }\n\n    int sum = calculateSum(diceValues);// 调用方法计算和\n    int max = calculateMax(diceValues);// 调用方法计算最大值\n    int min = calculateMin(diceValues);// 调用方法计算最小值\n    double average = calculateAverage(diceValues);// 调用方法计算平均值\n\n    System.out.println(\"总和: \" + sum);\n    System.out.println(\"最大值: \" + max);\n    System.out.println(\"最小值: \" + min);\n    System.out.println(\"平均值: \" + average);\n}</code></pre>\n\n<p>然后这次的内容就到这里了吧，感觉真的进度有些太快了，不知道这周的lab又是什么样子。。。</p>\n","feature":true,"text":"有一说一，咱们学校这个课的进度是真的赶啊，这才几节课就到数组和方法了。。 循环补充什么？原来上周没有讲什么是For循环，那我上周笔记不就多写了！ 怪不得感觉上周写的这么多。。。算了无所谓了，那么这里就来补充一些上周没有提到的东西。 break关键字break 关键字用于立即退出当...","link":"","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[],"tags":[{"name":"笔记","slug":"笔记","count":27,"path":"api/tags/笔记.json"},{"name":"Java初学","slug":"Java初学","count":8,"path":"api/tags/Java初学.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BE%AA%E7%8E%AF%E8%A1%A5%E5%85%85\"><span class=\"toc-text\">循环补充</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#break%E5%85%B3%E9%94%AE%E5%AD%97\"><span class=\"toc-text\">break关键字</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#continue-%E5%85%B3%E9%94%AE%E5%AD%97\"><span class=\"toc-text\">continue 关键字</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84%E5%B5%8C%E5%A5%97\"><span class=\"toc-text\">循环结构嵌套</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E7%9A%84%E5%B5%8C%E5%A5%97%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">基本的嵌套循环结构</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%A4%96%E9%83%A8%E5%BE%AA%E7%8E%AF%E5%92%8C%E5%86%85%E9%83%A8%E5%BE%AA%E7%8E%AF\"><span class=\"toc-text\">外部循环和内部循环</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%8E%A7%E5%88%B6%E5%BE%AA%E7%8E%AF%E7%9A%84%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">控制循环的流程</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#break%E5%92%8Ccontinue%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9\"><span class=\"toc-text\">break和continue的注意事项</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%BE%AA%E7%8E%AF%E5%B5%8C%E5%A5%97%E7%9A%84%E6%80%A7%E8%83%BD\"><span class=\"toc-text\">循环嵌套的性能</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%94%A8%E5%BE%AA%E7%8E%AF%E5%AE%9E%E7%8E%B0%E5%A4%9A%E4%B8%AA%E9%AA%B0%E5%AD%90\"><span class=\"toc-text\">用循环实现多个骰子</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">数组</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AF%E6%95%B0%E7%BB%84%EF%BC%9F\"><span class=\"toc-text\">什么是数组？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E6%95%B0%E7%BB%84%EF%BC%9F\"><span class=\"toc-text\">为什么需要数组？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E5%A3%B0%E6%98%8E%E5%92%8C%E5%88%9B%E5%BB%BA%E6%95%B0%E7%BB%84%EF%BC%9F\"><span class=\"toc-text\">如何声明和创建数组？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84%E7%9A%84%E8%B5%8B%E5%80%BC%E4%B8%8E%E8%AE%BF%E9%97%AE\"><span class=\"toc-text\">数组的赋值与访问</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84%E7%9A%84%E9%81%8D%E5%8E%86\"><span class=\"toc-text\">数组的遍历</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B1%82%E6%95%B0%E7%BB%84%E5%BD%93%E4%B8%AD%E7%9A%84%E5%B9%B3%E5%9D%87%E5%80%BC%EF%BC%8C%E6%9C%80%E5%A4%A7%E5%80%BC%EF%BC%8C%E6%9C%80%E5%B0%8F%E5%80%BC%EF%BC%8C%E6%80%BB%E5%92%8C\"><span class=\"toc-text\">求数组当中的平均值，最大值，最小值，总和</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">方法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AF%E6%96%B9%E6%B3%95%EF%BC%9F\"><span class=\"toc-text\">什么是方法？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95%E7%9A%84%E5%91%BD%E5%90%8D%E8%A7%84%E5%88%99\"><span class=\"toc-text\">方法的命名规则</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95%E7%9A%84%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">方法的定义</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%B0%83%E7%94%A8%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">调用方法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">示例</span></a></li></ol></li></ol>","author":{"name":"General_K1ng","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/GeneralK1ng/My_Blog_IMG@main/img/avatar.png","link":"/","description":"一名正在努力学习计算机的菜鸟","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/BILIBILI.svg","link":"https://space.bilibili.com/32927332"},"csdn":{"icon":"/svg/csdn.svg","link":"https://blog.csdn.net/qq_34849354"},"github":{"icon":"/svg/GitHub.svg","link":"https://github.com/GeneralK1ng"},"QQ":{"icon":"/svg/QQ.svg","link":"tencent://AddContact/?fromId=45&fromSubId=1&subcmd=all&uin=2645370205"},"WeChat":{"icon":"/svg/wechat.svg","link":null}}}},"mapped":true,"prev_post":{"title":"Java_Exercise(Week4)","uid":"19b17cf70fbf7b80415d6c3b17a3d380","slug":"Java-Exercise-Week4","date":"2023-10-14T04:44:30.000Z","updated":"2023-10-14T07:14:07.926Z","comments":true,"path":"api/articles/Java-Exercise-Week4.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/GeneralK1ng/My_Blog_IMG@main/img/codeBackground.png","text":"说实话在我昨天晚上做玩这周的Exercise和CW之后，我对于这周是否要写这个笔记产生了很大的怀疑，难度确实有，但是不大，问题在于，想要把我昨天做题时候的思路讲清楚，呈现明白，是一个非常浪费时间和精力的事。。 想了想，还是写出来吧。 Exercise #4.1 Copy Even...","link":"","photos":[],"count_time":{"symbolsCount":"7.8k","symbolsTime":"7 mins."},"categories":[],"tags":[{"name":"笔记","slug":"笔记","count":27,"path":"api/tags/笔记.json"},{"name":"Java初学","slug":"Java初学","count":8,"path":"api/tags/Java初学.json"}],"author":{"name":"General_K1ng","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/GeneralK1ng/My_Blog_IMG@main/img/avatar.png","link":"/","description":"一名正在努力学习计算机的菜鸟","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/BILIBILI.svg","link":"https://space.bilibili.com/32927332"},"csdn":{"icon":"/svg/csdn.svg","link":"https://blog.csdn.net/qq_34849354"},"github":{"icon":"/svg/GitHub.svg","link":"https://github.com/GeneralK1ng"},"QQ":{"icon":"/svg/QQ.svg","link":"tencent://AddContact/?fromId=45&fromSubId=1&subcmd=all&uin=2645370205"},"WeChat":{"icon":"/svg/wechat.svg","link":null}}}},"feature":true},"next_post":{"title":"Java_Exercise(Week3)","uid":"db575aff8a359d17ed235c7bc3cb6733","slug":"Java-Exercise-Week3","date":"2023-09-29T16:54:42.000Z","updated":"2023-09-30T14:31:05.983Z","comments":true,"path":"api/articles/Java-Exercise-Week3.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/GeneralK1ng/My_Blog_IMG@main/img/codeBackground.png","text":"这周开始就进入到了条件语句和循环语句了，那么随之而来的就是一些简单的算法题目了，当然对于刚开始接触的人来说还是有些困难的，但是不急，只要把每一步想明白，其实没什么难的，重点在于思路，为什么要用if，为什么要用循环，为什么这个循环是for循环，那个要用while循环，怎么说呢，一定...","link":"","photos":[],"count_time":{"symbolsCount":"16k","symbolsTime":"15 mins."},"categories":[],"tags":[{"name":"笔记","slug":"笔记","count":27,"path":"api/tags/笔记.json"},{"name":"Java初学","slug":"Java初学","count":8,"path":"api/tags/Java初学.json"}],"author":{"name":"General_K1ng","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/GeneralK1ng/My_Blog_IMG@main/img/avatar.png","link":"/","description":"一名正在努力学习计算机的菜鸟","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/BILIBILI.svg","link":"https://space.bilibili.com/32927332"},"csdn":{"icon":"/svg/csdn.svg","link":"https://blog.csdn.net/qq_34849354"},"github":{"icon":"/svg/GitHub.svg","link":"https://github.com/GeneralK1ng"},"QQ":{"icon":"/svg/QQ.svg","link":"tencent://AddContact/?fromId=45&fromSubId=1&subcmd=all&uin=2645370205"},"WeChat":{"icon":"/svg/wechat.svg","link":null}}}}}}