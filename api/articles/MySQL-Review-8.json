{"title":"MySQL Review-8","uid":"d8d61b16d43fe3afec63384e99b4a265","slug":"MySQL-Review-8","date":"2023-12-06T11:13:57.000Z","updated":"2023-12-08T08:16:17.573Z","comments":true,"path":"api/articles/MySQL-Review-8.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/GeneralK1ng/My_Blog_IMG@main/img/MySQL-image.png","content":"<p>继续把索引一讲。。。</p>\n<h1 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h1><p>在MySQL中，索引是一种用于提高数据库查询性能的数据结构。它类似于书籍的目录，可以帮助数据库引擎快速定位和检索数据。索引的主要作用是加速数据的检索过程，减少数据库的查询时间。在MySQL中，常见的索引类型包括主键索引、唯一索引、普通索引、全文索引等。</p>\n<h2 id=\"优缺点\"><a href=\"#优缺点\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h2><h3 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h3><ol>\n<li><strong>提高查询性能：</strong> 索引能够显著提高SELECT查询的速度，因为它们允许数据库引擎更快地定位和访问所需的数据行。通过减少需要扫描的数据量，索引可以大大减小查询的执行时间。</li>\n<li><strong>加速排序和分组操作：</strong> 如果查询包含ORDER BY或GROUP BY子句，索引可以加速这些排序和分组操作，因为索引存储了按照特定列排列的数据。</li>\n<li><strong>加速连接操作：</strong> 当在多个表之间进行连接操作时，索引可以加速连接的执行，特别是在连接的列上创建索引。</li>\n<li><strong>加速唯一性检查：</strong> 唯一索引确保列中的值是唯一的，这可以加速唯一性检查的过程，例如在插入新记录时。</li>\n<li><strong>加速全文搜索：</strong> 如果表中包含文本数据，并使用全文索引，可以通过索引来加速全文搜索的操作。</li>\n</ol>\n<h3 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><ul>\n<li><strong>写操作的性能可能降低：</strong> 对表进行INSERT、UPDATE和DELETE等写操作时，索引也需要更新。因此，频繁的写操作可能导致性能下降。</li>\n<li><strong>占用额外存储空间：</strong> 索引数据结构会占用磁盘空间，特别是在大型表上。这需要在性能提升和存储开销之间进行权衡。</li>\n<li><strong>过多的索引可能导致性能下降：</strong> 如果表上存在过多的索引，可能会导致查询优化器选择不恰当的索引，或者在更新操作时需要维护大量的索引，从而降低性能。</li>\n</ul>\n<h2 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h2><p>因为MySQL这种关系型数据库不同于Redis这种利用内存来高速缓存的非关系型数据库，MySQL的数据是存储在硬盘或者说磁盘上的，查询数据的时候，如果没有索引，那么就会一次性将所有的数据加载到内存当中，然后再进行查询筛选，但是磁盘的IO是非常耗时间的，如果数据量大的话，这个用时就更长了。</p>\n<p>如果有了索引之后，就不需要加载所有的数据了，因为MySQL底层采用的B+树进行维护，而且一般的层数在2-4层左右，所以不管多大的数据量，最多也就只需2-4次的磁盘IO。</p>\n<p>简而言之，加速。</p>\n<h2 id=\"情况\"><a href=\"#情况\" class=\"headerlink\" title=\"情况\"></a>情况</h2><p>有些时候其实不需要建立索引，而有些时候又必须建立索引。</p>\n<h3 id=\"需要建立索引的情况\"><a href=\"#需要建立索引的情况\" class=\"headerlink\" title=\"需要建立索引的情况\"></a>需要建立索引的情况</h3><ol>\n<li><strong>频繁的查询操作：</strong> 如果某个列经常用于WHERE子句、JOIN条件或ORDER BY子句，建立索引可以显著提高查询性能。</li>\n<li><strong>唯一性约束：</strong> 如果某列需要保持唯一性，例如主键列或唯一键列，建议为该列创建唯一索引。</li>\n<li><strong>连接操作：</strong> 当在多个表之间进行连接操作时，对连接列创建索引可以加速连接的执行。</li>\n<li><strong>排序和分组操作：</strong> 如果查询包含ORDER BY或GROUP BY子句，通过为相关列创建索引可以提高排序和分组操作的性能。</li>\n<li><strong>全文搜索：</strong> 如果需要执行全文搜索，可以使用全文索引加速搜索操作。</li>\n</ol>\n<h3 id=\"不需要建立索引的情况\"><a href=\"#不需要建立索引的情况\" class=\"headerlink\" title=\"不需要建立索引的情况\"></a>不需要建立索引的情况</h3><ol>\n<li><strong>小表：</strong> 对于小型表，全表扫描可能比使用索引更为高效，因为索引引入的开销可能超过了全表扫描的成本。</li>\n<li><strong>高写入负载：</strong> 如果表经常执行INSERT、UPDATE和DELETE等写操作，索引的维护成本可能会超过读操作的性能提升，因此需要权衡。</li>\n<li><strong>频繁更新的列：</strong> 如果某列经常被更新，特别是对于大型表，建立索引可能会降低性能，因为每次更新都需要更新索引。</li>\n<li><strong>不会用于查询的列：</strong> 对于不会出现在查询条件中的列，创建索引是没有意义的。</li>\n<li><strong>短字符串列：</strong> 对于短字符串列，全表扫描的代价可能较小，而索引的额外开销可能不值得。</li>\n</ol>\n<h2 id=\"MySQL索引的数据结构\"><a href=\"#MySQL索引的数据结构\" class=\"headerlink\" title=\"MySQL索引的数据结构\"></a>MySQL索引的数据结构</h2><ol>\n<li><strong>B+Tree索引：</strong> B+Tree是B-Tree的一种变体，常用于实现聚簇索引（在<code>InnoDB</code>存储引擎中，默认的主键索引就是聚簇索引）。与B-Tree相比，B+Tree将数据仅存储在叶子节点上，非叶子节点只包含键值，这有助于提高范围查询和排序操作的性能。</li>\n<li><strong>哈希索引：</strong> 哈希索引使用哈希表数据结构，适用于等值查询。哈希索引在查询速度上非常快，但不适用于范围查询和排序操作。MySQL中的<code>MyISAM</code>存储引擎支持哈希索引，但<code>InnoDB</code>等存储引擎通常不使用哈希索引作为主索引。</li>\n</ol>\n<h3 id=\"B-Tree\"><a href=\"#B-Tree\" class=\"headerlink\" title=\"B+ Tree\"></a>B+ Tree</h3><p><strong>1. 树的结构：</strong> 想象一棵树，它有根部（最上面的节点）和一些分支。这个树是平衡的，就是说每个分支的高度都是一样的。</p>\n<p><strong>2. 数据的存储：</strong> 假设我们要在这棵树上存储一些数据，比如数字。这些数字将被放在叶子（最底部的节点）上。</p>\n<p><strong>3. 排序和查找：</strong> 想象一下，如果我们要找一个数字，我们可以从根部开始，按照一定的规则（比如说，如果要找的数字比当前节点的数字大，就往右走；反之，就往左走），最终找到我们需要的数字。</p>\n<p><strong>4. B+Tree的特点：</strong> B+Tree索引就像这样的一棵树，但有一些特殊之处：</p>\n<ul>\n<li><strong>只有叶子节点存储数据：</strong> 所有的数据都存储在叶子节点上，而非叶子节点只存储索引。</li>\n<li><strong>叶子节点是有序的链表：</strong> 叶子节点按照顺序形成一个链表，方便范围查找和排序操作。</li>\n<li><strong>平衡性：</strong> 树的所有分支的高度是一样的，这确保了查找效率。</li>\n</ul>\n<p><strong>5. 为什么使用B+Tree：</strong> 使用B+Tree索引有几个好处：</p>\n<ul>\n<li><strong>快速查找：</strong> 通过树的结构，我们可以快速找到需要的数据，不需要遍历整个表。</li>\n<li><strong>适用于范围查找：</strong> 由于叶子节点是有序的链表，B+Tree适合进行范围查找，比如查找某个范围内的数据。</li>\n<li><strong>适用于排序：</strong> B+Tree的有序性使得对数据进行排序非常高效。</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/GeneralK1ng/My_Blog_IMG@main/img/B+TreeExample.png\"></p>\n<h3 id=\"哈希索引\"><a href=\"#哈希索引\" class=\"headerlink\" title=\"哈希索引\"></a>哈希索引</h3><p><strong>1. 键和箱子：</strong> 假设你有很多钥匙（键），而你想快速找到它们存放在哪里。哈希索引就好像有一堆箱子，每个箱子上都有一个标签（哈希值）。</p>\n<p><strong>2. 哈希函数：</strong> 为了找到正确的箱子，你可以使用一个神奇的函数（哈希函数），这个函数可以把每个钥匙转换成一个特殊的数字（哈希值）。这个数字告诉你应该把钥匙放到哪个箱子里。</p>\n<p><strong>3. 查找过程：</strong> 当你想找到一个特定的钥匙时，你只需要把这个钥匙交给哈希函数，得到一个哈希值，然后直接去找标签上是这个哈希值的箱子。这样就很快找到了你要的东西。</p>\n<h3 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h3><ul>\n<li>哈希索引<strong>不支持排序</strong>，因为哈希表是无序的。</li>\n<li>哈希索引<strong>不支持范围查找</strong>。</li>\n<li>哈希索引<strong>不支持模糊查询</strong>及多列索引的最左前缀匹配。</li>\n<li>因为哈希表中会<strong>存在哈希冲突</strong>，所以哈希索引的性能是不稳定的，而B+树索引的性能是相对稳定的，每次查询都是从根节点到叶子节点。</li>\n</ul>\n<h2 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h2><h3 id=\"主键索引（Primary-Key-Index）\"><a href=\"#主键索引（Primary-Key-Index）\" class=\"headerlink\" title=\"主键索引（Primary Key Index）\"></a>主键索引（Primary Key Index）</h3><ul>\n<li>主键索引是一种唯一性索引，用于唯一标识表中的每一行数据。</li>\n<li>每个表只能有一个主键索引。</li>\n<li>主键索引自动创建，如果表定义中没有指定主键，则系统会选择一个唯一的列作为主键。</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">CREATE TABLE example (\n    id INT PRIMARY KEY,\n    name VARCHAR(50)\n);</code></pre>\n\n<h3 id=\"唯一索引（Unique-Index）\"><a href=\"#唯一索引（Unique-Index）\" class=\"headerlink\" title=\"唯一索引（Unique Index）\"></a>唯一索引（Unique Index）</h3><ul>\n<li>唯一索引确保索引列中的所有值都是唯一的，但允许有空值。</li>\n<li>表可以有多个唯一索引。</li>\n</ul>\n<p>例子就不写了，跟上面差不多，相当于你在创建主键和唯一键的时候，底层就已经创建了索引，为了加快检索速度。</p>\n<h3 id=\"普通索引（Normal-Index）\"><a href=\"#普通索引（Normal-Index）\" class=\"headerlink\" title=\"普通索引（Normal Index）\"></a>普通索引（Normal Index）</h3><ul>\n<li>普通索引是最基本的索引类型，没有唯一性或空值的限制。</li>\n<li>可以对表中的一个或多个列创建普通索引。</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">CREATE TABLE example (\n    id INT,\n    name VARCHAR(50),\n    INDEX idx_name (name)\n);</code></pre>\n\n<p>如果已经有创建好的表，你可以使用<code>CREATE INDEX</code>语句来添加索引。以下是一般的语法格式：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">CREATE [UNIQUE] INDEX index_name\nON table_name (column1, column2, ...);</code></pre>\n\n<ul>\n<li><code>index_name</code>：索引的名称，应该是唯一的，用于标识这个索引。</li>\n<li><code>table_name</code>：要添加索引的表名。</li>\n<li><code>column1, column2, ...</code>：要包含在索引中的列名。</li>\n</ul>\n<p>例如，如果你有一个名为 <code>employees</code> 的表，包含列 <code>employee_id</code> 和 <code>last_name</code>，你可以创建一个索引来加速按 <code>last_name</code> 进行查询的操作：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">CREATE INDEX idx_last_name\nON employees (last_name);</code></pre>\n\n<p>如果你希望创建一个唯一索引，确保 <code>last_name</code> 的值是唯一的，可以使用以下语法：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">CREATE UNIQUE INDEX idx_last_name_unique\nON employees (last_name);</code></pre>\n\n<p>需要注意的是，虽然可以在已经存在的表上添加索引，但在生产环境中，最好在设计表的时候就考虑好哪些字段需要索引，以及使用何种类型的索引。添加索引可能会导致表的锁定和大量的I/O操作，因此需要谨慎使用，特别是在大型表上。</p>\n<p>如果你的表很大，想要添加索引的话。。。那可能需要的时间就会非常的长。</p>\n<h3 id=\"全文索引（Full-Text-Index）\"><a href=\"#全文索引（Full-Text-Index）\" class=\"headerlink\" title=\"全文索引（Full-Text Index）\"></a>全文索引（Full-Text Index）</h3><ul>\n<li>全文索引用于在文本数据上执行全文搜索。</li>\n<li>主要用于对大文本字段（如TEXT和VARCHAR）进行高效的搜索操作。</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">CREATE TABLE articles (\n    id INT,\n    title VARCHAR(100),\n    content TEXT,\n    FULLTEXT (title, content)\n);</code></pre>\n\n<h1 id=\"集合操作\"><a href=\"#集合操作\" class=\"headerlink\" title=\"集合操作\"></a>集合操作</h1><p>对集合（Set）的操作，它包括并集（UNION）、交集（INTERSECT）、差集（EXCEPT）等。然而，MySQL并没有提供标准的INTERSECT和EXCEPT操作符，但可以通过其他方式来实现相似的效果。以下是一些关于MySQL中SET操作的基本解释：</p>\n<p><strong>UNION（并集）：</strong></p>\n<ul>\n<li><code>UNION</code>操作用于合并两个查询的结果集，返回不重复的行。语法如下：</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">SELECT column1, column2, ...\nFROM table1\nUNION\nSELECT column1, column2, ...\nFROM table2;</code></pre>\n\n<p>这将返回两个查询的结果的并集。</p>\n<p><strong>INTERSECT（交集）：</strong></p>\n<ul>\n<li>MySQL并没有内建的INTERSECT操作符。但可以通过使用INNER JOIN或IN子查询等方式来模拟交集的效果。例如：</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">SELECT column1, column2, ...\nFROM table1\nWHERE column1 IN (SELECT column1 FROM table2);</code></pre>\n\n<p>这将返回两个表的交集。</p>\n<p><strong>EXCEPT（差集）：</strong></p>\n<ul>\n<li>同样，MySQL没有内建的EXCEPT操作符。可以使用LEFT JOIN或NOT IN子查询等方法来模拟差集。例如：</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">SELECT column1, column2, ...\nFROM table1\nWHERE column1 NOT IN (SELECT column1 FROM table2);</code></pre>\n\n<p>这将返回在table1中但不在table2中的行。</p>\n<p><strong>其他SET操作：</strong></p>\n<ul>\n<li>MySQL还支持一些其他的集合操作，如<code>UNION ALL</code>（返回所有行，包括重复的行）、<code>INTERSECT ALL</code>、<code>EXCEPT ALL</code>等。这些操作在语法上与对应的不带ALL的操作类似，但会保留所有行，包括重复的。</li>\n</ul>\n<h1 id=\"空值的处理\"><a href=\"#空值的处理\" class=\"headerlink\" title=\"空值的处理\"></a>空值的处理</h1><h2 id=\"条件中的空值\"><a href=\"#条件中的空值\" class=\"headerlink\" title=\"条件中的空值\"></a>条件中的空值</h2><p>在SQL的SELECT语句中，WHERE子句使用三值逻辑（three-valued logic）。三值逻辑是一种逻辑系统，其中逻辑语句的真（True）、假（False）以及第三个可能的值是未知（Unknown）。</p>\n<p>在上下文中，当使用WHERE子句时，该子句中的条件会产生三种可能的结果：</p>\n<ol>\n<li><strong>True（真）：</strong> 满足条件，符合要求的行将被返回。</li>\n<li><strong>False（假）：</strong> 不满足条件，不符合要求的行将被排除。</li>\n<li><strong>Unknown（未知）：</strong> 条件对于某些行是未知的或不适用。这种情况下，行也会被排除，因为WHERE子句要求返回的是条件为True的行。</li>\n</ol>\n<p>这种三值逻辑在处理包含NULL值的情况时尤为重要。在SQL中，与NULL值的比较通常返回未知，因此，当涉及到NULL值的条件时，WHERE子句可能会产生未知的结果。例如，如果你有一个条件是 <code>column1 = 10</code>，而<code>column1</code>中有NULL值，那么由于NULL的比较结果是未知，这个条件就会被视为未知，相应的行将不会包括在结果中。</p>\n<p>举个例子来说：</p>\n<p>让我来建立一个这个<code>student</code>表格</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">CREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    age INT,\n    grade INT\n);\n\nINSERT INTO students (student_id, name, age, grade) VALUES\n(1, 'Alice', 20, 85),\n(2, 'Bob', 22, 92),\n(3, 'Charlie', NULL, 75),\n(4, 'David', 21, NULL),\n(5, 'Eva', NULL, NULL);</code></pre>\n\n<p>现在，我们将使用一个带有条件的SELECT语句，以演示三值逻辑的概念：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">-- 返回年龄大于等于21岁的学生\nSELECT * FROM students WHERE age &gt;= 21;</code></pre>\n\n<p>在这个例子中，我们希望选择年龄大于等于21岁的学生。这里有几个情况：</p>\n<ol>\n<li>Alice（20岁） - 不符合条件，排除。</li>\n<li>Bob（22岁） - 符合条件，包括在结果中。</li>\n<li>Charlie（NULL岁） - 由于NULL的比较结果是未知，所以他的行也被排除。</li>\n<li>David（21岁） - 符合条件，包括在结果中。</li>\n<li>Eva（NULL岁） - 由于NULL的比较结果是未知，所以她的行也被排除。</li>\n</ol>\n<p>那么如果我的查询语句加上了这个条件会怎么样？</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">-- 返回年龄大于等于21岁或者年龄是NULL的学生\nSELECT * FROM students WHERE age &gt;= 21 OR age IS NULL;</code></pre>\n\n<p>这样就会考虑空值，然后就会返回符合条件的行。</p>\n<h2 id=\"算术中的空值\"><a href=\"#算术中的空值\" class=\"headerlink\" title=\"算术中的空值\"></a>算术中的空值</h2><p>当对包含NULL的列进行算术运算时，结果将为NULL。在SQL中，任何包含NULL值的算术运算都会导致结果为NULL，这反映了NULL的未知或缺失值的性质。</p>\n<p>举个例子，想象一下表格：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">CREATE TABLE numbers (\n    num1 INT,\n    num2 INT\n);\n\nINSERT INTO numbers (num1, num2) VALUES\n(10, 5),\n(NULL, 8),\n(15, NULL),\n(NULL, NULL);</code></pre>\n\n<p>现在，如果我们尝试进行一些算术运算：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">-- 尝试加法运算\nSELECT num1 + num2 AS result FROM numbers;</code></pre>\n\n<p>在这个查询中，我们尝试对表格中的两列进行加法运算。然而，由于表格中包含NULL值，结果列将包含NULL值：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">result</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">15</td>\n</tr>\n<tr>\n<td align=\"center\"><null></null></td>\n</tr>\n<tr>\n<td align=\"center\"><null></null></td>\n</tr>\n<tr>\n<td align=\"center\"><null></null></td>\n</tr>\n</tbody></table>\n<p>这是因为在任何涉及到NULL的算术运算中，结果都是NULL。这种行为是为了确保对未知或缺失值的任何运算都不会导致不确定的结果。</p>\n<p>如果你希望在执行算术运算时考虑NULL值，并希望将NULL值视为0，可以使用<code>COALESCE</code>函数或<code>IFNULL</code>函数：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">-- 使用COALESCE函数将NULL视为0\nSELECT COALESCE(num1, 0) + COALESCE(num2, 0) AS result FROM numbers;</code></pre>\n\n<p>这样就会忽略<code>NULL</code>将它视为0进行计算：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">result</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">15</td>\n</tr>\n<tr>\n<td align=\"center\">8</td>\n</tr>\n<tr>\n<td align=\"center\">15</td>\n</tr>\n<tr>\n<td align=\"center\">0</td>\n</tr>\n</tbody></table>\n<h2 id=\"聚合中的空值\"><a href=\"#聚合中的空值\" class=\"headerlink\" title=\"聚合中的空值\"></a>聚合中的空值</h2><p><strong>COUNT函数：</strong></p>\n<ul>\n<li><code>COUNT</code>函数用于计算行数，但是它会忽略包含NULL值的列，除非指定了列名或使用<code>COUNT(*)</code>。</li>\n<li>如果要计算包括NULL在内的行数，可以使用<code>COUNT(*)</code>。</li>\n</ul>\n<p><strong>SUM、AVG和其他数学函数：</strong></p>\n<ul>\n<li>在执行数学函数如<code>SUM</code>和<code>AVG</code>时，它们会忽略包含NULL值的行。</li>\n<li>如果希望将NULL值视为0，可以使用<code>COALESCE</code>或<code>IFNULL</code>函数进行处理。</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">-- 计算总和，将NULL视为0\nSELECT SUM(COALESCE(column1, 0)) FROM table_name;</code></pre>\n\n<p><strong>MAX和MIN函数：</strong></p>\n<ul>\n<li><code>MAX</code>和<code>MIN</code>函数会忽略包含NULL值的行，除非使用<code>MAX(column_name)</code>或<code>MIN(column_name)</code>指定了列名。</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">-- 获取包含NULL的列的最大值\nSELECT MAX(column1) FROM table_name;</code></pre>\n\n<ul>\n<li>使用<code>MAX(column_name)</code>或<code>MIN(column_name)</code>可以考虑包含NULL的行。</li>\n</ul>\n<p><strong>GROUP BY子句：</strong></p>\n<ul>\n<li>在使用<code>GROUP BY</code>子句进行分组时，NULL值会被分为一组。</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">-- 按列分组，NULL被分为一组\nSELECT column1, COUNT(*) FROM table_name GROUP BY column1;</code></pre>\n\n<ul>\n<li>如果要在<code>GROUP BY</code>中将NULL值视为一个特定的值，可以使用<code>COALESCE</code>或<code>IFNULL</code>函数进行处理。</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">-- 使用COALESCE将NULL值视为'Unknown'，然后按列分组\nSELECT COALESCE(column1, 'Unknown') AS grouped_column, COUNT(*) FROM table_name GROUP BY grouped_column;</code></pre>\n\n<p><strong>ORDER BY子句：</strong></p>\n<p><strong>默认排序规则：</strong></p>\n<ul>\n<li>默认情况下，对于升序排序（<code>ORDER BY column1 ASC</code>），NULL值会被认为是最小值，因此会出现在排序的最前面。</li>\n<li>对于降序排序（<code>ORDER BY column1 DESC</code>），NULL值会被认为是最大值，因此会出现在排序的最后面。</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">-- 默认升序排序，NULL在最前面\nSELECT * FROM table_name ORDER BY column1 ASC;\n\n-- 默认降序排序，NULL在最后面\nSELECT * FROM table_name ORDER BY column1 DESC;</code></pre>\n\n<p><strong>使用COALESCE或IFNULL进行定制排序：</strong></p>\n<ul>\n<li>你还可以使用<code>COALESCE</code>或<code>IFNULL</code>函数在<code>ORDER BY</code>子句中进行定制排序，将NULL视为特定的值。</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">-- 使用COALESCE将NULL视为'Unknown'，然后按列升序排序\nSELECT * FROM table_name ORDER BY COALESCE(column1, 'Unknown') ASC;\n\n-- 使用IFNULL将NULL视为0，然后按列降序排序\nSELECT * FROM table_name ORDER BY IFNULL(column1, 0) DESC;</code></pre>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>通过一个例子来进行一个简单的总结：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">-- 建表语句\nCREATE TABLE employees (\n    employee_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    age INT,\n    salary DECIMAL(10, 2),\n    department_id INT,\n    hire_date DATE\n);\n\n-- 插入数据\nINSERT INTO employees (employee_id, first_name, last_name, age, salary, department_id, hire_date)\nVALUES\n(1, 'John', 'Doe', 30, 50000.00, 1, '2020-01-15'),\n(2, 'Jane', 'Smith', 28, 60000.00, NULL, '2019-05-20'),\n(3, 'Bob', 'Johnson', 35, NULL, 2, '2021-03-10'),\n(4, 'Alice', 'Williams', NULL, 55000.00, 1, '2022-02-05'),\n(5, 'Charlie', 'Brown', 32, 70000.00, NULL, NULL);</code></pre>\n\n<p>然后这张表的全貌就是这样子：</p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>first_name</th>\n<th>last_name</th>\n<th>age</th>\n<th>salary</th>\n<th>department_id</th>\n<th>hire_date</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>John</td>\n<td>Doe</td>\n<td>30</td>\n<td>50000.00</td>\n<td>1</td>\n<td>2020-01-15</td>\n</tr>\n<tr>\n<td>2</td>\n<td>Jane</td>\n<td>Smith</td>\n<td>28</td>\n<td>60000.00</td>\n<td><null></null></td>\n<td>2019-05-20</td>\n</tr>\n<tr>\n<td>3</td>\n<td>Bob</td>\n<td>Johnson</td>\n<td>35</td>\n<td><null></null></td>\n<td>2</td>\n<td>2021-03-10</td>\n</tr>\n<tr>\n<td>4</td>\n<td>Alice</td>\n<td>Williams</td>\n<td><null></null></td>\n<td>55000.00</td>\n<td>1</td>\n<td>2022-02-05</td>\n</tr>\n<tr>\n<td>5</td>\n<td>Charlie</td>\n<td>Brown</td>\n<td>32</td>\n<td>70000.00</td>\n<td><null></null></td>\n<td><null></null></td>\n</tr>\n</tbody></table>\n<p>现在我们来分别执行一下SQL语句</p>\n<h3 id=\"比较运算符：\"><a href=\"#比较运算符：\" class=\"headerlink\" title=\"比较运算符：\"></a>比较运算符：</h3><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">-- 选择年龄大于等于30岁或者年龄是NULL的员工\nSELECT * FROM employees WHERE age &gt;= 30 OR age IS NULL;</code></pre>\n\n<p>执行结果如下</p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>first_name</th>\n<th>last_name</th>\n<th>age</th>\n<th>salary</th>\n<th>department_id</th>\n<th>hire_date</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>John</td>\n<td>Doe</td>\n<td>30</td>\n<td>50000.00</td>\n<td>1</td>\n<td>2020-01-15</td>\n</tr>\n<tr>\n<td>3</td>\n<td>Bob</td>\n<td>Johnson</td>\n<td>35</td>\n<td><null></null></td>\n<td>2</td>\n<td>2021-03-10</td>\n</tr>\n<tr>\n<td>4</td>\n<td>Alice</td>\n<td>Williams</td>\n<td><null></null></td>\n<td>55000.00</td>\n<td>1</td>\n<td>2022-02-05</td>\n</tr>\n<tr>\n<td>5</td>\n<td>Charlie</td>\n<td>Brown</td>\n<td>32</td>\n<td>70000.00</td>\n<td><null></null></td>\n<td><null></null></td>\n</tr>\n</tbody></table>\n<p>可以看到筛选出来的结果是包含年龄为NULL的，如果我们删掉后面这个条件：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">SELECT * FROM employees WHERE age &gt;= 30;</code></pre>\n\n<p>结果就变成了：</p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>first_name</th>\n<th>last_name</th>\n<th>age</th>\n<th>salary</th>\n<th>department_id</th>\n<th>hire_date</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>John</td>\n<td>Doe</td>\n<td>30</td>\n<td>50000.00</td>\n<td>1</td>\n<td>2020-01-15</td>\n</tr>\n<tr>\n<td>3</td>\n<td>Bob</td>\n<td>Johnson</td>\n<td>35</td>\n<td><null></null></td>\n<td>2</td>\n<td>2021-03-10</td>\n</tr>\n<tr>\n<td>5</td>\n<td>Charlie</td>\n<td>Brown</td>\n<td>32</td>\n<td>70000.00</td>\n<td><null></null></td>\n<td><null></null></td>\n</tr>\n</tbody></table>\n<p>可以看到空值在条件判断中默认是忽略的，原因看上面。</p>\n<h3 id=\"聚合函数：\"><a href=\"#聚合函数：\" class=\"headerlink\" title=\"聚合函数：\"></a>聚合函数：</h3><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">-- 计算平均工资，将NULL值视为0\nSELECT AVG(COALESCE(salary, 0)) AS avg_salary FROM employees;</code></pre>\n\n<p>执行结果如下：</p>\n<table>\n<thead>\n<tr>\n<th>avg_salary</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>47000.000000</td>\n</tr>\n</tbody></table>\n<p>可以看到我们将空值视为了0，如果我们直接计算该列的平均值呢？</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">-- 计算平均工资，不将NULL值视为0\nSELECT AVG(salary) AS avg_salary FROM employees;</code></pre>\n\n<p>可以看到执行结果就变成了：</p>\n<table>\n<thead>\n<tr>\n<th>avg_salary</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>58750.000000</td>\n</tr>\n</tbody></table>\n<p>因为他把工资列为NULL的行都忽略了，并没有纳入平均值的计算，所以导致平均值计算变得不准确，所以实际开发中还是要根据实际情况进行调用。</p>\n<h3 id=\"排序：\"><a href=\"#排序：\" class=\"headerlink\" title=\"排序：\"></a>排序：</h3><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">-- 按入职日期降序排序，将NULL值放在最后\nSELECT * FROM employees ORDER BY hire_date IS NULL, hire_date DESC;</code></pre>\n\n<p>然后就能看到结果为：</p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>first_name</th>\n<th>last_name</th>\n<th>age</th>\n<th>salary</th>\n<th>department_id</th>\n<th>hire_date</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>4</td>\n<td>Alice</td>\n<td>Williams</td>\n<td><null></null></td>\n<td>55000.00</td>\n<td>1</td>\n<td>2022-02-05</td>\n</tr>\n<tr>\n<td>3</td>\n<td>Bob</td>\n<td>Johnson</td>\n<td>35</td>\n<td><null></null></td>\n<td>2</td>\n<td>2021-03-10</td>\n</tr>\n<tr>\n<td>1</td>\n<td>John</td>\n<td>Doe</td>\n<td>30</td>\n<td>50000.00</td>\n<td>1</td>\n<td>2020-01-15</td>\n</tr>\n<tr>\n<td>2</td>\n<td>Jane</td>\n<td>Smith</td>\n<td>28</td>\n<td>60000.00</td>\n<td><mull></mull></td>\n<td>2019-05-20</td>\n</tr>\n<tr>\n<td>5</td>\n<td>Charlie</td>\n<td>Brown</td>\n<td>32</td>\n<td>70000.00</td>\n<td><null></null></td>\n<td><null></null></td>\n</tr>\n</tbody></table>\n<h3 id=\"条件中的处理：\"><a href=\"#条件中的处理：\" class=\"headerlink\" title=\"条件中的处理：\"></a>条件中的处理：</h3><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">-- 选择属于部门2或者部门是NULL的员工\nSELECT * FROM employees WHERE department_id = 2 OR department_id IS NULL;</code></pre>\n\n<p>返回结果为：</p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>first_name</th>\n<th>last_name</th>\n<th>age</th>\n<th>salary</th>\n<th>department_id</th>\n<th>hire_date</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>2</td>\n<td>Jane</td>\n<td>Smith</td>\n<td>28</td>\n<td>60000.00</td>\n<td><null></null></td>\n<td>2019-05-20</td>\n</tr>\n<tr>\n<td>3</td>\n<td>Bob</td>\n<td>Johnson</td>\n<td>35</td>\n<td><null></null></td>\n<td>2</td>\n<td>2021-03-10</td>\n</tr>\n<tr>\n<td>5</td>\n<td>Charlie</td>\n<td>Brown</td>\n<td>32</td>\n<td>70000.00</td>\n<td><null></null></td>\n<td><null></null></td>\n</tr>\n</tbody></table>\n","text":"继续把索引一讲。。。 索引在MySQL中，索引是一种用于提高数据库查询性能的数据结构。它类似于书籍的目录，可以帮助数据库引擎快速定位和检索数据。索引的主要作用是加速数据的检索过程，减少数据库的查询时间。在MySQL中，常见的索引类型包括主键索引、唯一索引、普通索引、全文索引等。 ...","link":"","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"9 mins."},"categories":[],"tags":[{"name":"笔记","slug":"笔记","count":41,"path":"api/tags/笔记.json"},{"name":"MySQL复习","slug":"MySQL复习","count":10,"path":"api/tags/MySQL复习.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%B4%A2%E5%BC%95\"><span class=\"toc-text\">索引</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BC%98%E7%BC%BA%E7%82%B9\"><span class=\"toc-text\">优缺点</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BC%98%E7%82%B9\"><span class=\"toc-text\">优点</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BC%BA%E7%82%B9\"><span class=\"toc-text\">缺点</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\">作用</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%83%85%E5%86%B5\"><span class=\"toc-text\">情况</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%9C%80%E8%A6%81%E5%BB%BA%E7%AB%8B%E7%B4%A2%E5%BC%95%E7%9A%84%E6%83%85%E5%86%B5\"><span class=\"toc-text\">需要建立索引的情况</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%8D%E9%9C%80%E8%A6%81%E5%BB%BA%E7%AB%8B%E7%B4%A2%E5%BC%95%E7%9A%84%E6%83%85%E5%86%B5\"><span class=\"toc-text\">不需要建立索引的情况</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#MySQL%E7%B4%A2%E5%BC%95%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">MySQL索引的数据结构</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#B-Tree\"><span class=\"toc-text\">B+ Tree</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%93%88%E5%B8%8C%E7%B4%A2%E5%BC%95\"><span class=\"toc-text\">哈希索引</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">区别</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%86%E7%B1%BB\"><span class=\"toc-text\">分类</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%BB%E9%94%AE%E7%B4%A2%E5%BC%95%EF%BC%88Primary-Key-Index%EF%BC%89\"><span class=\"toc-text\">主键索引（Primary Key Index）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%94%AF%E4%B8%80%E7%B4%A2%E5%BC%95%EF%BC%88Unique-Index%EF%BC%89\"><span class=\"toc-text\">唯一索引（Unique Index）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%99%AE%E9%80%9A%E7%B4%A2%E5%BC%95%EF%BC%88Normal-Index%EF%BC%89\"><span class=\"toc-text\">普通索引（Normal Index）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%A8%E6%96%87%E7%B4%A2%E5%BC%95%EF%BC%88Full-Text-Index%EF%BC%89\"><span class=\"toc-text\">全文索引（Full-Text Index）</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E9%9B%86%E5%90%88%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">集合操作</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%A9%BA%E5%80%BC%E7%9A%84%E5%A4%84%E7%90%86\"><span class=\"toc-text\">空值的处理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9D%A1%E4%BB%B6%E4%B8%AD%E7%9A%84%E7%A9%BA%E5%80%BC\"><span class=\"toc-text\">条件中的空值</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%9C%AF%E4%B8%AD%E7%9A%84%E7%A9%BA%E5%80%BC\"><span class=\"toc-text\">算术中的空值</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%81%9A%E5%90%88%E4%B8%AD%E7%9A%84%E7%A9%BA%E5%80%BC\"><span class=\"toc-text\">聚合中的空值</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%AF%94%E8%BE%83%E8%BF%90%E7%AE%97%E7%AC%A6%EF%BC%9A\"><span class=\"toc-text\">比较运算符：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0%EF%BC%9A\"><span class=\"toc-text\">聚合函数：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8E%92%E5%BA%8F%EF%BC%9A\"><span class=\"toc-text\">排序：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9D%A1%E4%BB%B6%E4%B8%AD%E7%9A%84%E5%A4%84%E7%90%86%EF%BC%9A\"><span class=\"toc-text\">条件中的处理：</span></a></li></ol></li></ol></li></ol>","author":{"name":"General_K1ng","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/GeneralK1ng/My_Blog_IMG@main/img/avatar.png","link":"/","description":"一名正在努力学习计算机的菜鸟","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/BILIBILI.svg","link":"https://space.bilibili.com/32927332"},"csdn":{"icon":"/svg/csdn.svg","link":"https://blog.csdn.net/qq_34849354"},"github":{"icon":"/svg/GitHub.svg","link":"https://github.com/GeneralK1ng"},"QQ":{"icon":"/svg/QQ.svg","link":"tencent://AddContact/?fromId=45&fromSubId=1&subcmd=all&uin=2822688858"}}}},"mapped":true,"prev_post":{"title":"MySQL Review-9","uid":"501d84f5a19f74694418ac5dda2db98c","slug":"MySQL-Review-9","date":"2023-12-07T11:54:31.000Z","updated":"2023-12-08T07:08:43.977Z","comments":true,"path":"api/articles/MySQL-Review-9.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/GeneralK1ng/My_Blog_IMG@main/img/MySQL-image.png","text":"这一章开始就是我们所谓的八股文了，但是考试又要考，你拿他有什么办法？ 数据库设计设计数据库，这是开发过程中非常关键的一个步骤，它涉及到如何组织和存储数据，以便系统可以有效地检索和管理信息。 需求分析： 在设计数据库之前，首先需要了解系统的需求。这包括确定系统将要存储和处理的数据类...","link":"","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"笔记","slug":"笔记","count":41,"path":"api/tags/笔记.json"},{"name":"MySQL复习","slug":"MySQL复习","count":10,"path":"api/tags/MySQL复习.json"}],"author":{"name":"General_K1ng","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/GeneralK1ng/My_Blog_IMG@main/img/avatar.png","link":"/","description":"一名正在努力学习计算机的菜鸟","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/BILIBILI.svg","link":"https://space.bilibili.com/32927332"},"csdn":{"icon":"/svg/csdn.svg","link":"https://blog.csdn.net/qq_34849354"},"github":{"icon":"/svg/GitHub.svg","link":"https://github.com/GeneralK1ng"},"QQ":{"icon":"/svg/QQ.svg","link":"tencent://AddContact/?fromId=45&fromSubId=1&subcmd=all&uin=2822688858"}}}},"feature":true},"next_post":{"title":"MySQL Review-7","uid":"dc1ef9ee097f4e4c28b3dcd1a91e91c5","slug":"MySQL-Review-7","date":"2023-12-06T08:42:20.000Z","updated":"2023-12-06T09:53:31.268Z","comments":true,"path":"api/articles/MySQL-Review-7.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/GeneralK1ng/My_Blog_IMG@main/img/MySQL-image.png","text":"继续继续。。。 GROUP BYGROUP BY 是 MySQL 中用于对查询结果进行分组的子句。它通常与聚合函数（如 SUM、COUNT、AVG 等）一起使用，以便对每个组应用聚合操作。使用 GROUP BY 可以将结果集按照一个或多个列的值分成不同的组。 基本的 GROUP ...","link":"","photos":[],"count_time":{"symbolsCount":"7.5k","symbolsTime":"7 mins."},"categories":[],"tags":[{"name":"笔记","slug":"笔记","count":41,"path":"api/tags/笔记.json"},{"name":"MySQL复习","slug":"MySQL复习","count":10,"path":"api/tags/MySQL复习.json"}],"author":{"name":"General_K1ng","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/GeneralK1ng/My_Blog_IMG@main/img/avatar.png","link":"/","description":"一名正在努力学习计算机的菜鸟","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/BILIBILI.svg","link":"https://space.bilibili.com/32927332"},"csdn":{"icon":"/svg/csdn.svg","link":"https://blog.csdn.net/qq_34849354"},"github":{"icon":"/svg/GitHub.svg","link":"https://github.com/GeneralK1ng"},"QQ":{"icon":"/svg/QQ.svg","link":"tencent://AddContact/?fromId=45&fromSubId=1&subcmd=all&uin=2822688858"}}}}}}