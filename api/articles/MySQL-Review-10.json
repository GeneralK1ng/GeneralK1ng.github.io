{"title":"MySQL Review-10","uid":"ef8bd82be23cedfc8cb7a2a8f2b9f3ab","slug":"MySQL-Review-10","date":"2023-12-08T07:08:26.000Z","updated":"2023-12-08T08:13:38.093Z","comments":true,"path":"api/articles/MySQL-Review-10.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/GeneralK1ng/My_Blog_IMG@main/img/MySQL-image.png","content":"<p>继续来到数据库的规范化，也就是一种优化数据库结构的一种范式。</p>\n<h1 id=\"数据库的规范化\"><a href=\"#数据库的规范化\" class=\"headerlink\" title=\"数据库的规范化\"></a>数据库的规范化</h1><h2 id=\"良好数据库设计规范\"><a href=\"#良好数据库设计规范\" class=\"headerlink\" title=\"良好数据库设计规范\"></a>良好数据库设计规范</h2><p><strong>最小化属性数量：</strong></p>\n<ul>\n<li>数据库应该包含最少数量的属性，足以支持企业的数据需求。这有助于保持数据库的简洁性，提高查询效率，并降低维护成本。只有必要的属性应该包含在数据库中，避免不必要的冗余。</li>\n</ul>\n<p><strong>具有紧密逻辑关系的属性在同一关系中：</strong></p>\n<ul>\n<li>相关的属性应该组织在同一关系（表）中，以反映它们之间的紧密逻辑关系。这有助于简化查询和维护操作，并提高数据库的一致性。例如，如果有关联的用户信息和订单信息，它们应该存储在同一关系中，而不是分散在不同的表中。</li>\n</ul>\n<p><strong>最小冗余：</strong></p>\n<ul>\n<li>数据库设计应该避免冗余，即相同的数据不应该在数据库中存储多次。冗余数据可能导致更新异常、插入异常和删除异常，从而影响数据库的一致性。每个属性只应该在数据库中表示一次，除非它是外键的一部分或完全是外键。外键是关联两个表的字段，允许在表之间建立关系。</li>\n</ul>\n<p><strong>外键的例外：</strong></p>\n<ul>\n<li>外键是一种属性，它们与另一个表中的主键或唯一键形成关联。尽管规范化目标是减少冗余，但外键是一个例外，因为它们用于建立表之间的关系。在这种情况下，外键的一部分或整体可能在多个表中出现，但这是为了保持关系完整性。在外键的情况下，允许属性在不同表中多次出现，以便确保相关表之间的关联性。</li>\n</ul>\n<h2 id=\"什么是数据库的规范化\"><a href=\"#什么是数据库的规范化\" class=\"headerlink\" title=\"什么是数据库的规范化\"></a>什么是数据库的规范化</h2><p>数据库规范化是一种数据库设计的方法，旨在通过组织数据库表的结构，减少数据冗余、提高数据一致性，并防止数据异常。这个过程通过将表拆分成更小、更紧凑的结构，以确保每个表都包含相关的数据，并且每个数据项都只在数据库中存储一次。这有助于减小数据库的复杂性，提高查询性能，并减少数据更新时的潜在问题。</p>\n<h2 id=\"ER建模与规范化\"><a href=\"#ER建模与规范化\" class=\"headerlink\" title=\"ER建模与规范化\"></a>ER建模与规范化</h2><p>实体关系建模（ER建模）和规范化是数据库设计中两个关键的步骤，它们各自关注不同的方面，但又相互关联，通常在数据库设计的不同阶段应用。</p>\n<h3 id=\"ER建模（Entity-Relationship-Modeling）：\"><a href=\"#ER建模（Entity-Relationship-Modeling）：\" class=\"headerlink\" title=\"ER建模（Entity-Relationship Modeling）：\"></a>ER建模（Entity-Relationship Modeling）：</h3><p><strong>定义：</strong> ER建模是一种用于描述数据库中数据实体、它们之间的关系和属性的图形化方法。它使用实体、关系和属性等概念，通过图形表示来描述数据模型，以便更好地理解和沟通数据库的结构。</p>\n<p><strong>特点：</strong></p>\n<ol>\n<li><strong>概念性：</strong> ER模型提供了一个概念性的视图，使人们能够从高层次上理解数据库中的实体以及它们之间的关系。</li>\n<li><strong>易于理解：</strong> 通过使用图形符号，ER模型使数据库设计更加可视化和易于理解。</li>\n<li><strong>关注业务需求：</strong> ER模型着重于捕捉业务需求和实体之间的关系，而不涉及具体的表结构。</li>\n</ol>\n<h3 id=\"规范化（Normalization）：\"><a href=\"#规范化（Normalization）：\" class=\"headerlink\" title=\"规范化（Normalization）：\"></a>规范化（Normalization）：</h3><p><strong>定义：</strong> 规范化是一种通过设计数据库表结构，以最小化冗余、降低数据异常的方法。这通常涉及将表拆分成更小的、更精确的结构，以确保每个表都符合特定的范式。</p>\n<p><strong>特点：</strong></p>\n<ol>\n<li><strong>结构化：</strong> 规范化关注数据库表的结构，以确保数据存储是结构化的、一致的，且没有不必要的冗余。</li>\n<li><strong>范式：</strong> 通过遵循范式的规则，规范化确保表的设计符合特定的标准，如第一范式、第二范式和第三范式等。</li>\n<li><strong>提高性能：</strong> 通过减小表的大小，规范化有助于提高查询性能，并减少数据更新时的潜在问题。</li>\n</ol>\n<h3 id=\"关联：\"><a href=\"#关联：\" class=\"headerlink\" title=\"关联：\"></a>关联：</h3><ol>\n<li><strong>设计阶段：</strong> ER建模通常是在数据库设计的早期阶段进行的，用于捕捉业务需求和关系。规范化通常发生在ER建模之后，用于优化数据库表的结构。</li>\n<li><strong>相互关联：</strong> ER模型的实体和关系可以为规范化提供一个起点。规范化过程中可能需要调整表结构，以更好地反映ER模型中定义的实体和它们之间的关系。</li>\n<li><strong>业务和性能：</strong> ER建模更侧重于业务需求和关系，而规范化更关注数据库的结构和性能。</li>\n</ol>\n<h2 id=\"数据冗余的问题\"><a href=\"#数据冗余的问题\" class=\"headerlink\" title=\"数据冗余的问题\"></a>数据冗余的问题</h2><p>数据冗余是指在数据库中存储相同信息的多个副本或冗余副本。虽然在某些情况下可能会选择故意引入一些冗余以提高查询性能，但通常情况下，过多的数据冗余可能导致一系列问题，包括：</p>\n<ol>\n<li><strong>更新异常：</strong> 当存在数据冗余时，如果更新操作只更新了其中一个副本而忘记更新其他副本，可能导致数据的不一致性。这被称为更新异常，其中数据的更新不同步，导致数据库中存在不一致的信息。</li>\n<li><strong>插入异常：</strong> 插入异常发生在试图插入新数据时，由于要求插入的数据所依赖的其他信息尚未存在，导致插入操作无法完成。这通常是由于数据分散在多个地方造成的，而不是集中存储。</li>\n<li><strong>删除异常：</strong> 删除异常发生在尝试删除某些数据时，由于这些数据同时被其他数据所引用，删除操作可能导致丢失不想删除的相关信息。这使得删除操作变得复杂并且可能引起问题。</li>\n<li><strong>数据不一致性：</strong> 数据冗余使得难以保持数据的一致性。如果同一信息的不同副本之间存在不一致，用户可能会看到相互矛盾的数据。</li>\n<li><strong>空间浪费：</strong> 存储相同的信息多次会导致空间浪费，尤其是在大型数据库中。这不仅浪费了物理存储空间，还增加了备份和维护的成本。</li>\n<li><strong>查询困难：</strong> 数据冗余可能导致查询变得复杂，因为相同的信息分散在不同的地方。这可能需要使用更复杂的查询来获取一致和完整的结果。</li>\n</ol>\n<h1 id=\"范式\"><a href=\"#范式\" class=\"headerlink\" title=\"范式\"></a>范式</h1><h2 id=\"功能依赖\"><a href=\"#功能依赖\" class=\"headerlink\" title=\"功能依赖\"></a>功能依赖</h2><p>在数据库理论中，<strong>功能依赖（Functional Dependency）</strong> 是指一个属性的值在给定其他属性的值的条件下，能够确定另一个属性的值。简而言之，如果我们知道某个属性（称为<strong>依赖项</strong>）的值，就能够唯一确定另一个属性（称为<strong>依赖源</strong>）的值，那么我们说依赖源函数依赖于依赖项。</p>\n<p>在关系数据库中，功能依赖是关系模型中一种重要的概念，通常用于规范化数据库设计。它有助于确保数据库表的结构能够遵循一些基本原则，防止冗余数据、维持数据的一致性，同时减小数据更新异常的风险。</p>\n<h3 id=\"功能依赖的表示\"><a href=\"#功能依赖的表示\" class=\"headerlink\" title=\"功能依赖的表示\"></a>功能依赖的表示</h3><p>在关系数据库中，我们用箭头（→）表示功能依赖。如果属性 X 的值决定了属性 Y 的值，我们写作 X → Y。</p>\n<p>例如，假设有一个学生表包含学生的学号（<code>StudentID</code>）和姓名（<code>StudentName</code>），则可以表示为：</p>\n<p><code>StudentID</code>→<code>StudentNameStudentID</code>→<code>StudentName</code></p>\n<p>这表示在给定学生的学号的情况下，能够唯一确定学生的姓名。</p>\n<h3 id=\"完全函数依赖\"><a href=\"#完全函数依赖\" class=\"headerlink\" title=\"完全函数依赖\"></a>完全函数依赖</h3><p>如果一个属性完全依赖于另一组属性，而不依赖于这组属性的任何子集，那么我们称这是一个完全函数依赖。</p>\n<p>例如，如果一个表中有 </p>\n<p><code>StudentID</code>→<code>StudentNameStudentID</code>→<code>StudentName</code> 和 <code>StudentID</code>,</p>\n<p> <code>Course</code>→<code>GradeStudentID</code>, <code>Course</code>→<code>Grade</code>，那么我们可以说 <code>Grade</code> 完全依赖于 <code>StudentID</code> 和 <code>Course</code>。</p>\n<h3 id=\"部分函数依赖\"><a href=\"#部分函数依赖\" class=\"headerlink\" title=\"部分函数依赖\"></a>部分函数依赖</h3><p>相反，如果一个属性依赖于另一组属性中的一部分，而不是全部，那么我们称这是一个部分函数依赖。</p>\n<p>例如，如果 <code>StudentID</code>, <code>Course</code>→<code>GradeStudentID</code>, <code>Course</code>→<code>Grade</code>，但 <code>StudentID</code>→<code>GradeStudentID</code>→<code>Grade</code> 不成立，那么我们可以说 <code>Grade</code> 部分依赖于 <code>StudentID</code> 和 <code>Course</code>。</p>\n<h3 id=\"传递函数依赖\"><a href=\"#传递函数依赖\" class=\"headerlink\" title=\"传递函数依赖\"></a>传递函数依赖</h3><p>如果一个属性依赖于另一组属性，而这组属性又依赖于另一组属性，那么我们称这是一个传递函数依赖。</p>\n<p>例如，如果 <code>A</code>→<code>BA</code>→<code>B</code> 和 <code>B</code>→<code>CB</code>→<code>C</code>，那么我们可以说 <code>A</code>→<code>CA</code>→<code>C</code> 是一个传递函数依赖。</p>\n<h2 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h2><p>假设我们要创建一个学生课程成绩的数据库表，我们可以使用 MySQL 来创建一个包含学生信息、课程信息和成绩的表。以下是一个简单的例子，演示了不同类型的功能依赖。</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">-- 创建学生表\nCREATE TABLE Students (\n    StudentID INT PRIMARY KEY,\n    StudentName VARCHAR(50) NOT NULL,\n    BirthDate DATE\n);\n\n-- 创建课程表\nCREATE TABLE Courses (\n    CourseID INT PRIMARY KEY,\n    CourseName VARCHAR(50) NOT NULL\n);\n\n-- 创建成绩表\nCREATE TABLE Grades (\n    StudentID INT,\n    CourseID INT,\n    Grade INT,\n    PRIMARY KEY (StudentID, CourseID),\n    FOREIGN KEY (StudentID) REFERENCES Students(StudentID),\n    FOREIGN KEY (CourseID) REFERENCES Courses(CourseID)\n);</code></pre>\n\n<p>在上面的例子中，我们创建了三个表：<code>Students</code>（学生表）、<code>Courses</code>（课程表）和<code>Grades</code>（成绩表）。</p>\n<ol>\n<li><strong>完全函数依赖的例子：</strong><ul>\n<li><code>Grades</code>表中的<code>Grade</code>完全依赖于<code>StudentID</code>和<code>CourseID</code>。这是因为给定了<code>StudentID</code>和<code>CourseID</code>的情况下，可以唯一确定相应的<code>Grade</code>。</li>\n</ul>\n</li>\n<li><strong>部分函数依赖的例子：</strong><ul>\n<li>如果我们假设一个学生只修一个课程，那么<code>Grades</code>表中的<code>Grade</code>部分依赖于<code>StudentID</code>。这是因为给定了<code>StudentID</code>，我们就能唯一确定该学生的所有课程成绩。</li>\n</ul>\n</li>\n<li><strong>传递函数依赖的例子：</strong><ul>\n<li>如果我们在<code>Students</code>表中添加了一个属性<code>BirthDate</code>，并假设<code>CourseID</code>是与<code>BirthDate</code>存在传递依赖关系，那么我们可以说<code>StudentID</code>传递函数依赖于<code>CourseID</code>。这是因为<code>StudentID</code>依赖于<code>BirthDate</code>，而<code>CourseID</code>又依赖于<code>StudentID</code>。请注意，这种情况可能不符合实际业务场景，只是为了演示传递函数依赖的概念。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"依赖传递\"><a href=\"#依赖传递\" class=\"headerlink\" title=\"依赖传递\"></a>依赖传递</h2><p>传递依赖是指如果一个属性 A 依赖于属性 B，并且属性 B 依赖于属性 C，则我们可以说属性 A 传递依赖于属性 C。这是一种由依赖关系链条构成的概念，其中属性之间的依赖不是直接的，而是通过其他属性传递的。</p>\n<h3 id=\"例子-1\"><a href=\"#例子-1\" class=\"headerlink\" title=\"例子\"></a>例子</h3><p>考虑一个关系模型，其中有三个属性 A、B 和 C，满足以下依赖关系：<br><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.05ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"13.889ex\" height=\"1.67ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -716 6139.1 738\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D434\" d=\"M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1027.8,0)\"><path data-c=\"2192\" d=\"M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2305.6,0)\"><path data-c=\"1D435\" d=\"M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z\"></path></g><g data-mml-node=\"mspace\" transform=\"translate(3064.6,0)\"></g><g data-mml-node=\"mi\" transform=\"translate(3064.6,0)\"><path data-c=\"1D435\" d=\"M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(4101.3,0)\"><path data-c=\"2192\" d=\"M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(5379.1,0)\"><path data-c=\"1D436\" d=\"M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z\"></path></g></g></g></svg></mjx-container><br>在这种情况下，我们可以得出传递依赖：<br><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.05ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"6.936ex\" height=\"1.67ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -716 3065.6 738\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D434\" d=\"M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1027.8,0)\"><path data-c=\"2192\" d=\"M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2305.6,0)\"><path data-c=\"1D436\" d=\"M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z\"></path></g></g></g></svg></mjx-container><br>这是因为 A 通过 B 间接地依赖于 C。</p>\n<h3 id=\"传递依赖的性质：\"><a href=\"#传递依赖的性质：\" class=\"headerlink\" title=\"传递依赖的性质：\"></a>传递依赖的性质：</h3><ol>\n<li><strong>传递依赖是由直接依赖关系构成的：</strong> 传递依赖并不是一种新的独立关系，而是由直接依赖关系的链条构成的。在上面的例子中，传递依赖 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.05ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"6.936ex\" height=\"1.67ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -716 3065.6 738\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D434\" d=\"M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1027.8,0)\"><path data-c=\"2192\" d=\"M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2305.6,0)\"><path data-c=\"1D436\" d=\"M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z\"></path></g></g></g></svg></mjx-container> 是由直接依赖 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"6.933ex\" height=\"1.645ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -716 3064.6 727\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D434\" d=\"M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1027.8,0)\"><path data-c=\"2192\" d=\"M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2305.6,0)\"><path data-c=\"1D435\" d=\"M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z\"></path></g></g></g></svg></mjx-container> 和 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.05ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"6.956ex\" height=\"1.645ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -705 3074.6 727\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D435\" d=\"M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1036.8,0)\"><path data-c=\"2192\" d=\"M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2314.6,0)\"><path data-c=\"1D436\" d=\"M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z\"></path></g></g></g></svg></mjx-container>构成的。</li>\n<li><strong>依赖链可能是多层的：</strong> 传递依赖的链条可能涉及多个属性。在上述例子中，我们只有两层的传递，但在更复杂的关系模型中，这种链条可能更长。</li>\n<li><strong>传递依赖的方向是单向的：</strong> 传递依赖是单向的，即 A 传递依赖于 C，并不意味着 C 传递依赖于 A。</li>\n</ol>\n<h1 id=\"三大范式\"><a href=\"#三大范式\" class=\"headerlink\" title=\"三大范式\"></a>三大范式</h1><ol>\n<li><strong>第一范式 (1NF)：</strong> 保证每个表中的每一列都是原子的，不可再分。这意味着每个单元格中的数据不再包含嵌套结构或多个值。</li>\n<li><strong>第二范式 (2NF)：</strong> 在满足第一范式的基础上，确保表中的非主键列完全依赖于全部主键而不是部分主键。这有助于消除数据部分依赖性。</li>\n<li><strong>第三范式 (3NF)：</strong> 在满足第二范式的基础上，确保表中的非主键列之间没有传递依赖关系。这有助于消除数据传递依赖性。</li>\n</ol>\n<h2 id=\"第一范式\"><a href=\"#第一范式\" class=\"headerlink\" title=\"第一范式\"></a>第一范式</h2><p><strong>第一范式（First Normal Form，1NF）</strong>是数据库规范化的第一个步骤，它确保数据库表中的数据是原子性的，即每一列都包含不可再分的原子数据。以下是第一范式的一些关键特点和要点：</p>\n<h3 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h3><p><strong>原子性：</strong></p>\n<ul>\n<li>第一范式要求每个表中的每一列都包含不可再分的原子数据。这意味着每一列中不能包含集合、数组、记录或其他类似的结构，而应该是单一的、不可再分的数据类型。</li>\n</ul>\n<p><strong>唯一性：</strong></p>\n<ul>\n<li>表中的每一行都应该是唯一的，没有重复的行。这是数据库表的基本特性，但在第一范式中，强调了确保每一行都是唯一的。</li>\n</ul>\n<p><strong>有序性无关：</strong></p>\n<ul>\n<li>第一范式与数据的顺序无关，即数据的存储顺序不影响数据的可访问性或完整性。在表中，行的顺序不重要，重要的是每一行都包含正确的、原子的数据。</li>\n</ul>\n<h3 id=\"例子-2\"><a href=\"#例子-2\" class=\"headerlink\" title=\"例子\"></a>例子</h3><p>考虑一个包含学生课程成绩的表，不符合第一范式的情况：</p>\n<table>\n<thead>\n<tr>\n<th>StudentID</th>\n<th>Courses</th>\n<th>Grades</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>Math, Physics</td>\n<td>A, B</td>\n</tr>\n<tr>\n<td>2</td>\n<td>Chemistry, Computer Science</td>\n<td>A, A</td>\n</tr>\n</tbody></table>\n<p>上述表中的”Courses”和”Grades”列包含多个数据项，不是原子的。为了符合第一范式，我们可以将这个表分解为两个表：</p>\n<p>– 学生表</p>\n<table>\n<thead>\n<tr>\n<th>StudentID</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n</tr>\n<tr>\n<td>2</td>\n</tr>\n</tbody></table>\n<p>– 课程成绩表</p>\n<table>\n<thead>\n<tr>\n<th>StudentID</th>\n<th>Course</th>\n<th>Grade</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>Math</td>\n<td>A</td>\n</tr>\n<tr>\n<td>1</td>\n<td>Physics</td>\n<td>B</td>\n</tr>\n<tr>\n<td>2</td>\n<td>Chemistry</td>\n<td>A</td>\n</tr>\n<tr>\n<td>2</td>\n<td>Comp. Science</td>\n<td>A</td>\n</tr>\n</tbody></table>\n<p>这样，每个表都包含原子数据，并且不再存在多个值的情况。</p>\n<p>第一范式是数据库规范化的基础，确保数据的原子性，使得数据库结构更加清晰、可维护，同时避免了与非规范化数据结构相关的问题。在实际设计中，应该始终考虑将表调整为满足第一范式的形式。</p>\n<h2 id=\"第二范式\"><a href=\"#第二范式\" class=\"headerlink\" title=\"第二范式\"></a>第二范式</h2><p><strong>第二范式（Second Normal Form，2NF）</strong>是数据库规范化的第二步，它建立在第一范式的基础上，解决了包含部分依赖的问题。第二范式的关键思想是确保表中的所有非主键列完全依赖于主键，而不是依赖于主键的部分属性。以下是第二范式的一些关键特点和要点：</p>\n<h3 id=\"特点-1\"><a href=\"#特点-1\" class=\"headerlink\" title=\"特点\"></a>特点</h3><p><strong>完全函数依赖：</strong></p>\n<ul>\n<li>第二范式要求表中的非主键列完全函数依赖于主键。换句话说，如果一个表的主键是由多个属性组成的，那么所有其他非主键列都应该完全依赖于这个组合主键，而不是只依赖于主键的一部分。</li>\n</ul>\n<p><strong>消除部分依赖：</strong></p>\n<ul>\n<li>通过确保所有非主键列都完全依赖于主键，第二范式帮助消除了表中的部分依赖关系。部分依赖是指表中的某些列仅依赖于主键的一部分。</li>\n</ul>\n<h3 id=\"例子-3\"><a href=\"#例子-3\" class=\"headerlink\" title=\"例子\"></a>例子</h3><p>考虑一个包含学生课程成绩的表，不符合第二范式的情况：</p>\n<table>\n<thead>\n<tr>\n<th>StudentID</th>\n<th>Course</th>\n<th>Professor</th>\n<th>Grade</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>Math</td>\n<td>Dr. Smith</td>\n<td>A</td>\n</tr>\n<tr>\n<td>1</td>\n<td>Physics</td>\n<td>Dr. Johnson</td>\n<td>B</td>\n</tr>\n<tr>\n<td>2</td>\n<td>Chemistry</td>\n<td>Dr. Davis</td>\n<td>A</td>\n</tr>\n<tr>\n<td>2</td>\n<td>Comp. Science</td>\n<td>Dr. Smith</td>\n<td>A</td>\n</tr>\n</tbody></table>\n<p>在上述表中，主键是 (StudentID, Course)，其中”Professor”列只依赖于主键的一部分（”Course”），这违反了第二范式。为了符合第二范式，我们可以将表分解为这几个表：</p>\n<p>– 学生表</p>\n<table>\n<thead>\n<tr>\n<th>StudentID</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n</tr>\n<tr>\n<td>2</td>\n</tr>\n</tbody></table>\n<p>– 课程表</p>\n<table>\n<thead>\n<tr>\n<th>Course</th>\n<th>Professor</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Math</td>\n<td>Dr. Smith</td>\n</tr>\n<tr>\n<td>Physics</td>\n<td>Dr. Johnson</td>\n</tr>\n<tr>\n<td>Chemistry</td>\n<td>Dr. Davis</td>\n</tr>\n<tr>\n<td>Comp. Science</td>\n<td>Dr. Smith</td>\n</tr>\n</tbody></table>\n<p>– 课程成绩表</p>\n<table>\n<thead>\n<tr>\n<th>StudentID</th>\n<th>Course</th>\n<th>Grade</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>Math</td>\n<td>A</td>\n</tr>\n<tr>\n<td>1</td>\n<td>Physics</td>\n<td>B</td>\n</tr>\n<tr>\n<td>2</td>\n<td>Chemistry</td>\n<td>A</td>\n</tr>\n<tr>\n<td>2</td>\n<td>Comp. Science</td>\n<td>A</td>\n</tr>\n</tbody></table>\n<p>现在，“Professor”只依赖于“Course”，而不再依赖于主键，因此符合第二范式的要求。</p>\n<p>第二范式通过确保表中的非主键列完全依赖于主键，帮助规范化数据库表结构，提高数据的一致性和完整性。在实际数据库设计中，应该仔细分析表的依赖关系，以确保它们符合第二范式的要求。</p>\n<h2 id=\"第三范式\"><a href=\"#第三范式\" class=\"headerlink\" title=\"第三范式\"></a>第三范式</h2><p><strong>第三范式（Third Normal Form，3NF）</strong>是数据库规范化的第三步，它建立在第二范式的基础上，解决了表中的传递依赖问题。第三范式的核心思想是确保表中的所有非主键列都不传递依赖于主键，即不存在非主键列之间的传递依赖关系。以下是第三范式的一些关键特点和要点：</p>\n<h3 id=\"特点-2\"><a href=\"#特点-2\" class=\"headerlink\" title=\"特点\"></a>特点</h3><p><strong>消除传递依赖：</strong></p>\n<ul>\n<li>第三范式要求表中的非主键列不应该传递依赖于主键。如果一个非主键列依赖于主键，而另一列依赖于这个非主键列，那么就存在传递依赖。</li>\n</ul>\n<p><strong>避免冗余数据：</strong></p>\n<ul>\n<li>通过消除传递依赖，第三范式有助于避免表中的冗余数据。这有助于数据库结构的清晰性、一致性和减小存储空间的需求。</li>\n</ul>\n<h3 id=\"例子-4\"><a href=\"#例子-4\" class=\"headerlink\" title=\"例子\"></a>例子</h3><p>考虑一个包含学生课程成绩的表，不符合第三范式的情况：</p>\n<table>\n<thead>\n<tr>\n<th>StudentID</th>\n<th>Course</th>\n<th>Professor</th>\n<th>ProfessorOffice</th>\n<th>Grade</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>Math</td>\n<td>Dr. Smith</td>\n<td>Room 101</td>\n<td>A</td>\n</tr>\n<tr>\n<td>1</td>\n<td>Physics</td>\n<td>Dr. Johnson</td>\n<td>Room 105</td>\n<td>B</td>\n</tr>\n<tr>\n<td>2</td>\n<td>Chemistry</td>\n<td>Dr. Davis</td>\n<td>Room 103</td>\n<td>A</td>\n</tr>\n<tr>\n<td>2</td>\n<td>Comp. Science</td>\n<td>Dr. Smith</td>\n<td>Room 101</td>\n<td>A</td>\n</tr>\n</tbody></table>\n<p>在上述表中，”ProfessorOffice”列依赖于”Professor”，而”Professor”又依赖于主键。这导致了传递依赖，不符合第三范式的要求。为了符合第三范式，我们可以将表分解为这几个表：</p>\n<p>– 学生表</p>\n<table>\n<thead>\n<tr>\n<th>StudentID</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n</tr>\n<tr>\n<td>2</td>\n</tr>\n</tbody></table>\n<p>– 课程表</p>\n<table>\n<thead>\n<tr>\n<th>Course</th>\n<th>Professor</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Math</td>\n<td>Dr. Smith</td>\n</tr>\n<tr>\n<td>Physics</td>\n<td>Dr. Johnson</td>\n</tr>\n<tr>\n<td>Chemistry</td>\n<td>Dr. Davis</td>\n</tr>\n<tr>\n<td>Comp. Science</td>\n<td>Dr. Smith</td>\n</tr>\n</tbody></table>\n<p>– 教授表</p>\n<table>\n<thead>\n<tr>\n<th>Professor</th>\n<th>ProfessorOffice</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Dr. Smith</td>\n<td>Room 101</td>\n</tr>\n<tr>\n<td>Dr. Johnson</td>\n<td>Room 105</td>\n</tr>\n<tr>\n<td>Dr. Davis</td>\n<td>Room 103</td>\n</tr>\n</tbody></table>\n<p>– 课程成绩表</p>\n<table>\n<thead>\n<tr>\n<th>StudentID</th>\n<th>Course</th>\n<th>Grade</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>Math</td>\n<td>A</td>\n</tr>\n<tr>\n<td>1</td>\n<td>Physics</td>\n<td>B</td>\n</tr>\n<tr>\n<td>2</td>\n<td>Chemistry</td>\n<td>A</td>\n</tr>\n<tr>\n<td>2</td>\n<td>Comp. Science</td>\n<td>A</td>\n</tr>\n</tbody></table>\n<p>这样，每个表都不存在传递依赖，符合第三范式的要求。</p>\n<p>第三范式通过消除表中的传递依赖，帮助规范化数据库表结构，确保非主键列之间没有不必要的依赖关系。在实际数据库设计中，应该仔细分析表的依赖关系，以确保它们符合第三范式的要求，提高数据库的结构清晰性和一致性。</p>\n<h2 id=\"实操\"><a href=\"#实操\" class=\"headerlink\" title=\"实操\"></a>实操</h2><p>比方说如果我们要设计一个图书管理系统，首先我们应该怎么办？</p>\n<p>肯定是先进行ER模型的建立。</p>\n<h3 id=\"ER模型设计\"><a href=\"#ER模型设计\" class=\"headerlink\" title=\"ER模型设计\"></a>ER模型设计</h3><p>在ER模型中，我们可能有以下几个实体和它们之间的关系：</p>\n<ul>\n<li>实体：图书（Book）、作者（Author）、图书馆成员（Library Member）</li>\n<li>关系：图书与作者之间是“写作”关系，图书馆成员与图书之间是“借阅”关系。</li>\n</ul>\n<p>我们还可以画出这几个关系的ER图</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/GeneralK1ng/My_Blog_IMG@main/img/libManagementER.png\"></p>\n<h3 id=\"数据库设计\"><a href=\"#数据库设计\" class=\"headerlink\" title=\"数据库设计\"></a>数据库设计</h3><p>根据ER模型，我们可以设计初始的数据库表结构：</p>\n<p>– 图书表</p>\n<table>\n<thead>\n<tr>\n<th>BookID</th>\n<th>Title</th>\n<th>ISBN</th>\n<th>AuthorID</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>“Introduction…”</td>\n<td>“123456789”</td>\n<td>1</td>\n</tr>\n<tr>\n<td>2</td>\n<td>“Database Des…”</td>\n<td>“987654321”</td>\n<td>2</td>\n</tr>\n</tbody></table>\n<p>– 作者表</p>\n<table>\n<thead>\n<tr>\n<th>AuthorID</th>\n<th>AuthorName</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>“John Smith”</td>\n</tr>\n<tr>\n<td>2</td>\n<td>“Jane Doe”</td>\n</tr>\n</tbody></table>\n<p>– 图书馆成员表</p>\n<table>\n<thead>\n<tr>\n<th>MemberID</th>\n<th>MemberName</th>\n<th>MemberEmail</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>101</td>\n<td>“Alice Johnson”</td>\n<td>“<a href=\"mailto:&#97;&#x6c;&#105;&#x63;&#101;&#64;&#x65;&#x6d;&#x61;&#x69;&#x6c;&#46;&#99;&#111;&#109;\">alice@email.com</a>“</td>\n</tr>\n</tbody></table>\n<h3 id=\"第一范式（1NF）\"><a href=\"#第一范式（1NF）\" class=\"headerlink\" title=\"第一范式（1NF）\"></a>第一范式（1NF）</h3><p>确保每列都包含原子数据，消除重复的列。</p>\n<p>好像这个表已经满足第一范式了，所以跳过。</p>\n<h3 id=\"第二范式（2NF）\"><a href=\"#第二范式（2NF）\" class=\"headerlink\" title=\"第二范式（2NF）\"></a>第二范式（2NF）</h3><p>确保非主键列完全依赖于主键。</p>\n<p>– 图书表</p>\n<table>\n<thead>\n<tr>\n<th>BookID</th>\n<th>Title</th>\n<th>ISBN</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>“Introduction…”</td>\n<td>“123456789”</td>\n</tr>\n<tr>\n<td>2</td>\n<td>“Database Des…”</td>\n<td>“987654321”</td>\n</tr>\n</tbody></table>\n<p>– 作者表</p>\n<table>\n<thead>\n<tr>\n<th>AuthorID</th>\n<th>AuthorName</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>“John Smith”</td>\n</tr>\n<tr>\n<td>2</td>\n<td>“Jane Doe”</td>\n</tr>\n</tbody></table>\n<p>– 图书作者关系表</p>\n<table>\n<thead>\n<tr>\n<th>BookID</th>\n<th>AuthorID</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>1</td>\n</tr>\n<tr>\n<td>2</td>\n<td>2</td>\n</tr>\n</tbody></table>\n<p>– 图书馆成员表</p>\n<table>\n<thead>\n<tr>\n<th>MemberID</th>\n<th>MemberName</th>\n<th>MemberEmail</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>101</td>\n<td>“Alice Johnson”</td>\n<td>“<a href=\"mailto:&#97;&#108;&#x69;&#x63;&#x65;&#x40;&#101;&#109;&#97;&#105;&#x6c;&#46;&#x63;&#x6f;&#x6d;\">alice@email.com</a>“</td>\n</tr>\n</tbody></table>\n<h3 id=\"第三范式（3NF）\"><a href=\"#第三范式（3NF）\" class=\"headerlink\" title=\"第三范式（3NF）\"></a>第三范式（3NF）</h3><p>仔细一看，这样好像也已经复合第三范式了。。。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>那就总结一下：</p>\n<h3 id=\"第一范式（1NF）：\"><a href=\"#第一范式（1NF）：\" class=\"headerlink\" title=\"第一范式（1NF）：\"></a>第一范式（1NF）：</h3><p><strong>目标：</strong> 确保数据库表字段的原子性。</p>\n<p><strong>例子：</strong> 如果有一个包含用户信息的字段，如 “广东省 10086”，根据第一范式，应该拆分成 “省份：广东省” 和 “电话号码：10086” 两个字段，以确保每个字段都是原子的，不可再分。</p>\n<h3 id=\"第二范式（2NF）：\"><a href=\"#第二范式（2NF）：\" class=\"headerlink\" title=\"第二范式（2NF）：\"></a>第二范式（2NF）：</h3><p><strong>目标：</strong> 除了满足第一范式，表必须有一个主键；非主键列必须完全依赖于主键。</p>\n<p><strong>例子：</strong> 考虑一个选课关系表，包含学号、学生姓名、年龄、课程名称、成绩和学分。如果学分完全依赖于课程名称，而姓名和年龄完全依赖于学号，那么这不符合第二范式。解决方法是拆分成学生表、课程表和选课关系表，确保每个表有自己的主键，消除部分依赖。</p>\n<h3 id=\"第三范式（3NF）：\"><a href=\"#第三范式（3NF）：\" class=\"headerlink\" title=\"第三范式（3NF）：\"></a>第三范式（3NF）：</h3><p><strong>目标：</strong> 除了满足第二范式，非主键列必须直接依赖于主键，不能存在传递依赖。</p>\n<p><strong>例子：</strong> 考虑一个学生关系表，包含学号、学生姓名、年龄、学院ID、学院地点和学院电话。如果学院地点和学院电话直接依赖于学院ID，而学院ID又依赖于学号，存在传递依赖，不符合第三范式。解决方法是拆分成学生表和学院表，确保非主键列直接依赖于主键。</p>\n<h3 id=\"2NF-和-3NF-的区别：\"><a href=\"#2NF-和-3NF-的区别：\" class=\"headerlink\" title=\"2NF 和 3NF 的区别：\"></a>2NF 和 3NF 的区别：</h3><ul>\n<li><strong>2NF：</strong> 考虑非主键列是否完全依赖于主键。</li>\n<li><strong>3NF：</strong> 考虑非主键列是否直接依赖于主键，避免传递依赖。</li>\n</ul>\n","text":"继续来到数据库的规范化，也就是一种优化数据库结构的一种范式。 数据库的规范化良好数据库设计规范最小化属性数量： 数据库应该包含最少数量的属性，足以支持企业的数据需求。这有助于保持数据库的简洁性，提高查询效率，并降低维护成本。只有必要的属性应该包含在数据库中，避免不必要的冗余。 具...","link":"","photos":[],"count_time":{"symbolsCount":"8.7k","symbolsTime":"8 mins."},"categories":[],"tags":[{"name":"笔记","slug":"笔记","count":44,"path":"api/tags/笔记.json"},{"name":"MySQL复习","slug":"MySQL复习","count":10,"path":"api/tags/MySQL复习.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E8%A7%84%E8%8C%83%E5%8C%96\"><span class=\"toc-text\">数据库的规范化</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%89%AF%E5%A5%BD%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83\"><span class=\"toc-text\">良好数据库设计规范</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AF%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E8%A7%84%E8%8C%83%E5%8C%96\"><span class=\"toc-text\">什么是数据库的规范化</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#ER%E5%BB%BA%E6%A8%A1%E4%B8%8E%E8%A7%84%E8%8C%83%E5%8C%96\"><span class=\"toc-text\">ER建模与规范化</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#ER%E5%BB%BA%E6%A8%A1%EF%BC%88Entity-Relationship-Modeling%EF%BC%89%EF%BC%9A\"><span class=\"toc-text\">ER建模（Entity-Relationship Modeling）：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%A7%84%E8%8C%83%E5%8C%96%EF%BC%88Normalization%EF%BC%89%EF%BC%9A\"><span class=\"toc-text\">规范化（Normalization）：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%B3%E8%81%94%EF%BC%9A\"><span class=\"toc-text\">关联：</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E5%86%97%E4%BD%99%E7%9A%84%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">数据冗余的问题</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%8C%83%E5%BC%8F\"><span class=\"toc-text\">范式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8A%9F%E8%83%BD%E4%BE%9D%E8%B5%96\"><span class=\"toc-text\">功能依赖</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8A%9F%E8%83%BD%E4%BE%9D%E8%B5%96%E7%9A%84%E8%A1%A8%E7%A4%BA\"><span class=\"toc-text\">功能依赖的表示</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%8C%E5%85%A8%E5%87%BD%E6%95%B0%E4%BE%9D%E8%B5%96\"><span class=\"toc-text\">完全函数依赖</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%83%A8%E5%88%86%E5%87%BD%E6%95%B0%E4%BE%9D%E8%B5%96\"><span class=\"toc-text\">部分函数依赖</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BC%A0%E9%80%92%E5%87%BD%E6%95%B0%E4%BE%9D%E8%B5%96\"><span class=\"toc-text\">传递函数依赖</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BE%8B%E5%AD%90\"><span class=\"toc-text\">例子</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BE%9D%E8%B5%96%E4%BC%A0%E9%80%92\"><span class=\"toc-text\">依赖传递</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BE%8B%E5%AD%90-1\"><span class=\"toc-text\">例子</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BC%A0%E9%80%92%E4%BE%9D%E8%B5%96%E7%9A%84%E6%80%A7%E8%B4%A8%EF%BC%9A\"><span class=\"toc-text\">传递依赖的性质：</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%89%E5%A4%A7%E8%8C%83%E5%BC%8F\"><span class=\"toc-text\">三大范式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%80%E8%8C%83%E5%BC%8F\"><span class=\"toc-text\">第一范式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%89%B9%E7%82%B9\"><span class=\"toc-text\">特点</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BE%8B%E5%AD%90-2\"><span class=\"toc-text\">例子</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%BA%8C%E8%8C%83%E5%BC%8F\"><span class=\"toc-text\">第二范式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%89%B9%E7%82%B9-1\"><span class=\"toc-text\">特点</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BE%8B%E5%AD%90-3\"><span class=\"toc-text\">例子</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%89%E8%8C%83%E5%BC%8F\"><span class=\"toc-text\">第三范式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%89%B9%E7%82%B9-2\"><span class=\"toc-text\">特点</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BE%8B%E5%AD%90-4\"><span class=\"toc-text\">例子</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E6%93%8D\"><span class=\"toc-text\">实操</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#ER%E6%A8%A1%E5%9E%8B%E8%AE%BE%E8%AE%A1\"><span class=\"toc-text\">ER模型设计</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1\"><span class=\"toc-text\">数据库设计</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%80%E8%8C%83%E5%BC%8F%EF%BC%881NF%EF%BC%89\"><span class=\"toc-text\">第一范式（1NF）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%BA%8C%E8%8C%83%E5%BC%8F%EF%BC%882NF%EF%BC%89\"><span class=\"toc-text\">第二范式（2NF）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%89%E8%8C%83%E5%BC%8F%EF%BC%883NF%EF%BC%89\"><span class=\"toc-text\">第三范式（3NF）</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%80%E8%8C%83%E5%BC%8F%EF%BC%881NF%EF%BC%89%EF%BC%9A\"><span class=\"toc-text\">第一范式（1NF）：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%BA%8C%E8%8C%83%E5%BC%8F%EF%BC%882NF%EF%BC%89%EF%BC%9A\"><span class=\"toc-text\">第二范式（2NF）：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%89%E8%8C%83%E5%BC%8F%EF%BC%883NF%EF%BC%89%EF%BC%9A\"><span class=\"toc-text\">第三范式（3NF）：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2NF-%E5%92%8C-3NF-%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%9A\"><span class=\"toc-text\">2NF 和 3NF 的区别：</span></a></li></ol></li></ol></li></ol>","author":{"name":"General_K1ng","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/GeneralK1ng/My_Blog_IMG@main/img/avatar.png","link":"/","description":"一名正在努力学习计算机的菜鸟","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/BILIBILI.svg","link":"https://space.bilibili.com/32927332"},"csdn":{"icon":"/svg/csdn.svg","link":"https://blog.csdn.net/qq_34849354"},"github":{"icon":"/svg/GitHub.svg","link":"https://github.com/GeneralK1ng"},"QQ":{"icon":"/svg/QQ.svg","link":"tencent://AddContact/?fromId=45&fromSubId=1&subcmd=all&uin=2822688858"}}}},"mapped":true,"prev_post":{"title":"CPT101 Review-2","uid":"e585c831fab448b304cde81e18fc31a2","slug":"CPT101-Review-2","date":"2023-12-08T10:02:43.000Z","updated":"2023-12-09T07:55:07.506Z","comments":true,"path":"api/articles/CPT101-Review-2.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/GeneralK1ng/My_Blog_IMG@main/img/CPT101-img.png","text":"期末考试，细算留一个月用来复习好像是真的有点紧了，甚至现在都不只一个月。 101就按部就班，下周需要复习107，101就跟着感觉走算了。 IPO模型Input-Process-Output (IPO) 模型是描述计算机功能和工作原理的基本概念。这个模型简要地阐述了计算机是如何接收...","link":"","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"9 mins."},"categories":[],"tags":[{"name":"CPT101复习","slug":"CPT101复习","count":5,"path":"api/tags/CPT101复习.json"},{"name":"笔记","slug":"笔记","count":44,"path":"api/tags/笔记.json"}],"author":{"name":"General_K1ng","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/GeneralK1ng/My_Blog_IMG@main/img/avatar.png","link":"/","description":"一名正在努力学习计算机的菜鸟","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/BILIBILI.svg","link":"https://space.bilibili.com/32927332"},"csdn":{"icon":"/svg/csdn.svg","link":"https://blog.csdn.net/qq_34849354"},"github":{"icon":"/svg/GitHub.svg","link":"https://github.com/GeneralK1ng"},"QQ":{"icon":"/svg/QQ.svg","link":"tencent://AddContact/?fromId=45&fromSubId=1&subcmd=all&uin=2822688858"}}}}},"next_post":{"title":"MySQL Review-9","uid":"501d84f5a19f74694418ac5dda2db98c","slug":"MySQL-Review-9","date":"2023-12-07T11:54:31.000Z","updated":"2023-12-08T07:08:43.977Z","comments":true,"path":"api/articles/MySQL-Review-9.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/GeneralK1ng/My_Blog_IMG@main/img/MySQL-image.png","text":"这一章开始就是我们所谓的八股文了，但是考试又要考，你拿他有什么办法？ 数据库设计设计数据库，这是开发过程中非常关键的一个步骤，它涉及到如何组织和存储数据，以便系统可以有效地检索和管理信息。 需求分析： 在设计数据库之前，首先需要了解系统的需求。这包括确定系统将要存储和处理的数据类...","link":"","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"笔记","slug":"笔记","count":44,"path":"api/tags/笔记.json"},{"name":"MySQL复习","slug":"MySQL复习","count":10,"path":"api/tags/MySQL复习.json"}],"author":{"name":"General_K1ng","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/GeneralK1ng/My_Blog_IMG@main/img/avatar.png","link":"/","description":"一名正在努力学习计算机的菜鸟","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/BILIBILI.svg","link":"https://space.bilibili.com/32927332"},"csdn":{"icon":"/svg/csdn.svg","link":"https://blog.csdn.net/qq_34849354"},"github":{"icon":"/svg/GitHub.svg","link":"https://github.com/GeneralK1ng"},"QQ":{"icon":"/svg/QQ.svg","link":"tencent://AddContact/?fromId=45&fromSubId=1&subcmd=all&uin=2822688858"}}}}}}