{"title":"CPT101 Review-1","uid":"ca462487924054497383c1abea48a162","slug":"CPT101-Review-1","date":"2023-12-03T07:50:09.000Z","updated":"2023-12-03T08:51:58.666Z","comments":true,"path":"api/articles/CPT101-Review-1.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/GeneralK1ng/My_Blog_IMG@main/img/CPT101-img.png","content":"<p>今天复习CPT101，在我看来全是死记硬背的东西，但是不背又不行，唉</p>\n<p>我看课件感觉好多废话，但是我又不知道到底会不会考，我真无语了</p>\n<h1 id=\"计算机的分类\"><a href=\"#计算机的分类\" class=\"headerlink\" title=\"计算机的分类\"></a>计算机的分类</h1><p>计算机主要可以分为四个主要阶段，分别是：大型计算机，超级计算机，工作站，微型计算机，个人电脑。</p>\n<p><strong>Mainframe Computers（大型计算机，1960年代）</strong></p>\n<ul>\n<li><strong>简单解释：</strong> 大型计算机就像是一座超级大的智能城市，可以同时处理很多任务。</li>\n<li><strong>比喻：</strong> 想象一座巨大的超级电脑城市，里面有很多小工作区域，每个区域负责不同的事情，比如管理大量数据或运行复杂的程序。</li>\n<li><strong>诞生时间：</strong> 大型计算机的出现可以追溯到20世纪40年代末至50年代初。这个时期就好像是计算机的“古代时代”，大概在你的爷爷奶奶年轻的时候。正是二战后，人们开始研究如何用电子设备进行更复杂的计算任务。</li>\n</ul>\n<p><strong>Supercomputers（超级计算机，1970年代）</strong></p>\n<ul>\n<li><strong>简单解释：</strong> 超级计算机就像是计算能力极强的超级英雄，可以解决非常复杂的问题。</li>\n<li><strong>比喻：</strong> 想象一个能够瞬间算出很多数学题答案的超级数学英雄，这就是超级计算机。</li>\n<li><strong>诞生时间：</strong> 超级计算机的发展始于20世纪70年代。在这个时期，就好像是计算机的“英雄时代”，大概在你的爸爸妈妈年轻的时候。科学家们需要处理更加复杂的科学和工程计算任务，这促使了超级计算机的发展。</li>\n</ul>\n<p><strong>Workstations（工作站，1980年代）</strong></p>\n<ul>\n<li><strong>简单解释：</strong> 工作站就像是一座小型工作城市，专门用来完成一些复杂的设计和工程任务。</li>\n<li><strong>比喻：</strong> 想象一座小城市里有很多专业的设计师和工程师，他们使用工作站完成一些很酷的设计和计算工作。</li>\n<li><strong>诞生时间：</strong>工作站的兴起发生在20世纪80年代，就好像是计算机的“现代时代”开始，大概在你的父母小时候。这是计算机技术向专业领域渗透的时期。科学家、工程师和设计师需要更强大的计算能力来处理复杂的图形和设计任务。</li>\n</ul>\n<p><strong>Microcomputers（微型计算机，1980年代）</strong></p>\n<ul>\n<li><strong>简单解释：</strong> 微型计算机就像是一座小镇，你可以在家里使用它完成一些简单的任务。</li>\n<li><strong>比喻：</strong> 想象一座小镇里的小电脑，可以用来写作业、玩游戏，还可以学一些新知识。</li>\n<li><strong>诞生时间：</strong> 微型计算机在20世纪80年代逐渐普及。就好像是计算机的“小镇时代”，大概在你的爸爸妈妈小时候。个人电脑如IBM PC等的推出使得计算机变得更加亲民，个人用户可以在家里使用它们。</li>\n</ul>\n<p><strong>Personal Computers（个人电脑，1980年代）</strong></p>\n<ul>\n<li><strong>简单解释：</strong> 个人电脑就像是你自己的小房子，可以在里面做很多事情，包括学习、玩游戏和上网。</li>\n<li><strong>比喻：</strong> 想象你有一个属于自己的小电脑房子，可以在里面做你喜欢的事情，就像有一个属于你的小天地。</li>\n<li><strong>诞生时间：</strong> 个人电脑的兴起主要发生在20世纪80年代，这是计算机的“个人时代”，大概在你的爸爸妈妈小时候。尤其是IBM PC的推出。这是计算机走向家庭的时代，人们开始在家里使用个人电脑进行各种任务。</li>\n</ul>\n<p><strong>Microcontrollers（微控制器，1980年代）</strong></p>\n<ul>\n<li><strong>简单解释：</strong> 微控制器就像是一个小小的计算小助手，专门负责控制和管理一些小型设备。</li>\n<li><strong>比喻：</strong> 想象一下微控制器就像是一位小小的机器小管家，可以控制各种小玩具、计算器，甚至汽车里的一些功能。</li>\n<li><strong>诞生时间：</strong> 微控制器和嵌入式计算机的发展在20世纪80年代也变得显著，就好像是计算机的“微小时代”，大概在你的爸爸妈妈小时候。尤其是随着电子产品的普及，这些小型计算机开始被嵌入到各种设备中，从电子计算器到汽车控制系统。</li>\n</ul>\n<p><strong>Embedded or Dedicated Computers（嵌入式或专用计算机，从计算器到汽车）</strong></p>\n<ul>\n<li><strong>简单解释：</strong> 这些计算机就像是隐藏在各种设备中的小小智能大脑，让设备能够执行特定的功能。</li>\n<li><strong>比喻：</strong> 想象一下这是设备里的小小大脑，让你的计算器、手机，甚至汽车都能够聪明地完成各种任务。</li>\n<li><strong>诞生时间：</strong> 这是计算机的“嵌入时代”，从你的爸爸妈妈小时候一直到现在。</li>\n</ul>\n<p><strong>Servers（服务器，1980年代）</strong></p>\n<ul>\n<li><strong>简单解释：</strong> 服务器就像是一座大型信息中心，它们帮助连接并提供服务给很多人。</li>\n<li><strong>比喻：</strong> 想象一下服务器是一座大型的服务城市，通过网络连接，可以为很多人提供信息和服务。</li>\n<li><strong>诞生时间：</strong> 服务器的发展可以追溯到20世纪80年代。这是计算机的“连接时代”，从你的爸爸妈妈小时候一直到现在。随着互联网的兴起，人们需要大型的中央计算机来存储和提供互联网服务，这推动了服务器技术的发展。</li>\n</ul>\n<p><strong>Chip Computer (?)</strong></p>\n<ul>\n<li><strong>简单解释：</strong> 芯片计算机可能指的是一种小型计算机，内置在一个芯片中，用于执行一些简单的任务。</li>\n<li><strong>比喻：</strong> 想象一下一个微小的芯片里有一个小型计算机，可以完成一些基础的计算任务。</li>\n<li><strong>诞生时间：</strong> 这可能是计算机的“微芯时代”，从你的爸爸妈妈小时候一直到现在。</li>\n</ul>\n<p>这样大概应该可以基本上记住计算机的发展史？不知道，反正课件就这些，上网找了点资料，应该能背。</p>\n<h1 id=\"计算机世代\"><a href=\"#计算机世代\" class=\"headerlink\" title=\"计算机世代\"></a>计算机世代</h1><p>世代这词怎么看着这么中二。</p>\n<ol>\n<li><strong>第一代计算机 (1940s-1950s) - 真空管时代：</strong><ul>\n<li><strong>简单解释：</strong> 第一代计算机就像是一座大型实验室，使用大而笨重的真空管来执行计算任务。</li>\n<li><strong>比喻：</strong> 想象一下这是计算机的“实验室时代”，也就是只存在于实验室当中的电老虎，科学家他们在里面做各种计算实验。</li>\n<li><strong>特点：</strong> 大型、昂贵、需要大量的电力。</li>\n<li><strong>代表计算机：</strong> MARK I, ENIAC, UNIVAC。</li>\n</ul>\n</li>\n<li><strong>第二代计算机 (1950s-1960s) - 晶体管时代：</strong><ul>\n<li><strong>简单解释：</strong> 第二代计算机就像是一座更现代的城市，开始使用小而高效的晶体管来进行计算。</li>\n<li><strong>比喻：</strong> 这是计算机的“城市时代”，就像是城市里的建筑变得更小巧，但是效率更高了，但是还是只存在于实验室当中。</li>\n<li><strong>特点：</strong> 晶体管取代了真空管，使计算机更小、更可靠。</li>\n<li><strong>代表计算机：</strong> IBM1401, IBM 1410，配有1402卡片读写机。</li>\n</ul>\n</li>\n<li><strong>第三代计算机 (1960s-1970s) - 集成电路时代：</strong><ul>\n<li><strong>简单解释：</strong> 第三代计算机就像是一座更高效的城市，开始使用集成电路，将许多电子元件集成到一个芯片上。</li>\n<li><strong>比喻：</strong> 这是计算机的“高楼大厦时代”，就像是城市里的建筑变得更紧凑，功能更强大，成本开始降低，开始走入人们日常生活。</li>\n<li><strong>特点：</strong> 集成电路的使用使计算机更小、更快、更可靠。</li>\n<li><strong>代表计算机：</strong> DEC PDP-1，IBM 360。</li>\n</ul>\n</li>\n<li><strong>第四代计算机 (1970s-现在) - 微处理器时代：</strong><ul>\n<li><strong>简单解释：</strong> 第四代计算机就像是一座充满小而强大的计算机的城市，引入了微处理器，使计算机更加个人化。</li>\n<li><strong>比喻：</strong> 这是计算机的“个性化时代”，就像是每个人都可以拥有自己的小型计算机。</li>\n<li><strong>特点：</strong> 微处理器的出现使得计算机变得更小、更便携，个人电脑开始普及。</li>\n<li><strong>代表计算机：</strong> LSI和VLSI技术崛起，出现了大规模集成电路。出现了Cray-1超级计算机，以及个人电脑的崭露头角，如Apple II、IBM PC、Notebook PC、Palmtop、Laptop、iPhone、iPad等。</li>\n</ul>\n</li>\n<li><strong>未来计算机（可能的第五代）：</strong><ul>\n<li><strong>简单解释：</strong> 未来计算机可能像是一座充满智能的城市，使用更先进的技术，比如人工智能和量子计算。</li>\n<li><strong>比喻：</strong> 这将是计算机的“智能时代”，就像是城市里充满了智能机器人和超级智慧的计算机。</li>\n<li><strong>特点：</strong> 可能包括更强大的人工智能、量子计算等技术。</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"计算机中的硬件与软件\"><a href=\"#计算机中的硬件与软件\" class=\"headerlink\" title=\"计算机中的硬件与软件\"></a>计算机中的硬件与软件</h1><ol>\n<li><strong>硬件：</strong><ul>\n<li><strong>简单解释：</strong> 计算机的硬件就像是它的身体，包括所有的物理部件，如中央处理器（CPU）、内存、硬盘、显示屏等。</li>\n<li><strong>比喻：</strong> 想象一下计算机的硬件就像是一台机器人的身体，有头脑（CPU）、记忆力（内存）、存储空间（硬盘），它们一起协作完成任务。</li>\n</ul>\n</li>\n<li><strong>软件：</strong><ul>\n<li><strong>简单解释：</strong> 计算机的软件就像是它的思维能力，是由程序组成的，告诉硬件如何执行任务。</li>\n<li><strong>比喻：</strong> 软件就像是机器人的大脑，里面有很多指令和程序，告诉机器人如何走路、说话，完成各种任务。</li>\n</ul>\n</li>\n<li><strong>硬件和软件的关系：</strong><ul>\n<li><strong>简单解释：</strong> 硬件和软件关系密不可分，硬件提供了执行任务的能力，而软件告诉硬件要执行什么任务。</li>\n<li><strong>比喻：</strong> 想象一下机器人，硬件是机器人的身体，软件是机器人的大脑。只有两者配合得当，机器人才能高效地完成各种任务。</li>\n</ul>\n</li>\n<li><strong>过去的情况：</strong><ul>\n<li><strong>简单解释：</strong> 以前，大学的计算机课程通常分为硬件和软件两个方向，学生在其中一个方向进行专业学习。</li>\n<li><strong>比喻：</strong> 就像是学生可以选择学习机器人的身体（硬件）或大脑（软件），但并没有同时学习两者的整体知识。</li>\n</ul>\n</li>\n<li><strong>问题的影响：</strong><ul>\n<li><strong>简单解释：</strong> 这种专业化导致了一些问题，例如程序员可能不了解他们使用的设备，软件可能无法充分利用新硬件的性能优势。</li>\n<li><strong>比喻：</strong> 就好比一个机器人专家可能不知道如何正确地使用一台新型机器人的身体，或者一个新型机器人的大脑不知道如何充分发挥身体的性能。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"硬件\"><a href=\"#硬件\" class=\"headerlink\" title=\"硬件\"></a>硬件</h2><p>计算机硬件主要有五个类别，分别是：输入（Input）、处理（Processing）、输出（Output）、存储（Storage）和通信（Communications）。</p>\n<ol>\n<li><strong>输入（Input）：</strong><ul>\n<li><strong>简单解释：</strong> 输入部分涉及到将数据或信息引入计算机系统的过程。</li>\n<li><strong>具体例子：</strong> 键盘、鼠标、触摸屏、摄像头等都是用于向计算机输入信息的设备。</li>\n<li><strong>比喻：</strong> 就像给计算机输入命令的方式，就像你用键盘给计算机发指令，或者通过触摸屏让它明白你的动作。</li>\n</ul>\n</li>\n<li><strong>处理（Processing）：</strong><ul>\n<li><strong>简单解释：</strong> 处理部分是计算机执行操作和运算的地方，这里进行了所有的计算和决策。</li>\n<li><strong>具体例子：</strong> 中央处理器（CPU）是负责执行指令和运算的关键组件。</li>\n<li><strong>比喻：</strong> 就像计算机的大脑，它负责思考和处理输入的信息，执行各种任务。</li>\n</ul>\n</li>\n<li><strong>输出（Output）：</strong><ul>\n<li><strong>简单解释：</strong> 输出部分是计算机向外部世界传递处理结果的地方。</li>\n<li><strong>具体例子：</strong> 显示屏、打印机、扬声器等设备用于向用户显示或传达计算机的结果。</li>\n<li><strong>比喻：</strong> 就像计算机向你展示它的思考结果，就像你通过显示屏看到图像、通过扬声器听到声音。</li>\n</ul>\n</li>\n<li><strong>存储（Storage）：</strong><ul>\n<li><strong>简单解释：</strong> 存储部分是用于保存数据和程序的地方，以便之后的使用。</li>\n<li><strong>具体例子：</strong> 硬盘驱动器、固态硬盘、内存等是计算机存储数据和程序的地方。</li>\n<li><strong>比喻：</strong> 就像计算机的记忆，可以保存过去的信息，以便今后的使用，就像你的大脑记住了你学过的知识一样。</li>\n</ul>\n</li>\n<li><strong>通信（Communications）：</strong><ul>\n<li><strong>简单解释：</strong> 通信部分涉及计算机与其他计算机或设备之间传输信息的过程。</li>\n<li><strong>具体例子：</strong> 网络接口卡、Wi-Fi模块等是用于连接计算机与网络或其他设备进行通信的部件。</li>\n<li><strong>比喻：</strong> 就像计算机通过网络与其他计算机交流，就像你通过电话或信息与朋友们保持联系。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"软件\"><a href=\"#软件\" class=\"headerlink\" title=\"软件\"></a>软件</h2><p>计算机软件主要分为两个部分：系统软件（System Software）和应用软件（Applications Software）。</p>\n<h3 id=\"系统软件（System-Software）：\"><a href=\"#系统软件（System-Software）：\" class=\"headerlink\" title=\"系统软件（System Software）：\"></a>系统软件（System Software）：</h3><ol>\n<li><strong>通信与硬件交互（Communication with Hardware）：</strong><ul>\n<li><strong>简单解释：</strong> 系统软件负责与计算机的硬件进行交流，使硬件能够有效地执行软件指令。</li>\n<li><strong>功能：</strong> 系统软件确保软件和硬件之间的顺畅沟通，使得计算机的各个部分能够正确协同工作。</li>\n<li><strong>比喻：</strong> 就像系统软件是翻译官，帮助软件和硬件之间更好地交流，确保它们能够理解对方。</li>\n</ul>\n</li>\n<li><strong>资源管理（Resource Management）：</strong><ul>\n<li><strong>简单解释：</strong> 系统软件负责有效管理计算机的各种资源，如内存、处理器、存储等，以确保它们被充分利用。</li>\n<li><strong>功能：</strong> 系统软件分配和监控计算机资源，以满足不同程序的需求，确保计算机运行顺畅。</li>\n<li><strong>比喻：</strong> 就像系统软件是一个管理员，负责分配每个人的工作，确保资源得到合理利用。</li>\n</ul>\n</li>\n<li><strong>促进应用程序之间的通信（Facilitates Communication Among Application Programs）：</strong><ul>\n<li><strong>简单解释：</strong> 系统软件帮助不同的应用程序之间进行有效的沟通和协同工作。</li>\n<li><strong>功能：</strong> 系统软件提供了一些工具和接口，使得不同的应用程序可以互相协作，共享信息。</li>\n<li><strong>比喻：</strong> 就像系统软件是一个社交平台，让不同的应用程序之间可以友好地互动和分享。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"应用软件（Applications-Software）：\"><a href=\"#应用软件（Applications-Software）：\" class=\"headerlink\" title=\"应用软件（Applications Software）：\"></a>应用软件（Applications Software）：</h3><ol>\n<li>为用户提供利益或协助用户（Benefits or Assists the User）：<ul>\n<li><strong>简单解释：</strong> 应用软件是用户直接与之交互的软件，为用户提供各种功能和服务。</li>\n<li><strong>功能：</strong> 应用软件可以是办公套件、图形设计工具、游戏等，它们直接满足用户的需求，提供具体的服务。</li>\n<li><strong>比喻：</strong> 就像应用软件是一位服务员，根据你的需求提供不同的服务，比如为你准备文件、设计图形、玩游戏等。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"向下兼容性（Backward-or-Downward-Compatibility）\"><a href=\"#向下兼容性（Backward-or-Downward-Compatibility）\" class=\"headerlink\" title=\"向下兼容性（Backward or Downward Compatibility）\"></a>向下兼容性（Backward or Downward Compatibility）</h2><ol>\n<li><strong>简单解释：</strong> 向下兼容性是指新硬件可以运行旧硬件上编写的大多数软件。这意味着即使你有一台新的计算机，你仍然可以运行为旧计算机编写的软件。</li>\n<li><strong>为何需要向下兼容性？：</strong><ul>\n<li><strong>简单解释：</strong> 向下兼容性的主要目的是确保旧软件在新硬件上仍然可以运行，而不需要进行太多修改。</li>\n<li>原因：<ul>\n<li><strong>保护投资：</strong> 人们通常在软件开发上投入大量资源和金钱。通过保持向下兼容性，可以确保过去的投资仍然有价值，而不必重新开发所有软件。</li>\n<li><strong>用户体验：</strong> 用户不必因为升级硬件而失去对过去软件的使用。这提供了更平滑的过渡，用户可以逐步更新硬件而不担心软件的兼容性问题。</li>\n<li><strong>过渡期：</strong> 当新硬件推出时，人们可能还在使用旧硬件。通过向下兼容性，可以在过渡期内保持对过去技术的支持。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>为什么是向下兼容而不是向上兼容？：</strong><ul>\n<li><strong>简单解释：</strong> 向下兼容性更为常见，因为它更容易实现。新硬件通常更强大，可以模拟或处理旧硬件的指令和功能。</li>\n<li>原因：<ul>\n<li><strong>技术演进：</strong> 随着技术的进步，新硬件通常能够模拟和处理旧硬件的功能，但反过来却不一定成立。</li>\n<li><strong>资源充足：</strong> 新硬件通常具有更多的资源和功能，可以模拟和处理旧硬件的操作，因此向下兼容性更为实际。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<p>也就是说，向下兼容性保证了用户和开发者的良好体验以及对于旧软件的支持。</p>\n<h2 id=\"VDHL\"><a href=\"#VDHL\" class=\"headerlink\" title=\"VDHL\"></a>VDHL</h2><p>VHDL（Very High Speed Integrated Circuits Hardware Description Language，非常高速集成电路硬件描述语言）是一种用于描述电子系统结构和行为的编程语言。它主要用于设计和模拟数字电路，涵盖了从高层次系统规范到低层次门级描述的各个抽象层次。</p>\n<ol>\n<li><strong>目的和用途:</strong><ul>\n<li><strong>硬件描述:</strong> VHDL主要用于描述数字系统的硬件组件。它允许设计人员指定电子电路的结构和功能。</li>\n<li><strong>仿真:</strong> VHDL支持计算机仿真，使设计人员能够在实际实施之前验证其设计的正确性和性能。这有助于在设计过程的早期阶段识别和修复潜在问题。</li>\n<li><strong>自动布局:</strong> VHDL还用于提供给自动布局工具的输入。这些工具根据VHDL中提供的高层描述生成电路的物理布局。这对于集成电路的制造和制造至关重要。</li>\n</ul>\n</li>\n<li><strong>扭转硬件与软件的分野:</strong><ul>\n<li>关于关注硬件的人和关注软件的人之间的分野的说法是指传统上硬件工程师和软件程序员之间的区别。</li>\n<li>VHDL在弥合这一差距方面发挥了重要作用。通过VHDL，设计人员可以以类似于软件开发中使用的编程语言的方式表达硬件设计。</li>\n<li>这使得硬件和软件团队能够更有效地进行沟通，因为VHDL为指定硬件结构及其功能提供了共同的语言。</li>\n</ul>\n</li>\n<li><strong>VHDL的特点:</strong><ul>\n<li><strong>抽象层次:</strong> VHDL支持不同层次的抽象，从高层次的行为描述到低层次的结构和门级表示。</li>\n<li><strong>并发性:</strong> VHDL支持并发编程，允许设计人员描述数字系统中过程和事件的并行执行。</li>\n<li><strong>测试台:</strong> 设计人员可以使用VHDL创建测试台，以模拟电路在各种条件下的行为，有助于验证和调试过程。</li>\n<li><strong>可配置性:</strong> VHDL具有很高的可配置性，允许设计人员以不同的上下文参数化和重用组件。</li>\n</ul>\n</li>\n</ol>\n<p>简而言之，一种语言，用来描述硬件。</p>\n<h2 id=\"一些软硬件交互开发的例子\"><a href=\"#一些软硬件交互开发的例子\" class=\"headerlink\" title=\"一些软硬件交互开发的例子\"></a>一些软硬件交互开发的例子</h2><ol>\n<li><strong>窗口界面 - WIMPs（窗口、图标、菜单、指针）</strong><ul>\n<li>想象一下你的电脑是一个办公桌，而WIMPs就是一种高级的组织工具。窗口就像是你的文件夹，图标是你的文件，菜单是你的工具箱，指针就像是你的笔。通过这些工具，你可以更有效地组织和管理你的电脑任务，就像在一个更智能的工作环境中一样。</li>\n</ul>\n</li>\n<li><strong>微处理器革命 - 快速位图图形</strong><ul>\n<li>想象一下微处理器就像是你电脑的引擎，而微处理器革命就是升级了这台引擎。这个升级让你的电脑可以更快速地处理图形，就像是你的屏幕变得更加细腻、清晰，使你的整个电脑体验更加流畅。</li>\n</ul>\n</li>\n<li><strong>互联网 - 连接所有网络</strong><ul>\n<li>想象一下互联网是一张巨大的全球蜘蛛网，将世界各地的网络连接在一起。这个全球蜘蛛网让你可以通过电脑轻松地访问到全球的信息，就像是打开了一扇通向世界的大门，让你能够与世界各地的人进行沟通和交流。</li>\n</ul>\n</li>\n<li><strong>Netscape浏览器的推出 - 推动互联网的使用</strong><ul>\n<li>想象一下Netscape浏览器是一辆通往互联网的新型车。当这辆车上路时，更多的人可以更轻松地进入互联网，就像是有了这款浏览器，你可以更便捷地浏览网页，发现更多有趣的内容，就像是在一辆更高级的车上畅游一样。</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"计算机的层次结构\"><a href=\"#计算机的层次结构\" class=\"headerlink\" title=\"计算机的层次结构\"></a>计算机的层次结构</h1><p>计算机系统被视为一个层次有序的系统，这意味着它可以被划分为多个层次或级别，每个级别包含一些简单的组件部分。这个层次结构的概念有助于理解计算机系统的复杂性，并使得系统的设计和理解更为容易。</p>\n<p><strong>层次结构的例子：</strong></p>\n<ul>\n<li>最底层可能是硬件层，包括处理器、内存、输入输出设备等。</li>\n<li>在硬件之上可能是操作系统层，负责管理硬件资源、提供用户界面等。</li>\n<li>再上一层可能是应用软件层，包括各种应用程序和工具。</li>\n</ul>\n<h2 id=\"好处\"><a href=\"#好处\" class=\"headerlink\" title=\"好处\"></a>好处</h2><ol>\n<li><strong>模块化和可维护性：</strong><ul>\n<li>层次结构使系统被分解为相互独立的模块或层次。每个模块负责特定的功能，这样的设计使得系统更容易维护和理解。如果需要对系统进行修改或升级，只需关注特定层次而无需了解整个系统的复杂性。</li>\n</ul>\n</li>\n<li><strong>抽象和简化：</strong><ul>\n<li>通过层次结构，系统设计者可以使用抽象来隐藏底层的细节。上层的模块不需要了解底层模块的具体实现细节，从而简化了设计和编程过程。这种抽象使得不同层次的设计可以独立进行，提高了系统的灵活性。</li>\n</ul>\n</li>\n<li><strong>可移植性：</strong><ul>\n<li>层次结构设计有助于实现系统的可移植性。由于各个层次都是相对独立的，更容易在不同的硬件平台上重新实现或迁移整个系统。</li>\n</ul>\n</li>\n<li><strong>性能优化：</strong><ul>\n<li>通过在不同层次上进行优化，系统设计者可以更有效地提高整体性能。例如，在底层硬件层进行优化可能会影响整个系统的性能，而无需涉及上层的软件层次。</li>\n</ul>\n</li>\n<li><strong>分工协作：</strong><ul>\n<li>层次结构有助于实现分工协作。不同团队可以专注于系统中的不同层次，加快开发进度，同时确保系统整体上的一致性和稳定性。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"操作系统的优势\"><a href=\"#操作系统的优势\" class=\"headerlink\" title=\"操作系统的优势\"></a>操作系统的优势</h2><p><strong>1. 揭示硬件系统功能：</strong></p>\n<ul>\n<li>操作系统充当了硬件和应用软件之间的中介。它可以将硬件系统的底层功能性展现给用户和应用程序。这包括处理器管理、内存管理、文件系统、网络功能等。通过操作系统，用户能够直观地利用计算机系统的各种功能，而无需了解底层硬件的复杂性。</li>\n</ul>\n<p><strong>2. 用户程序与硬件系统的交互：</strong></p>\n<ul>\n<li>操作系统为用户程序提供了一种与硬件系统进行交互的标准接口。用户编写的程序可以通过操作系统的API（Application Programming Interface）或系统调用与硬件进行通信。这种抽象层使得编程更加简单，程序员可以专注于应用程序的逻辑，而无需直接处理底层硬件的复杂性。</li>\n</ul>\n<p><strong>3. 编程的便利性：</strong></p>\n<ul>\n<li>操作系统提供了一系列高级功能和服务，使得程序员可以更轻松地开发应用程序。这包括文件管理、内存管理、进程调度等。通过使用这些操作系统提供的功能，编程变得更为方便和高效。</li>\n</ul>\n<p><strong>4. 系统和用户的保护：</strong></p>\n<ul>\n<li>操作系统通过实施访问控制和权限管理来保护系统和用户。只有经过授权的程序和用户才能访问特定的资源和数据。这种安全机制有助于防止恶意软件、未经授权的访问，以及对系统的滥用。</li>\n</ul>\n<p><strong>5. 公平性和效率：</strong></p>\n<ul>\n<li>操作系统负责管理系统资源，确保它们被公平和有效地分配给不同的用户和应用程序。调度算法、内存管理和文件系统的优化都有助于确保系统资源的公平共享和高效利用。这是为了避免某个应用程序或用户占用过多资源，影响其他程序或用户的正常运行。</li>\n</ul>\n<h1 id=\"摩尔定律\"><a href=\"#摩尔定律\" class=\"headerlink\" title=\"摩尔定律\"></a>摩尔定律</h1><p>摩尔定律（Moore’s Law）是由英特尔创始人之一戈登·摩尔（Gordon Moore）在1965年提出的观察性定律。这一定律描述了集成电路上可容纳的晶体管数量随时间的推移而呈指数级增长的趋势。具体来说，摩尔定律的表述是：“集成电路上可容纳的晶体管数量每隔约18至24个月就会翻倍。”</p>\n<p>以下是摩尔定律的一些关键点：</p>\n<ol>\n<li><strong>指数级增长：</strong> 摩尔定律指出，集成电路上的晶体管数量以指数形式增长，而不是线性增长。这就意味着在相对短的时间内，芯片上可以容纳的晶体管数量会迅速增加。</li>\n<li><strong>时间尺度：</strong> 最初，摩尔估计这一趋势大约每隔18至24个月就会翻倍，这个估计后来被广泛接受。这表明了集成电路技术的快速进步，以及芯片性能和功能的迅速提升。</li>\n<li><strong>成本效益：</strong> 摩尔定律的实质之一是，随着晶体管数量的增加，每个晶体管的成本相对降低。这导致了更为经济有效的电子设备制造，促使了技术的广泛应用和市场普及。</li>\n<li><strong>影响产业：</strong> 摩尔定律的实现推动了计算机科学和信息技术领域的快速发展。计算机硬件的性能大幅提升，从而推动了软件和应用程序的发展，也促使了信息技术在各个领域的广泛应用。</li>\n<li><strong>挑战与延续：</strong> 随着技术逐渐接近摩尔定律的物理极限，一些人开始质疑它的持续性。在过去几年中，虽然芯片的制造工艺在继续进步，但翻倍速度可能已经减缓。面临着晶体管缩小和功耗等方面的物理和工程难题，一些专业人士对摩尔定律的未来持保守态度。</li>\n</ol>\n<h1 id=\"Q-A\"><a href=\"#Q-A\" class=\"headerlink\" title=\"Q&A\"></a>Q&amp;A</h1><p><strong>提到计算机系统的四个架构层次：</strong></p>\n<ul>\n<li>计算机系统的四个架构层次包括：<ol>\n<li><strong>高级语言层次：</strong> 这是诸如Java、C++或Python等编程语言操作的层次。</li>\n<li><strong>汇编语言层次：</strong> 这个层次涉及对特定体系结构的机器码指令进行符号表示。</li>\n<li><strong>操作系统层次：</strong> 操作系统管理硬件资源并为计算机程序提供服务。</li>\n<li><strong>数字逻辑层次：</strong> 这是最低层次，涉及实际硬件组件，如逻辑门和电路。</li>\n</ol>\n</li>\n</ul>\n<p><strong>CPU和ALU分别代表什么？</strong></p>\n<ul>\n<li><strong>CPU：</strong> 中央处理单元。这是计算机的主要组件，负责执行指令。</li>\n<li><strong>ALU：</strong> 算术逻辑单元。它是CPU的一部分，执行算术和逻辑运算。</li>\n</ul>\n<p><strong>计算机系统的组成部分有哪些？</strong></p>\n<ul>\n<li>计算机系统的主要组成部分包括：<ol>\n<li><strong>中央处理单元（CPU）：</strong> 执行指令。</li>\n<li><strong>内存（RAM）：</strong> 存储CPU快速访问的数据和指令。</li>\n<li><strong>存储设备（硬盘、固态硬盘）：</strong> 用于长期存储数据。</li>\n<li><strong>主板：</strong> 连接并促进各种组件之间的通信。</li>\n<li><strong>输入设备（键盘、鼠标）：</strong> 允许用户输入数据。</li>\n<li><strong>输出设备（显示器、打印机）：</strong> 显示或产生结果。</li>\n</ol>\n</li>\n</ul>\n<p><strong>提到四种不同类型的计算机：</strong></p>\n<ul>\n<li><ol>\n<li><strong>个人计算机（PC）：</strong> 为个人使用而设计。</li>\n</ol>\n</li>\n<li><ol>\n<li><strong>服务器：</strong> 为网络中的其他计算机提供服务。</li>\n</ol>\n</li>\n<li><ol>\n<li><strong>大型机：</strong> 面向组织的大规模计算。</li>\n</ol>\n</li>\n<li><ol>\n<li><strong>嵌入式系统：</strong> 嵌入其他设备中的专用系统（如洗衣机、汽车）。</li>\n</ol>\n</li>\n</ul>\n<p><strong>通过什么方式促使‘服务器’的使用？</strong></p>\n<ul>\n<li><strong>服务器通过网络连接和专用软件的可用性来提供服务。</strong> 它们旨在为网络中的其他计算机（客户端）提供服务、资源或数据。</li>\n</ul>\n<p><strong>定义‘计算机系统’的学科领域：</strong></p>\n<ul>\n<li>计算机系统涵盖各种学科领域，包括：<ol>\n<li><strong>计算机体系结构：</strong> 计算机系统的设计和组织。</li>\n<li><strong>操作系统：</strong> 管理硬件资源的软件。</li>\n<li><strong>计算机网络：</strong> 计算机之间的连接和通信。</li>\n<li><strong>软件工程：</strong> 软件应用程序的开发。</li>\n<li><strong>数据库：</strong> 数据的存储和检索。</li>\n</ol>\n</li>\n</ul>\n<p><strong>定义‘向下兼容性’：</strong></p>\n<ul>\n<li><strong>向下兼容性指的是软件或硬件系统能够与先前版本的相同系统的功能和数据一起使用或支持的能力。</strong> 这确保了新版本仍然可以运行由旧版本创建的应用程序或使用旧版本生成的数据。</li>\n</ul>\n<p><strong>可以用于设计高速集成电路硬件的描述语言是什么？</strong></p>\n<ul>\n<li><strong>Verilog或VHDL（VHSIC硬件描述语言）可用于设计高速集成电路硬件。</strong> 这些语言允许工程师描述数字电路的行为和结构，促进复杂硬件系统的设计。</li>\n</ul>\n<p><strong>采用分层方法的计算机系统的优势有哪些？</strong></p>\n<ul>\n<li>分层方法的优势包括：<ol>\n<li><strong>模块化设计：</strong> 系统被划分为层次，每个层次都有特定的功能，使得系统更易于理解和维护。</li>\n<li><strong>抽象：</strong> 各个层次提供不同程度的抽象，使得开发人员可以专注于特定层次的实现而不必关心底层细节。</li>\n<li><strong>可维护性：</strong> 修改或升级系统的特定层次不会影响其他层次，从而提高了系统的可维护性。</li>\n<li><strong>可替代性：</strong> 可以相对容易地替换或升级某个层次，而不影响系统的整体功能。</li>\n</ol>\n</li>\n</ul>\n<p><strong>什么是摩尔定律？</strong></p>\n<ul>\n<li><strong>摩尔定律是由英特尔公司创始人戈登·摩尔提出的观点，它指出集成电路上可容纳的晶体管数量每隔约18至24个月会翻一番。</strong> 摩尔定律反映了集成电路技术快速发展的趋势，导致芯片性能不断提升，成本不断降低。</li>\n</ul>\n<p><strong>通过什么可以展现硬件系统的功能并提供给用户？</strong></p>\n<ul>\n<li><strong>硬件系统的功能可以通过软件展现并提供给用户。</strong> 软件通过与硬件交互，控制硬件执行特定任务，使用户能够利用硬件提供的功能。</li>\n</ul>\n<p><strong>有‘操作系统’包围计算机硬件的优势有哪些？</strong></p>\n<ul>\n<li>有操作系统包围计算机硬件的优势包括：<ol>\n<li><strong>资源管理：</strong> 操作系统负责有效管理计算机硬件资源，如内存、CPU等。</li>\n<li><strong>用户接口：</strong> 提供了用户与计算机系统交互的接口，使用户能够方便地使用计算机。</li>\n<li><strong>多任务处理：</strong> 允许同时运行多个程序，提高了系统的效率和利用率。</li>\n<li><strong>安全性：</strong> 操作系统提供了对计算机系统的访问控制和安全性管理。</li>\n</ol>\n</li>\n</ul>\n<p><strong>WIMP是什么缩写？WIMP的出现是由于什么发展？</strong></p>\n<ul>\n<li><strong>WIMP是窗口（Windows）、图标（Icons）、菜单（Menus）和指针（Pointers）的缩写。</strong> WIMP的出现是由于图形用户界面（GUI）的发展。GUI的引入使计算机操作更直观，用户通过图形元素进行交互，而不仅仅是通过命令行界面。</li>\n</ul>\n<p><strong>科学计算的焦点是什么？</strong></p>\n<ul>\n<li><strong>科学计算的焦点是通过数值方法和模拟来解决科学和工程问题。</strong> 这包括对复杂的数学模型进行数值求解，以模拟自然现象或工程系统的行为。</li>\n</ul>\n<p><strong>商业计算的焦点是什么？</strong></p>\n<ul>\n<li><strong>商业计算的焦点是支持和优化商业运作。</strong> 这包括数据管理、财务分析、市场营销等，旨在提高组织的效率和决策制定。</li>\n</ul>\n<p><strong>个人计算的主要特点是什么？</strong></p>\n<ul>\n<li><strong>个人计算的主要特点是个人使用。</strong> 个人计算机是为个人用户设计的，通常用于个人任务、娱乐和办公，具有相对较小的规模和灵活性。</li>\n</ul>\n","text":"今天复习CPT101，在我看来全是死记硬背的东西，但是不背又不行，唉 我看课件感觉好多废话，但是我又不知道到底会不会考，我真无语了 计算机的分类计算机主要可以分为四个主要阶段，分别是：大型计算机，超级计算机，工作站，微型计算机，个人电脑。 Mainframe Computers（...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[],"tags":[{"name":"笔记","slug":"笔记","count":37,"path":"api/tags/笔记.json"},{"name":"CPT101复习","slug":"CPT101复习","count":1,"path":"api/tags/CPT101复习.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9A%84%E5%88%86%E7%B1%BB\"><span class=\"toc-text\">计算机的分类</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%96%E4%BB%A3\"><span class=\"toc-text\">计算机世代</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%AD%E7%9A%84%E7%A1%AC%E4%BB%B6%E4%B8%8E%E8%BD%AF%E4%BB%B6\"><span class=\"toc-text\">计算机中的硬件与软件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%A1%AC%E4%BB%B6\"><span class=\"toc-text\">硬件</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BD%AF%E4%BB%B6\"><span class=\"toc-text\">软件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%B3%BB%E7%BB%9F%E8%BD%AF%E4%BB%B6%EF%BC%88System-Software%EF%BC%89%EF%BC%9A\"><span class=\"toc-text\">系统软件（System Software）：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BA%94%E7%94%A8%E8%BD%AF%E4%BB%B6%EF%BC%88Applications-Software%EF%BC%89%EF%BC%9A\"><span class=\"toc-text\">应用软件（Applications Software）：</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%90%91%E4%B8%8B%E5%85%BC%E5%AE%B9%E6%80%A7%EF%BC%88Backward-or-Downward-Compatibility%EF%BC%89\"><span class=\"toc-text\">向下兼容性（Backward or Downward Compatibility）</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#VDHL\"><span class=\"toc-text\">VDHL</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%E4%BA%9B%E8%BD%AF%E7%A1%AC%E4%BB%B6%E4%BA%A4%E4%BA%92%E5%BC%80%E5%8F%91%E7%9A%84%E4%BE%8B%E5%AD%90\"><span class=\"toc-text\">一些软硬件交互开发的例子</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9A%84%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">计算机的层次结构</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A5%BD%E5%A4%84\"><span class=\"toc-text\">好处</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E4%BC%98%E5%8A%BF\"><span class=\"toc-text\">操作系统的优势</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%91%A9%E5%B0%94%E5%AE%9A%E5%BE%8B\"><span class=\"toc-text\">摩尔定律</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Q-A\"><span class=\"toc-text\">Q&amp;A</span></a></li></ol>","author":{"name":"General_K1ng","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/GeneralK1ng/My_Blog_IMG@main/img/avatar.png","link":"/","description":"一名正在努力学习计算机的菜鸟","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/BILIBILI.svg","link":"https://space.bilibili.com/32927332"},"csdn":{"icon":"/svg/csdn.svg","link":"https://blog.csdn.net/qq_34849354"},"github":{"icon":"/svg/GitHub.svg","link":"https://github.com/GeneralK1ng"},"QQ":{"icon":"/svg/QQ.svg","link":"tencent://AddContact/?fromId=45&fromSubId=1&subcmd=all&uin=2822688858"}}}},"mapped":true,"prev_post":{"title":"MySQL Review-3","uid":"6381f3e54a84ac6dc19cc4600b2aeb52","slug":"MySQL-Review-3","date":"2023-12-05T09:19:22.000Z","updated":"2023-12-05T10:29:37.657Z","comments":true,"path":"api/articles/MySQL-Review-3.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/GeneralK1ng/My_Blog_IMG@main/img/MySQL-image.png","text":"今天继续复习MySQL当中比较重要的一点，但是前面也已经涉及到了，就是MySQL中的约束。 但是其实前面的UNIQUE，PRIMARY之类的也算约束。 约束在关系数据库中，约束是一种用于定义和强制表中数据规则的机制。约束确保了数据的完整性、一致性和可靠性。通过使用约束，数据库管理...","link":"","photos":[],"count_time":{"symbolsCount":"8.9k","symbolsTime":"8 mins."},"categories":[],"tags":[{"name":"笔记","slug":"笔记","count":37,"path":"api/tags/笔记.json"},{"name":"MySQL复习","slug":"MySQL复习","count":7,"path":"api/tags/MySQL复习.json"}],"author":{"name":"General_K1ng","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/GeneralK1ng/My_Blog_IMG@main/img/avatar.png","link":"/","description":"一名正在努力学习计算机的菜鸟","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/BILIBILI.svg","link":"https://space.bilibili.com/32927332"},"csdn":{"icon":"/svg/csdn.svg","link":"https://blog.csdn.net/qq_34849354"},"github":{"icon":"/svg/GitHub.svg","link":"https://github.com/GeneralK1ng"},"QQ":{"icon":"/svg/QQ.svg","link":"tencent://AddContact/?fromId=45&fromSubId=1&subcmd=all&uin=2822688858"}}}}},"next_post":{"title":"MySQL Review-2","uid":"931d32a5aa688f1d603d588de90831ae","slug":"MySQL-Review-2","date":"2023-12-02T05:52:17.000Z","updated":"2023-12-02T08:09:53.221Z","comments":true,"path":"api/articles/MySQL-Review-2.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/GeneralK1ng/My_Blog_IMG@main/img/MySQL-image.png","text":"今天继续复习数据库，顺序就按照学校的来，我也不知道从哪里开始讲。 什么是SQL？SQL的全称是 “Structured Query Language”，也就是结构化查询语言，是一种用于访问和处理数据库的标准的计算机语言。 SQL可以干什么？SQL主要分为两种，一种是DDL（Dat...","link":"","photos":[],"count_time":{"symbolsCount":"16k","symbolsTime":"14 mins."},"categories":[],"tags":[{"name":"笔记","slug":"笔记","count":37,"path":"api/tags/笔记.json"},{"name":"MySQL复习","slug":"MySQL复习","count":7,"path":"api/tags/MySQL复习.json"}],"author":{"name":"General_K1ng","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/GeneralK1ng/My_Blog_IMG@main/img/avatar.png","link":"/","description":"一名正在努力学习计算机的菜鸟","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/BILIBILI.svg","link":"https://space.bilibili.com/32927332"},"csdn":{"icon":"/svg/csdn.svg","link":"https://blog.csdn.net/qq_34849354"},"github":{"icon":"/svg/GitHub.svg","link":"https://github.com/GeneralK1ng"},"QQ":{"icon":"/svg/QQ.svg","link":"tencent://AddContact/?fromId=45&fromSubId=1&subcmd=all&uin=2822688858"}}}}}}